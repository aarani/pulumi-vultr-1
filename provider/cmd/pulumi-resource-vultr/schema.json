{
    "name": "vultr",
    "description": "A Pulumi package for creating and managing vultr cloud resources.",
    "keywords": [
        "pulumi",
        "vultr"
    ],
    "homepage": "https://pulumi.io",
    "license": "Apache-2.0",
    "attribution": "This Pulumi package is based on the [`vultr` Terraform Provider](https://github.com/vultr/terraform-provider-vultr).",
    "repository": "https://github.com/vincentbernat/pulumi-vultr",
    "meta": {
        "moduleFormat": "(.*)(?:/[^/]*)"
    },
    "config": {
        "variables": {
            "apiKey": {
                "type": "string",
                "description": "The API Key that allows interaction with the API\n"
            },
            "rateLimit": {
                "type": "integer",
                "description": "Allows users to set the speed of API calls to work with the Vultr Rate Limit\n"
            },
            "retryLimit": {
                "type": "integer",
                "description": "Allows users to set the maximum number of retries allowed for a failed API call.\n"
            }
        },
        "defaults": [
            "apiKey"
        ]
    },
    "types": {
        "vultr:index/InstanceBackupsSchedule:InstanceBackupsSchedule": {
            "properties": {
                "dom": {
                    "type": "integer",
                    "description": "Day of month to run. Use values between 1 and 28.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "dow": {
                    "type": "integer",
                    "description": "Day of week to run. `1 = Sunday`, `2 = Monday`, `3 = Tuesday`, `4 = Wednesday`, `5 = Thursday`, `6 = Friday`, `7 = Saturday`\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "hour": {
                    "type": "integer",
                    "description": "Hour of day to run in UTC.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "type": {
                    "type": "string",
                    "description": "Type of backup schedule Possible values are `daily`, `weekly`, `monthly`, `daily_alt_event`, or `daily_alt_odd`.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                }
            },
            "type": "object",
            "required": [
                "type"
            ],
            "language": {
                "nodejs": {
                    "requiredOutputs": [
                        "dom",
                        "dow",
                        "hour",
                        "type"
                    ]
                }
            }
        },
        "vultr:index/LoadBalancerFirewallRule:LoadBalancerFirewallRule": {
            "properties": {
                "id": {
                    "type": "string",
                    "description": "The load balancer ID.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "ipType": {
                    "type": "string",
                    "description": "The type of ip this rule is - may be either v4 or v6.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "port": {
                    "type": "integer",
                    "description": "The assigned port (integer) on the attached instances that the load balancer should check against. Default value is `80`.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "source": {
                    "type": "string",
                    "description": "IP address with subnet that is allowed through the firewall. You may also pass in `cloudflare` which will allow only CloudFlares IP range.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                }
            },
            "type": "object",
            "required": [
                "ipType",
                "port",
                "source"
            ],
            "language": {
                "nodejs": {
                    "requiredOutputs": [
                        "id",
                        "ipType",
                        "port",
                        "source"
                    ]
                }
            }
        },
        "vultr:index/LoadBalancerForwardingRule:LoadBalancerForwardingRule": {
            "properties": {
                "backendPort": {
                    "type": "integer",
                    "description": "Port on instance side.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "backendProtocol": {
                    "type": "string",
                    "description": "Protocol on instance side. Possible values: \"http\", \"https\", \"tcp\".\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "frontendPort": {
                    "type": "integer",
                    "description": "Port on load balancer side.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "frontendProtocol": {
                    "type": "string",
                    "description": "Protocol on load balancer side. Possible values: \"http\", \"https\", \"tcp\".\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "ruleId": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                }
            },
            "type": "object",
            "required": [
                "backendPort",
                "backendProtocol",
                "frontendPort",
                "frontendProtocol"
            ],
            "language": {
                "nodejs": {
                    "requiredOutputs": [
                        "backendPort",
                        "backendProtocol",
                        "frontendPort",
                        "frontendProtocol",
                        "ruleId"
                    ]
                }
            }
        },
        "vultr:index/LoadBalancerHealthCheck:LoadBalancerHealthCheck": {
            "properties": {
                "checkInterval": {
                    "type": "integer",
                    "description": "Time in seconds to perform health check. Default value is 15.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "healthyThreshold": {
                    "type": "integer",
                    "description": "Number of failed attempts encountered before failover. Default value is 5.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "path": {
                    "type": "string",
                    "description": "The path on the attached instances that the load balancer should check against. Default value is `/`\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "port": {
                    "type": "integer",
                    "description": "The assigned port (integer) on the attached instances that the load balancer should check against. Default value is `80`.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "protocol": {
                    "type": "string",
                    "description": "The protocol used to traffic requests to the load balancer. Possible values are `http`, or `tcp`. Default value is `http`.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "responseTimeout": {
                    "type": "integer",
                    "description": "Time in seconds to wait for a health check response. Default value is 5.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "unhealthyThreshold": {
                    "type": "integer",
                    "description": "Number of failed attempts encountered before failover. Default value is 5.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                }
            },
            "type": "object",
            "required": [
                "checkInterval",
                "healthyThreshold",
                "port",
                "protocol",
                "responseTimeout",
                "unhealthyThreshold"
            ]
        },
        "vultr:index/LoadBalancerSsl:LoadBalancerSsl": {
            "properties": {
                "certificate": {
                    "type": "string",
                    "description": "The SSL Certificate.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "chain": {
                    "type": "string",
                    "description": "The SSL certificate chain.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "privateKey": {
                    "type": "string",
                    "description": "The SSL certificates private key.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                }
            },
            "type": "object",
            "required": [
                "certificate",
                "privateKey"
            ]
        },
        "vultr:index/getApplicationFilter:getApplicationFilter": {
            "properties": {
                "name": {
                    "type": "string",
                    "description": "Attribute name to filter with.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "values": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "One or more values filter with.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                }
            },
            "type": "object",
            "required": [
                "name",
                "values"
            ]
        },
        "vultr:index/getBackupFilter:getBackupFilter": {
            "properties": {
                "name": {
                    "type": "string",
                    "description": "Attribute name to filter with.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "values": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "One or more values filter with.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                }
            },
            "type": "object",
            "required": [
                "name",
                "values"
            ]
        },
        "vultr:index/getBareMetalPlanFilter:getBareMetalPlanFilter": {
            "properties": {
                "name": {
                    "type": "string",
                    "description": "Attribute name to filter with.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "values": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "One or more values filter with.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                }
            },
            "type": "object",
            "required": [
                "name",
                "values"
            ]
        },
        "vultr:index/getBareMetalServerFilter:getBareMetalServerFilter": {
            "properties": {
                "name": {
                    "type": "string",
                    "description": "Attribute name to filter with.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "values": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "One or more values filter with.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                }
            },
            "type": "object",
            "required": [
                "name",
                "values"
            ]
        },
        "vultr:index/getBlockStorageFilter:getBlockStorageFilter": {
            "properties": {
                "name": {
                    "type": "string",
                    "description": "Attribute name to filter with.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "values": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "One or more values filter with.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                }
            },
            "type": "object",
            "required": [
                "name",
                "values"
            ]
        },
        "vultr:index/getFirewallGroupFilter:getFirewallGroupFilter": {
            "properties": {
                "name": {
                    "type": "string",
                    "description": "Attribute name to filter with.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "values": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "One or more values filter with.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                }
            },
            "type": "object",
            "required": [
                "name",
                "values"
            ]
        },
        "vultr:index/getInstanceFilter:getInstanceFilter": {
            "properties": {
                "name": {
                    "type": "string",
                    "description": "Attribute name to filter with.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "values": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "One or more values filter with.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                }
            },
            "type": "object",
            "required": [
                "name",
                "values"
            ]
        },
        "vultr:index/getInstanceIpv4Filter:getInstanceIpv4Filter": {
            "properties": {
                "name": {
                    "type": "string",
                    "description": "Attribute name to filter with.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "values": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "One or more values to filter with.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                }
            },
            "type": "object",
            "required": [
                "name",
                "values"
            ]
        },
        "vultr:index/getIsoPrivateFilter:getIsoPrivateFilter": {
            "properties": {
                "name": {
                    "type": "string",
                    "description": "Attribute name to filter with.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "values": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "One or more values filter with.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                }
            },
            "type": "object",
            "required": [
                "name",
                "values"
            ]
        },
        "vultr:index/getIsoPublicFilter:getIsoPublicFilter": {
            "properties": {
                "name": {
                    "type": "string",
                    "description": "Attribute name to filter with.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "values": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "One or more values filter with.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                }
            },
            "type": "object",
            "required": [
                "name",
                "values"
            ]
        },
        "vultr:index/getLoadBalancerFilter:getLoadBalancerFilter": {
            "properties": {
                "name": {
                    "type": "string",
                    "description": "Attribute name to filter with.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "values": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "One or more values filter with.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                }
            },
            "type": "object",
            "required": [
                "name",
                "values"
            ]
        },
        "vultr:index/getObjectStorageFilter:getObjectStorageFilter": {
            "properties": {
                "name": {
                    "type": "string",
                    "description": "Attribute name to filter with.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "values": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "One or more values filter with.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                }
            },
            "type": "object",
            "required": [
                "name",
                "values"
            ]
        },
        "vultr:index/getOsFilter:getOsFilter": {
            "properties": {
                "name": {
                    "type": "string",
                    "description": "Attribute name to filter with.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "values": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "One or more values filter with.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                }
            },
            "type": "object",
            "required": [
                "name",
                "values"
            ]
        },
        "vultr:index/getPlanFilter:getPlanFilter": {
            "properties": {
                "name": {
                    "type": "string",
                    "description": "Attribute name to filter with.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "values": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "One or more values filter with.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                }
            },
            "type": "object",
            "required": [
                "name",
                "values"
            ]
        },
        "vultr:index/getPrivateNetworkFilter:getPrivateNetworkFilter": {
            "properties": {
                "name": {
                    "type": "string",
                    "description": "Attribute name to filter with.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "values": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "One or more values filter with.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                }
            },
            "type": "object",
            "required": [
                "name",
                "values"
            ]
        },
        "vultr:index/getRegionFilter:getRegionFilter": {
            "properties": {
                "name": {
                    "type": "string",
                    "description": "Attribute name to filter with.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "values": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "One or more values filter with.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                }
            },
            "type": "object",
            "required": [
                "name",
                "values"
            ]
        },
        "vultr:index/getReservedIpFilter:getReservedIpFilter": {
            "properties": {
                "name": {
                    "type": "string",
                    "description": "Attribute name to filter with.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "values": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "One or more values filter with.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                }
            },
            "type": "object",
            "required": [
                "name",
                "values"
            ]
        },
        "vultr:index/getReverseIpv4Filter:getReverseIpv4Filter": {
            "properties": {
                "name": {
                    "type": "string",
                    "description": "Attribute name to filter with.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "values": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "One or more values to filter with.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                }
            },
            "type": "object",
            "required": [
                "name",
                "values"
            ]
        },
        "vultr:index/getReverseIpv6Filter:getReverseIpv6Filter": {
            "properties": {
                "name": {
                    "type": "string",
                    "description": "Attribute name to filter with.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "values": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "One or more values to filter with.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                }
            },
            "type": "object",
            "required": [
                "name",
                "values"
            ]
        },
        "vultr:index/getSnapshotFilter:getSnapshotFilter": {
            "properties": {
                "name": {
                    "type": "string",
                    "description": "Attribute name to filter with.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "values": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "One or more values filter with.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                }
            },
            "type": "object",
            "required": [
                "name",
                "values"
            ]
        },
        "vultr:index/getSshKeyFilter:getSshKeyFilter": {
            "properties": {
                "name": {
                    "type": "string",
                    "description": "Attribute name to filter with.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "values": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "One or more values filter with.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                }
            },
            "type": "object",
            "required": [
                "name",
                "values"
            ]
        },
        "vultr:index/getStartupScriptFilter:getStartupScriptFilter": {
            "properties": {
                "name": {
                    "type": "string",
                    "description": "Attribute name to filter with.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "values": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "One or more values filter with.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                }
            },
            "type": "object",
            "required": [
                "name",
                "values"
            ]
        },
        "vultr:index/getUserFilter:getUserFilter": {
            "properties": {
                "name": {
                    "type": "string",
                    "description": "Attribute name to filter with.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "values": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "One or more values filter with.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                }
            },
            "type": "object",
            "required": [
                "name",
                "values"
            ]
        }
    },
    "provider": {
        "description": "The provider type for the vultr package. By default, resources use package-wide configuration\nsettings, however an explicit `Provider` instance may be created and passed during resource\nconstruction to achieve fine-grained programmatic control over provider settings. See the\n[documentation](https://www.pulumi.com/docs/reference/programming-model/#providers) for more information.\n",
        "properties": {
            "apiKey": {
                "type": "string",
                "description": "The API Key that allows interaction with the API\n"
            },
            "rateLimit": {
                "type": "integer",
                "description": "Allows users to set the speed of API calls to work with the Vultr Rate Limit\n"
            },
            "retryLimit": {
                "type": "integer",
                "description": "Allows users to set the maximum number of retries allowed for a failed API call.\n"
            }
        },
        "required": [
            "apiKey"
        ],
        "inputProperties": {
            "apiKey": {
                "type": "string",
                "description": "The API Key that allows interaction with the API\n"
            },
            "rateLimit": {
                "type": "integer",
                "description": "Allows users to set the speed of API calls to work with the Vultr Rate Limit\n"
            },
            "retryLimit": {
                "type": "integer",
                "description": "Allows users to set the maximum number of retries allowed for a failed API call.\n"
            }
        },
        "requiredInputs": [
            "apiKey"
        ]
    },
    "resources": {
        "vultr:index/bareMetalServer:BareMetalServer": {
            "description": "Provides a Vultr bare metal server resource. This can be used to create, read, modify, and delete bare metal servers on your Vultr account.\n\n{{% examples %}}\n## Example Usage\n{{% example %}}\n\nCreate a new bare metal server:\n\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as vultr from \"@pulumi/vultr\";\n\nconst myServer = new vultr.BareMetalServer(\"my_server\", {\n    osId: 270,\n    plan: \"vbm-4c-32gb\",\n    region: \"ewr\",\n});\n```\n```python\nimport pulumi\nimport pulumi_vultr as vultr\n\nmy_server = vultr.BareMetalServer(\"myServer\",\n    os_id=270,\n    plan=\"vbm-4c-32gb\",\n    region=\"ewr\")\n```\n```csharp\nusing Pulumi;\nusing Vultr = Pulumi.Vultr;\n\nclass MyStack : Stack\n{\n    public MyStack()\n    {\n        var myServer = new Vultr.BareMetalServer(\"myServer\", new Vultr.BareMetalServerArgs\n        {\n            OsId = 270,\n            Plan = \"vbm-4c-32gb\",\n            Region = \"ewr\",\n        });\n    }\n\n}\n```\n```go\npackage main\n\nimport (\n\t\"github.com/pulumi/pulumi-vultr/sdk/go/vultr\"\n\t\"github.com/pulumi/pulumi/sdk/v3/go/pulumi\"\n)\n\nfunc main() {\n\tpulumi.Run(func(ctx *pulumi.Context) error {\n\t\t_, err := vultr.NewBareMetalServer(ctx, \"myServer\", \u0026vultr.BareMetalServerArgs{\n\t\t\tOsId:   pulumi.Int(270),\n\t\t\tPlan:   pulumi.String(\"vbm-4c-32gb\"),\n\t\t\tRegion: pulumi.String(\"ewr\"),\n\t\t})\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\treturn nil\n\t})\n}\n```\n\nCreate a new bare metal server with options:\n\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as vultr from \"@pulumi/vultr\";\n\nconst myServer = new vultr.BareMetalServer(\"my_server\", {\n    activationEmail: false,\n    enableIpv6: true,\n    hostname: \"my-server-hostname\",\n    label: \"my-server-label\",\n    osId: 270,\n    plan: \"vbm-4c-32gb\",\n    region: \"ewr\",\n    tag: \"my-server-tag\",\n    userData: \"this is my user data\",\n});\n```\n```python\nimport pulumi\nimport pulumi_vultr as vultr\n\nmy_server = vultr.BareMetalServer(\"myServer\",\n    activation_email=False,\n    enable_ipv6=True,\n    hostname=\"my-server-hostname\",\n    label=\"my-server-label\",\n    os_id=270,\n    plan=\"vbm-4c-32gb\",\n    region=\"ewr\",\n    tag=\"my-server-tag\",\n    user_data=\"this is my user data\")\n```\n```csharp\nusing Pulumi;\nusing Vultr = Pulumi.Vultr;\n\nclass MyStack : Stack\n{\n    public MyStack()\n    {\n        var myServer = new Vultr.BareMetalServer(\"myServer\", new Vultr.BareMetalServerArgs\n        {\n            ActivationEmail = false,\n            EnableIpv6 = true,\n            Hostname = \"my-server-hostname\",\n            Label = \"my-server-label\",\n            OsId = 270,\n            Plan = \"vbm-4c-32gb\",\n            Region = \"ewr\",\n            Tag = \"my-server-tag\",\n            UserData = \"this is my user data\",\n        });\n    }\n\n}\n```\n```go\npackage main\n\nimport (\n\t\"github.com/pulumi/pulumi-vultr/sdk/go/vultr\"\n\t\"github.com/pulumi/pulumi/sdk/v3/go/pulumi\"\n)\n\nfunc main() {\n\tpulumi.Run(func(ctx *pulumi.Context) error {\n\t\t_, err := vultr.NewBareMetalServer(ctx, \"myServer\", \u0026vultr.BareMetalServerArgs{\n\t\t\tActivationEmail: pulumi.Bool(false),\n\t\t\tEnableIpv6:      pulumi.Bool(true),\n\t\t\tHostname:        pulumi.String(\"my-server-hostname\"),\n\t\t\tLabel:           pulumi.String(\"my-server-label\"),\n\t\t\tOsId:            pulumi.Int(270),\n\t\t\tPlan:            pulumi.String(\"vbm-4c-32gb\"),\n\t\t\tRegion:          pulumi.String(\"ewr\"),\n\t\t\tTag:             pulumi.String(\"my-server-tag\"),\n\t\t\tUserData:        pulumi.String(\"this is my user data\"),\n\t\t})\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\treturn nil\n\t})\n}\n```\n{{% /example %}}\n{{% /examples %}}\n\n## Import\n\nBare Metal Servers can be imported using the server `ID`, e.g.\n\n```sh\n $ pulumi import vultr:index/bareMetalServer:BareMetalServer my_server b6a859c5-b299-49dd-8888-b1abbc517d08\n```\n\n ",
            "properties": {
                "activationEmail": {
                    "type": "boolean",
                    "description": "Whether an activation email will be sent when the server is ready.\n"
                },
                "appId": {
                    "type": "integer",
                    "description": "The ID of the Vultr application to be installed on the server. [See List Applications](https://www.vultr.com/api/#operation/list-applications)\n"
                },
                "cpuCount": {
                    "type": "integer",
                    "description": "The number of CPUs available on the server.\n"
                },
                "dateCreated": {
                    "type": "string",
                    "description": "The date the server was added to your Vultr account.\n"
                },
                "defaultPassword": {
                    "type": "string",
                    "description": "The server's default password.\n"
                },
                "disk": {
                    "type": "string",
                    "description": "The description of the disk(s) on the server.\n"
                },
                "enableIpv6": {
                    "type": "boolean",
                    "description": "Whether the server has IPv6 networking activated.\n"
                },
                "gatewayV4": {
                    "type": "string",
                    "description": "The server's IPv4 gateway.\n"
                },
                "hostname": {
                    "type": "string",
                    "description": "The hostname to assign to the server.\n"
                },
                "imageId": {
                    "type": "string",
                    "description": "The ID of the Vultr marketplace application to be installed on the server. [See List Applications](https://www.vultr.com/api/#operation/list-applications) Note marketplace applications are denoted by type: `marketplace` and you must use the `image_id` not the id.\n"
                },
                "label": {
                    "type": "string",
                    "description": "A label for the server.\n"
                },
                "macAddress": {
                    "type": "integer",
                    "description": "The MAC address associated with the server.\n"
                },
                "mainIp": {
                    "type": "string",
                    "description": "The server's main IP address.\n"
                },
                "netmaskV4": {
                    "type": "string",
                    "description": "The server's IPv4 netmask.\n"
                },
                "os": {
                    "type": "string",
                    "description": "The string description of the operating system installed on the server.\n"
                },
                "osId": {
                    "type": "integer",
                    "description": "The ID of the operating system to be installed on the server. [See List OS](https://www.vultr.com/api/#operation/list-os)\n"
                },
                "plan": {
                    "type": "string",
                    "description": "The ID of the plan that you want the server to subscribe to. [See List Plans](https://www.vultr.com/api/#tag/plans)\n"
                },
                "ram": {
                    "type": "string",
                    "description": "The amount of memory available on the server in MB.\n"
                },
                "region": {
                    "type": "string",
                    "description": "The ID of the region that the server is to be created in. [See List Regions](https://www.vultr.com/api/#operation/list-regions)\n"
                },
                "reservedIpv4": {
                    "type": "string",
                    "description": "IP address of the floating IP to use as the main IP of this server.\n"
                },
                "scriptId": {
                    "type": "string",
                    "description": "The ID of the startup script you want added to the server.\n"
                },
                "snapshotId": {
                    "type": "string",
                    "description": "The ID of the Vultr snapshot that the server will restore for the initial installation. [See List Snapshots](https://www.vultr.com/api/#operation/list-snapshots)\n"
                },
                "sshKeyIds": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "A list of SSH key IDs to apply to the server on install (only valid for Linux/FreeBSD).\n"
                },
                "status": {
                    "type": "string",
                    "description": "The status of the server's subscription.\n"
                },
                "tag": {
                    "type": "string",
                    "description": "The tag to assign to the server.\n"
                },
                "userData": {
                    "type": "string",
                    "description": "Generic data store, which some provisioning tools and cloud operating systems use as a configuration file. It is generally consumed only once after an instance has been launched, but individual needs may vary.\n"
                },
                "v6MainIp": {
                    "type": "string",
                    "description": "The main IPv6 network address.\n"
                },
                "v6Network": {
                    "type": "string",
                    "description": "The IPv6 subnet.\n"
                },
                "v6NetworkSize": {
                    "type": "integer",
                    "description": "The IPv6 network size in bits.\n"
                }
            },
            "required": [
                "appId",
                "cpuCount",
                "dateCreated",
                "defaultPassword",
                "disk",
                "gatewayV4",
                "imageId",
                "macAddress",
                "mainIp",
                "netmaskV4",
                "os",
                "osId",
                "plan",
                "ram",
                "region",
                "reservedIpv4",
                "status",
                "userData",
                "v6MainIp",
                "v6Network",
                "v6NetworkSize"
            ],
            "inputProperties": {
                "activationEmail": {
                    "type": "boolean",
                    "description": "Whether an activation email will be sent when the server is ready.\n"
                },
                "appId": {
                    "type": "integer",
                    "description": "The ID of the Vultr application to be installed on the server. [See List Applications](https://www.vultr.com/api/#operation/list-applications)\n"
                },
                "enableIpv6": {
                    "type": "boolean",
                    "description": "Whether the server has IPv6 networking activated.\n"
                },
                "hostname": {
                    "type": "string",
                    "description": "The hostname to assign to the server.\n"
                },
                "imageId": {
                    "type": "string",
                    "description": "The ID of the Vultr marketplace application to be installed on the server. [See List Applications](https://www.vultr.com/api/#operation/list-applications) Note marketplace applications are denoted by type: `marketplace` and you must use the `image_id` not the id.\n"
                },
                "label": {
                    "type": "string",
                    "description": "A label for the server.\n"
                },
                "osId": {
                    "type": "integer",
                    "description": "The ID of the operating system to be installed on the server. [See List OS](https://www.vultr.com/api/#operation/list-os)\n"
                },
                "plan": {
                    "type": "string",
                    "description": "The ID of the plan that you want the server to subscribe to. [See List Plans](https://www.vultr.com/api/#tag/plans)\n"
                },
                "region": {
                    "type": "string",
                    "description": "The ID of the region that the server is to be created in. [See List Regions](https://www.vultr.com/api/#operation/list-regions)\n"
                },
                "reservedIpv4": {
                    "type": "string",
                    "description": "IP address of the floating IP to use as the main IP of this server.\n"
                },
                "scriptId": {
                    "type": "string",
                    "description": "The ID of the startup script you want added to the server.\n"
                },
                "snapshotId": {
                    "type": "string",
                    "description": "The ID of the Vultr snapshot that the server will restore for the initial installation. [See List Snapshots](https://www.vultr.com/api/#operation/list-snapshots)\n"
                },
                "sshKeyIds": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "A list of SSH key IDs to apply to the server on install (only valid for Linux/FreeBSD).\n"
                },
                "tag": {
                    "type": "string",
                    "description": "The tag to assign to the server.\n"
                },
                "userData": {
                    "type": "string",
                    "description": "Generic data store, which some provisioning tools and cloud operating systems use as a configuration file. It is generally consumed only once after an instance has been launched, but individual needs may vary.\n"
                }
            },
            "requiredInputs": [
                "plan",
                "region"
            ],
            "stateInputs": {
                "description": "Input properties used for looking up and filtering BareMetalServer resources.\n",
                "properties": {
                    "activationEmail": {
                        "type": "boolean",
                        "description": "Whether an activation email will be sent when the server is ready.\n"
                    },
                    "appId": {
                        "type": "integer",
                        "description": "The ID of the Vultr application to be installed on the server. [See List Applications](https://www.vultr.com/api/#operation/list-applications)\n"
                    },
                    "cpuCount": {
                        "type": "integer",
                        "description": "The number of CPUs available on the server.\n"
                    },
                    "dateCreated": {
                        "type": "string",
                        "description": "The date the server was added to your Vultr account.\n"
                    },
                    "defaultPassword": {
                        "type": "string",
                        "description": "The server's default password.\n"
                    },
                    "disk": {
                        "type": "string",
                        "description": "The description of the disk(s) on the server.\n"
                    },
                    "enableIpv6": {
                        "type": "boolean",
                        "description": "Whether the server has IPv6 networking activated.\n"
                    },
                    "gatewayV4": {
                        "type": "string",
                        "description": "The server's IPv4 gateway.\n"
                    },
                    "hostname": {
                        "type": "string",
                        "description": "The hostname to assign to the server.\n"
                    },
                    "imageId": {
                        "type": "string",
                        "description": "The ID of the Vultr marketplace application to be installed on the server. [See List Applications](https://www.vultr.com/api/#operation/list-applications) Note marketplace applications are denoted by type: `marketplace` and you must use the `image_id` not the id.\n"
                    },
                    "label": {
                        "type": "string",
                        "description": "A label for the server.\n"
                    },
                    "macAddress": {
                        "type": "integer",
                        "description": "The MAC address associated with the server.\n"
                    },
                    "mainIp": {
                        "type": "string",
                        "description": "The server's main IP address.\n"
                    },
                    "netmaskV4": {
                        "type": "string",
                        "description": "The server's IPv4 netmask.\n"
                    },
                    "os": {
                        "type": "string",
                        "description": "The string description of the operating system installed on the server.\n"
                    },
                    "osId": {
                        "type": "integer",
                        "description": "The ID of the operating system to be installed on the server. [See List OS](https://www.vultr.com/api/#operation/list-os)\n"
                    },
                    "plan": {
                        "type": "string",
                        "description": "The ID of the plan that you want the server to subscribe to. [See List Plans](https://www.vultr.com/api/#tag/plans)\n"
                    },
                    "ram": {
                        "type": "string",
                        "description": "The amount of memory available on the server in MB.\n"
                    },
                    "region": {
                        "type": "string",
                        "description": "The ID of the region that the server is to be created in. [See List Regions](https://www.vultr.com/api/#operation/list-regions)\n"
                    },
                    "reservedIpv4": {
                        "type": "string",
                        "description": "IP address of the floating IP to use as the main IP of this server.\n"
                    },
                    "scriptId": {
                        "type": "string",
                        "description": "The ID of the startup script you want added to the server.\n"
                    },
                    "snapshotId": {
                        "type": "string",
                        "description": "The ID of the Vultr snapshot that the server will restore for the initial installation. [See List Snapshots](https://www.vultr.com/api/#operation/list-snapshots)\n"
                    },
                    "sshKeyIds": {
                        "type": "array",
                        "items": {
                            "type": "string"
                        },
                        "description": "A list of SSH key IDs to apply to the server on install (only valid for Linux/FreeBSD).\n"
                    },
                    "status": {
                        "type": "string",
                        "description": "The status of the server's subscription.\n"
                    },
                    "tag": {
                        "type": "string",
                        "description": "The tag to assign to the server.\n"
                    },
                    "userData": {
                        "type": "string",
                        "description": "Generic data store, which some provisioning tools and cloud operating systems use as a configuration file. It is generally consumed only once after an instance has been launched, but individual needs may vary.\n"
                    },
                    "v6MainIp": {
                        "type": "string",
                        "description": "The main IPv6 network address.\n"
                    },
                    "v6Network": {
                        "type": "string",
                        "description": "The IPv6 subnet.\n"
                    },
                    "v6NetworkSize": {
                        "type": "integer",
                        "description": "The IPv6 network size in bits.\n"
                    }
                },
                "type": "object"
            }
        },
        "vultr:index/blockStorage:BlockStorage": {
            "description": "Provides a Vultr Block Storage resource. This can be used to create, read, modify, and delete Block Storage.\n\n{{% examples %}}\n## Example Usage\n{{% example %}}\n\nCreate a new Block Storage\n\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as vultr from \"@pulumi/vultr\";\n\nconst myBlockstorage = new vultr.BlockStorage(\"my_blockstorage\", {\n    region: \"ewr\",\n    sizeGb: 10,\n});\n```\n```python\nimport pulumi\nimport pulumi_vultr as vultr\n\nmy_blockstorage = vultr.BlockStorage(\"myBlockstorage\",\n    region=\"ewr\",\n    size_gb=10)\n```\n```csharp\nusing Pulumi;\nusing Vultr = Pulumi.Vultr;\n\nclass MyStack : Stack\n{\n    public MyStack()\n    {\n        var myBlockstorage = new Vultr.BlockStorage(\"myBlockstorage\", new Vultr.BlockStorageArgs\n        {\n            Region = \"ewr\",\n            SizeGb = 10,\n        });\n    }\n\n}\n```\n```go\npackage main\n\nimport (\n\t\"github.com/pulumi/pulumi-vultr/sdk/go/vultr\"\n\t\"github.com/pulumi/pulumi/sdk/v3/go/pulumi\"\n)\n\nfunc main() {\n\tpulumi.Run(func(ctx *pulumi.Context) error {\n\t\t_, err := vultr.NewBlockStorage(ctx, \"myBlockstorage\", \u0026vultr.BlockStorageArgs{\n\t\t\tRegion: pulumi.String(\"ewr\"),\n\t\t\tSizeGb: pulumi.Int(10),\n\t\t})\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\treturn nil\n\t})\n}\n```\n{{% /example %}}\n{{% /examples %}}\n\n## Import\n\nBlock Storage can be imported using the Block Storage `ID`, e.g.\n\n```sh\n $ pulumi import vultr:index/blockStorage:BlockStorage my_blockstorage e315835e-d466-4e89-9b4c-dfd8788d7685\n```\n\n ",
            "properties": {
                "attachedToInstance": {
                    "type": "string",
                    "description": "VPS ID that you want to have this block storage attached to.\n"
                },
                "cost": {
                    "type": "number",
                    "description": "The monthly cost of this block storage.\n"
                },
                "dateCreated": {
                    "type": "string",
                    "description": "The date this block storage was created.\n"
                },
                "label": {
                    "type": "string",
                    "description": "Label that is given to your block storage.\n"
                },
                "live": {
                    "type": "boolean",
                    "description": "Boolean value that will allow attachment of the volume to an instance without a restart. Default is false.\n"
                },
                "mountId": {
                    "type": "string",
                    "description": "An ID associated with the instance, when mounted the ID can be found in /dev/disk/by-id prefixed with virtio.\n"
                },
                "region": {
                    "type": "string",
                    "description": "Region in which this block storage will reside in. (Currently only NJ/NY supported region \"ewr\")\n"
                },
                "sizeGb": {
                    "type": "integer",
                    "description": "The size of the given block storage.\n"
                },
                "status": {
                    "type": "string",
                    "description": "Current status of your block storage.\n"
                }
            },
            "required": [
                "cost",
                "dateCreated",
                "mountId",
                "region",
                "sizeGb",
                "status"
            ],
            "inputProperties": {
                "attachedToInstance": {
                    "type": "string",
                    "description": "VPS ID that you want to have this block storage attached to.\n"
                },
                "label": {
                    "type": "string",
                    "description": "Label that is given to your block storage.\n"
                },
                "live": {
                    "type": "boolean",
                    "description": "Boolean value that will allow attachment of the volume to an instance without a restart. Default is false.\n"
                },
                "region": {
                    "type": "string",
                    "description": "Region in which this block storage will reside in. (Currently only NJ/NY supported region \"ewr\")\n"
                },
                "sizeGb": {
                    "type": "integer",
                    "description": "The size of the given block storage.\n"
                }
            },
            "requiredInputs": [
                "region",
                "sizeGb"
            ],
            "stateInputs": {
                "description": "Input properties used for looking up and filtering BlockStorage resources.\n",
                "properties": {
                    "attachedToInstance": {
                        "type": "string",
                        "description": "VPS ID that you want to have this block storage attached to.\n"
                    },
                    "cost": {
                        "type": "number",
                        "description": "The monthly cost of this block storage.\n"
                    },
                    "dateCreated": {
                        "type": "string",
                        "description": "The date this block storage was created.\n"
                    },
                    "label": {
                        "type": "string",
                        "description": "Label that is given to your block storage.\n"
                    },
                    "live": {
                        "type": "boolean",
                        "description": "Boolean value that will allow attachment of the volume to an instance without a restart. Default is false.\n"
                    },
                    "mountId": {
                        "type": "string",
                        "description": "An ID associated with the instance, when mounted the ID can be found in /dev/disk/by-id prefixed with virtio.\n"
                    },
                    "region": {
                        "type": "string",
                        "description": "Region in which this block storage will reside in. (Currently only NJ/NY supported region \"ewr\")\n"
                    },
                    "sizeGb": {
                        "type": "integer",
                        "description": "The size of the given block storage.\n"
                    },
                    "status": {
                        "type": "string",
                        "description": "Current status of your block storage.\n"
                    }
                },
                "type": "object"
            }
        },
        "vultr:index/dnsDomain:DnsDomain": {
            "description": "Provides a Vultr DNS Domain resource. This can be used to create, read, modify, and delete DNS Domains.\n\n{{% examples %}}\n## Example Usage\n{{% example %}}\n\nCreate a new DNS Domain\n\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as vultr from \"@pulumi/vultr\";\n\nconst myDomain = new vultr.DnsDomain(\"my_domain\", {\n    domain: \"domain.com\",\n    ip: \"66.42.94.227\",\n});\n```\n```python\nimport pulumi\nimport pulumi_vultr as vultr\n\nmy_domain = vultr.DnsDomain(\"myDomain\",\n    domain=\"domain.com\",\n    ip=\"66.42.94.227\")\n```\n```csharp\nusing Pulumi;\nusing Vultr = Pulumi.Vultr;\n\nclass MyStack : Stack\n{\n    public MyStack()\n    {\n        var myDomain = new Vultr.DnsDomain(\"myDomain\", new Vultr.DnsDomainArgs\n        {\n            Domain = \"domain.com\",\n            Ip = \"66.42.94.227\",\n        });\n    }\n\n}\n```\n```go\npackage main\n\nimport (\n\t\"github.com/pulumi/pulumi-vultr/sdk/go/vultr\"\n\t\"github.com/pulumi/pulumi/sdk/v3/go/pulumi\"\n)\n\nfunc main() {\n\tpulumi.Run(func(ctx *pulumi.Context) error {\n\t\t_, err := vultr.NewDnsDomain(ctx, \"myDomain\", \u0026vultr.DnsDomainArgs{\n\t\t\tDomain: pulumi.String(\"domain.com\"),\n\t\t\tIp:     pulumi.String(\"66.42.94.227\"),\n\t\t})\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\treturn nil\n\t})\n}\n```\n{{% /example %}}\n{{% /examples %}}\n\n## Import\n\nDNS Domains can be imported using the Dns Domain `domain`, e.g.\n\n```sh\n $ pulumi import vultr:index/dnsDomain:DnsDomain name domain.com\n```\n\n ",
            "properties": {
                "dateCreated": {
                    "type": "string",
                    "description": "The date the domain was added to your account.\n"
                },
                "dnsSec": {
                    "type": "string",
                    "description": "The Domain's DNSSEC status. Valid options are `enabled` or `disabled`. Note `disabled` is default\n"
                },
                "domain": {
                    "type": "string",
                    "description": "Name of domain.\n"
                },
                "ip": {
                    "type": "string",
                    "description": "Instance IP you want associated to domain. If omitted this will create a domain with no records.\n"
                }
            },
            "required": [
                "dateCreated",
                "domain"
            ],
            "inputProperties": {
                "dnsSec": {
                    "type": "string",
                    "description": "The Domain's DNSSEC status. Valid options are `enabled` or `disabled`. Note `disabled` is default\n"
                },
                "domain": {
                    "type": "string",
                    "description": "Name of domain.\n"
                },
                "ip": {
                    "type": "string",
                    "description": "Instance IP you want associated to domain. If omitted this will create a domain with no records.\n"
                }
            },
            "requiredInputs": [
                "domain"
            ],
            "stateInputs": {
                "description": "Input properties used for looking up and filtering DnsDomain resources.\n",
                "properties": {
                    "dateCreated": {
                        "type": "string",
                        "description": "The date the domain was added to your account.\n"
                    },
                    "dnsSec": {
                        "type": "string",
                        "description": "The Domain's DNSSEC status. Valid options are `enabled` or `disabled`. Note `disabled` is default\n"
                    },
                    "domain": {
                        "type": "string",
                        "description": "Name of domain.\n"
                    },
                    "ip": {
                        "type": "string",
                        "description": "Instance IP you want associated to domain. If omitted this will create a domain with no records.\n"
                    }
                },
                "type": "object"
            }
        },
        "vultr:index/dnsRecord:DnsRecord": {
            "description": "Provides a Vultr DNS Record resource. This can be used to create, read, modify, and delete DNS Records.\n\n{{% examples %}}\n## Example Usage\n{{% example %}}\n\nCreate a new DNS Record\n\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as vultr from \"@pulumi/vultr\";\n\nconst myDomain = new vultr.DnsDomain(\"my_domain\", {\n    domain: \"domain.com\",\n    ip: \"66.42.94.227\",\n});\nconst myRecord = new vultr.DnsRecord(\"my_record\", {\n    data: \"66.42.94.227\",\n    domain: myDomain.id,\n    type: \"A\",\n});\n```\n```python\nimport pulumi\nimport pulumi_vultr as vultr\n\nmy_domain = vultr.DnsDomain(\"myDomain\",\n    domain=\"domain.com\",\n    ip=\"66.42.94.227\")\nmy_record = vultr.DnsRecord(\"myRecord\",\n    data=\"66.42.94.227\",\n    domain=my_domain.id,\n    type=\"A\")\n```\n```csharp\nusing Pulumi;\nusing Vultr = Pulumi.Vultr;\n\nclass MyStack : Stack\n{\n    public MyStack()\n    {\n        var myDomain = new Vultr.DnsDomain(\"myDomain\", new Vultr.DnsDomainArgs\n        {\n            Domain = \"domain.com\",\n            Ip = \"66.42.94.227\",\n        });\n        var myRecord = new Vultr.DnsRecord(\"myRecord\", new Vultr.DnsRecordArgs\n        {\n            Data = \"66.42.94.227\",\n            Domain = myDomain.Id,\n            Type = \"A\",\n        });\n    }\n\n}\n```\n```go\npackage main\n\nimport (\n\t\"github.com/pulumi/pulumi-vultr/sdk/go/vultr\"\n\t\"github.com/pulumi/pulumi/sdk/v3/go/pulumi\"\n)\n\nfunc main() {\n\tpulumi.Run(func(ctx *pulumi.Context) error {\n\t\tmyDomain, err := vultr.NewDnsDomain(ctx, \"myDomain\", \u0026vultr.DnsDomainArgs{\n\t\t\tDomain: pulumi.String(\"domain.com\"),\n\t\t\tIp:     pulumi.String(\"66.42.94.227\"),\n\t\t})\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\t_, err = vultr.NewDnsRecord(ctx, \"myRecord\", \u0026vultr.DnsRecordArgs{\n\t\t\tData:   pulumi.String(\"66.42.94.227\"),\n\t\t\tDomain: myDomain.ID(),\n\t\t\tType:   pulumi.String(\"A\"),\n\t\t})\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\treturn nil\n\t})\n}\n```\n{{% /example %}}\n{{% /examples %}}\n\n## Import\n\nDNS Records can be imported using the Dns Domain `domain` and DNS Record `ID` e.g.\n\n```sh\n $ pulumi import vultr:index/dnsRecord:DnsRecord rec domain.com,1a0019bd-7645-4310-81bd-03bc5906940f\n```\n\n ",
            "properties": {
                "data": {
                    "type": "string",
                    "description": "IP Address of the instance the domain is associated with.\n"
                },
                "domain": {
                    "type": "string",
                    "description": "Name of the DNS Domain this record will belong to.\n"
                },
                "name": {
                    "type": "string",
                    "description": "Name (subdomain) for this record.\n"
                },
                "priority": {
                    "type": "integer",
                    "description": "Priority of this record (only required for MX and SRV).\n"
                },
                "ttl": {
                    "type": "integer",
                    "description": "The time to live of this record.\n"
                },
                "type": {
                    "type": "string",
                    "description": "Type of record.\n"
                }
            },
            "required": [
                "data",
                "domain",
                "name",
                "type"
            ],
            "inputProperties": {
                "data": {
                    "type": "string",
                    "description": "IP Address of the instance the domain is associated with.\n"
                },
                "domain": {
                    "type": "string",
                    "description": "Name of the DNS Domain this record will belong to.\n"
                },
                "name": {
                    "type": "string",
                    "description": "Name (subdomain) for this record.\n"
                },
                "priority": {
                    "type": "integer",
                    "description": "Priority of this record (only required for MX and SRV).\n"
                },
                "ttl": {
                    "type": "integer",
                    "description": "The time to live of this record.\n"
                },
                "type": {
                    "type": "string",
                    "description": "Type of record.\n"
                }
            },
            "requiredInputs": [
                "data",
                "domain",
                "type"
            ],
            "stateInputs": {
                "description": "Input properties used for looking up and filtering DnsRecord resources.\n",
                "properties": {
                    "data": {
                        "type": "string",
                        "description": "IP Address of the instance the domain is associated with.\n"
                    },
                    "domain": {
                        "type": "string",
                        "description": "Name of the DNS Domain this record will belong to.\n"
                    },
                    "name": {
                        "type": "string",
                        "description": "Name (subdomain) for this record.\n"
                    },
                    "priority": {
                        "type": "integer",
                        "description": "Priority of this record (only required for MX and SRV).\n"
                    },
                    "ttl": {
                        "type": "integer",
                        "description": "The time to live of this record.\n"
                    },
                    "type": {
                        "type": "string",
                        "description": "Type of record.\n"
                    }
                },
                "type": "object"
            }
        },
        "vultr:index/firewallGroup:FirewallGroup": {
            "description": "Provides a Vultr Firewall Group resource. This can be used to create, read, modify, and delete Firewall Group.\n\n{{% examples %}}\n## Example Usage\n{{% example %}}\n\nCreate a new Firewall group\n\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as vultr from \"@pulumi/vultr\";\n\nconst myFirewallgroup = new vultr.FirewallGroup(\"my_firewallgroup\", {\n    description: \"base firewall\",\n});\n```\n```python\nimport pulumi\nimport pulumi_vultr as vultr\n\nmy_firewallgroup = vultr.FirewallGroup(\"myFirewallgroup\", description=\"base firewall\")\n```\n```csharp\nusing Pulumi;\nusing Vultr = Pulumi.Vultr;\n\nclass MyStack : Stack\n{\n    public MyStack()\n    {\n        var myFirewallgroup = new Vultr.FirewallGroup(\"myFirewallgroup\", new Vultr.FirewallGroupArgs\n        {\n            Description = \"base firewall\",\n        });\n    }\n\n}\n```\n```go\npackage main\n\nimport (\n\t\"github.com/pulumi/pulumi-vultr/sdk/go/vultr\"\n\t\"github.com/pulumi/pulumi/sdk/v3/go/pulumi\"\n)\n\nfunc main() {\n\tpulumi.Run(func(ctx *pulumi.Context) error {\n\t\t_, err := vultr.NewFirewallGroup(ctx, \"myFirewallgroup\", \u0026vultr.FirewallGroupArgs{\n\t\t\tDescription: pulumi.String(\"base firewall\"),\n\t\t})\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\treturn nil\n\t})\n}\n```\n{{% /example %}}\n{{% /examples %}}\n\n## Import\n\nFirewall Groups can be imported using the Firewall Group `FIREWALLGROUPID`, e.g.\n\n```sh\n $ pulumi import vultr:index/firewallGroup:FirewallGroup my_firewallgroup c342f929\n```\n\n ",
            "properties": {
                "dateCreated": {
                    "type": "string",
                    "description": "The date the firewall group was created.\n"
                },
                "dateModified": {
                    "type": "string",
                    "description": "The date the firewall group was modified.\n"
                },
                "description": {
                    "type": "string",
                    "description": "Description of the firewall group.\n"
                },
                "instanceCount": {
                    "type": "integer",
                    "description": "The number of instances that are currently using this firewall group.\n"
                },
                "maxRuleCount": {
                    "type": "integer",
                    "description": "The number of max firewall rules this group can have.\n"
                },
                "ruleCount": {
                    "type": "integer",
                    "description": "The number of firewall rules this group currently has.\n"
                }
            },
            "required": [
                "dateCreated",
                "dateModified",
                "instanceCount",
                "maxRuleCount",
                "ruleCount"
            ],
            "inputProperties": {
                "description": {
                    "type": "string",
                    "description": "Description of the firewall group.\n"
                }
            },
            "stateInputs": {
                "description": "Input properties used for looking up and filtering FirewallGroup resources.\n",
                "properties": {
                    "dateCreated": {
                        "type": "string",
                        "description": "The date the firewall group was created.\n"
                    },
                    "dateModified": {
                        "type": "string",
                        "description": "The date the firewall group was modified.\n"
                    },
                    "description": {
                        "type": "string",
                        "description": "Description of the firewall group.\n"
                    },
                    "instanceCount": {
                        "type": "integer",
                        "description": "The number of instances that are currently using this firewall group.\n"
                    },
                    "maxRuleCount": {
                        "type": "integer",
                        "description": "The number of max firewall rules this group can have.\n"
                    },
                    "ruleCount": {
                        "type": "integer",
                        "description": "The number of firewall rules this group currently has.\n"
                    }
                },
                "type": "object"
            }
        },
        "vultr:index/firewallRule:FirewallRule": {
            "description": "Provides a Vultr Firewall Rule resource. This can be used to create, read, modify, and delete Firewall rules.\n\n{{% examples %}}\n## Example Usage\n{{% example %}}\n\nCreate a Firewall Rule\n\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as vultr from \"@pulumi/vultr\";\n\nconst myFirewallgroup = new vultr.FirewallGroup(\"myFirewallgroup\", {description: \"base firewall\"});\nconst myFirewallrule = new vultr.FirewallRule(\"myFirewallrule\", {\n    firewallGroupId: myFirewallgroup.id,\n    protocol: \"tcp\",\n    ipType: \"v4\",\n    subnet: \"0.0.0.0\",\n    subnetSize: 0,\n    port: \"8090\",\n    notes: \"my firewall rule\",\n});\n```\n```python\nimport pulumi\nimport pulumi_vultr as vultr\n\nmy_firewallgroup = vultr.FirewallGroup(\"myFirewallgroup\", description=\"base firewall\")\nmy_firewallrule = vultr.FirewallRule(\"myFirewallrule\",\n    firewall_group_id=my_firewallgroup.id,\n    protocol=\"tcp\",\n    ip_type=\"v4\",\n    subnet=\"0.0.0.0\",\n    subnet_size=0,\n    port=\"8090\",\n    notes=\"my firewall rule\")\n```\n```csharp\nusing Pulumi;\nusing Vultr = Pulumi.Vultr;\n\nclass MyStack : Stack\n{\n    public MyStack()\n    {\n        var myFirewallgroup = new Vultr.FirewallGroup(\"myFirewallgroup\", new Vultr.FirewallGroupArgs\n        {\n            Description = \"base firewall\",\n        });\n        var myFirewallrule = new Vultr.FirewallRule(\"myFirewallrule\", new Vultr.FirewallRuleArgs\n        {\n            FirewallGroupId = myFirewallgroup.Id,\n            Protocol = \"tcp\",\n            IpType = \"v4\",\n            Subnet = \"0.0.0.0\",\n            SubnetSize = 0,\n            Port = \"8090\",\n            Notes = \"my firewall rule\",\n        });\n    }\n\n}\n```\n```go\npackage main\n\nimport (\n\t\"github.com/pulumi/pulumi-vultr/sdk/go/vultr\"\n\t\"github.com/pulumi/pulumi/sdk/v3/go/pulumi\"\n)\n\nfunc main() {\n\tpulumi.Run(func(ctx *pulumi.Context) error {\n\t\tmyFirewallgroup, err := vultr.NewFirewallGroup(ctx, \"myFirewallgroup\", \u0026vultr.FirewallGroupArgs{\n\t\t\tDescription: pulumi.String(\"base firewall\"),\n\t\t})\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\t_, err = vultr.NewFirewallRule(ctx, \"myFirewallrule\", \u0026vultr.FirewallRuleArgs{\n\t\t\tFirewallGroupId: myFirewallgroup.ID(),\n\t\t\tProtocol:        pulumi.String(\"tcp\"),\n\t\t\tIpType:          pulumi.String(\"v4\"),\n\t\t\tSubnet:          pulumi.String(\"0.0.0.0\"),\n\t\t\tSubnetSize:      pulumi.Int(0),\n\t\t\tPort:            pulumi.String(\"8090\"),\n\t\t\tNotes:           pulumi.String(\"my firewall rule\"),\n\t\t})\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\treturn nil\n\t})\n}\n```\n{{% /example %}}\n{{% /examples %}}\n\n## Import\n\nFirewall Rules can be imported using the Firewall Group `ID` and Firewall Rule `ID`, e.g.\n\n```sh\n $ pulumi import vultr:index/firewallRule:FirewallRule my_rule b6a859c5-b299-49dd-8888-b1abbc517d08,1\n```\n\n ",
            "properties": {
                "firewallGroupId": {
                    "type": "string",
                    "description": "The firewall group that the firewall rule will belong to.\n"
                },
                "ipType": {
                    "type": "string",
                    "description": "The type of ip for this firewall rule. Possible values (v4, v6) **Note** they must be lowercase\n"
                },
                "notes": {
                    "type": "string",
                    "description": "A simple note for a given firewall rule\n"
                },
                "port": {
                    "type": "string",
                    "description": "TCP/UDP only. This field can be a specific port or a colon separated port range.\n"
                },
                "protocol": {
                    "type": "string",
                    "description": "The type of protocol for this firewall rule. Possible values (icmp, tcp, udp, gre, esp, ah) **Note** they must be lowercase\n"
                },
                "source": {
                    "type": "string",
                    "description": "Possible values (\"\", cloudflare)\n"
                },
                "subnet": {
                    "type": "string",
                    "description": "IP address that you want to define for this firewall rule.\n"
                },
                "subnetSize": {
                    "type": "integer",
                    "description": "The number of bits for the subnet in CIDR notation. Example: 32.\n"
                }
            },
            "required": [
                "firewallGroupId",
                "ipType",
                "protocol",
                "subnet",
                "subnetSize"
            ],
            "inputProperties": {
                "firewallGroupId": {
                    "type": "string",
                    "description": "The firewall group that the firewall rule will belong to.\n"
                },
                "ipType": {
                    "type": "string",
                    "description": "The type of ip for this firewall rule. Possible values (v4, v6) **Note** they must be lowercase\n"
                },
                "notes": {
                    "type": "string",
                    "description": "A simple note for a given firewall rule\n"
                },
                "port": {
                    "type": "string",
                    "description": "TCP/UDP only. This field can be a specific port or a colon separated port range.\n"
                },
                "protocol": {
                    "type": "string",
                    "description": "The type of protocol for this firewall rule. Possible values (icmp, tcp, udp, gre, esp, ah) **Note** they must be lowercase\n"
                },
                "source": {
                    "type": "string",
                    "description": "Possible values (\"\", cloudflare)\n"
                },
                "subnet": {
                    "type": "string",
                    "description": "IP address that you want to define for this firewall rule.\n"
                },
                "subnetSize": {
                    "type": "integer",
                    "description": "The number of bits for the subnet in CIDR notation. Example: 32.\n"
                }
            },
            "requiredInputs": [
                "firewallGroupId",
                "ipType",
                "protocol",
                "subnet",
                "subnetSize"
            ],
            "stateInputs": {
                "description": "Input properties used for looking up and filtering FirewallRule resources.\n",
                "properties": {
                    "firewallGroupId": {
                        "type": "string",
                        "description": "The firewall group that the firewall rule will belong to.\n"
                    },
                    "ipType": {
                        "type": "string",
                        "description": "The type of ip for this firewall rule. Possible values (v4, v6) **Note** they must be lowercase\n"
                    },
                    "notes": {
                        "type": "string",
                        "description": "A simple note for a given firewall rule\n"
                    },
                    "port": {
                        "type": "string",
                        "description": "TCP/UDP only. This field can be a specific port or a colon separated port range.\n"
                    },
                    "protocol": {
                        "type": "string",
                        "description": "The type of protocol for this firewall rule. Possible values (icmp, tcp, udp, gre, esp, ah) **Note** they must be lowercase\n"
                    },
                    "source": {
                        "type": "string",
                        "description": "Possible values (\"\", cloudflare)\n"
                    },
                    "subnet": {
                        "type": "string",
                        "description": "IP address that you want to define for this firewall rule.\n"
                    },
                    "subnetSize": {
                        "type": "integer",
                        "description": "The number of bits for the subnet in CIDR notation. Example: 32.\n"
                    }
                },
                "type": "object"
            }
        },
        "vultr:index/instance:Instance": {
            "description": "Provides a Vultr instance resource. This can be used to create, read, modify, and delete instances on your Vultr account.\n\n{{% examples %}}\n## Example Usage\n{{% example %}}\n\nCreate a new instance:\n\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as vultr from \"@pulumi/vultr\";\n\nconst myInstance = new vultr.Instance(\"my_instance\", {\n    osId: 167,\n    plan: \"vc2-1c-1gb\",\n    region: \"sea\",\n});\n```\n```python\nimport pulumi\nimport pulumi_vultr as vultr\n\nmy_instance = vultr.Instance(\"myInstance\",\n    os_id=167,\n    plan=\"vc2-1c-1gb\",\n    region=\"sea\")\n```\n```csharp\nusing Pulumi;\nusing Vultr = Pulumi.Vultr;\n\nclass MyStack : Stack\n{\n    public MyStack()\n    {\n        var myInstance = new Vultr.Instance(\"myInstance\", new Vultr.InstanceArgs\n        {\n            OsId = 167,\n            Plan = \"vc2-1c-1gb\",\n            Region = \"sea\",\n        });\n    }\n\n}\n```\n```go\npackage main\n\nimport (\n\t\"github.com/pulumi/pulumi-vultr/sdk/go/vultr\"\n\t\"github.com/pulumi/pulumi/sdk/v3/go/pulumi\"\n)\n\nfunc main() {\n\tpulumi.Run(func(ctx *pulumi.Context) error {\n\t\t_, err := vultr.NewInstance(ctx, \"myInstance\", \u0026vultr.InstanceArgs{\n\t\t\tOsId:   pulumi.Int(167),\n\t\t\tPlan:   pulumi.String(\"vc2-1c-1gb\"),\n\t\t\tRegion: pulumi.String(\"sea\"),\n\t\t})\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\treturn nil\n\t})\n}\n```\n\nCreate a new instance with options:\n\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as vultr from \"@pulumi/vultr\";\n\nconst myInstance = new vultr.Instance(\"my_instance\", {\n    activationEmail: false,\n    backups: \"enabled\",\n    ddosProtection: true,\n    enableIpv6: true,\n    hostname: \"my-instance-hostname\",\n    label: \"my-instance-label\",\n    osId: 167,\n    plan: \"vc2-1c-1gb\",\n    region: \"sea\",\n    tag: \"my-instance-tag\",\n});\n```\n```python\nimport pulumi\nimport pulumi_vultr as vultr\n\nmy_instance = vultr.Instance(\"myInstance\",\n    activation_email=False,\n    backups=\"enabled\",\n    ddos_protection=True,\n    enable_ipv6=True,\n    hostname=\"my-instance-hostname\",\n    label=\"my-instance-label\",\n    os_id=167,\n    plan=\"vc2-1c-1gb\",\n    region=\"sea\",\n    tag=\"my-instance-tag\")\n```\n```csharp\nusing Pulumi;\nusing Vultr = Pulumi.Vultr;\n\nclass MyStack : Stack\n{\n    public MyStack()\n    {\n        var myInstance = new Vultr.Instance(\"myInstance\", new Vultr.InstanceArgs\n        {\n            ActivationEmail = false,\n            Backups = \"enabled\",\n            DdosProtection = true,\n            EnableIpv6 = true,\n            Hostname = \"my-instance-hostname\",\n            Label = \"my-instance-label\",\n            OsId = 167,\n            Plan = \"vc2-1c-1gb\",\n            Region = \"sea\",\n            Tag = \"my-instance-tag\",\n        });\n    }\n\n}\n```\n```go\npackage main\n\nimport (\n\t\"github.com/pulumi/pulumi-vultr/sdk/go/vultr\"\n\t\"github.com/pulumi/pulumi/sdk/v3/go/pulumi\"\n)\n\nfunc main() {\n\tpulumi.Run(func(ctx *pulumi.Context) error {\n\t\t_, err := vultr.NewInstance(ctx, \"myInstance\", \u0026vultr.InstanceArgs{\n\t\t\tActivationEmail: pulumi.Bool(false),\n\t\t\tBackups:         pulumi.String(\"enabled\"),\n\t\t\tDdosProtection:  pulumi.Bool(true),\n\t\t\tEnableIpv6:      pulumi.Bool(true),\n\t\t\tHostname:        pulumi.String(\"my-instance-hostname\"),\n\t\t\tLabel:           pulumi.String(\"my-instance-label\"),\n\t\t\tOsId:            pulumi.Int(167),\n\t\t\tPlan:            pulumi.String(\"vc2-1c-1gb\"),\n\t\t\tRegion:          pulumi.String(\"sea\"),\n\t\t\tTag:             pulumi.String(\"my-instance-tag\"),\n\t\t})\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\treturn nil\n\t})\n}\n```\n{{% /example %}}\n{{% /examples %}}\n\n## Import\n\nServers can be imported using the server `ID`, e.g.\n\n```sh\n $ pulumi import vultr:index/instance:Instance my_server b6a859c5-b299-49dd-8888-b1abbc517d08\n```\n\n ",
            "properties": {
                "activationEmail": {
                    "type": "boolean",
                    "description": "Whether an activation email will be sent when the server is ready.\n"
                },
                "allowedBandwidth": {
                    "type": "integer",
                    "description": "The server's allowed bandwidth usage in GB.\n"
                },
                "appId": {
                    "type": "integer",
                    "description": "The ID of the Vultr application to be installed on the server. [See List Applications](https://www.vultr.com/api/#operation/list-applications)\n"
                },
                "backups": {
                    "type": "string",
                    "description": "Whether automatic backups will be enabled for this server (these have an extra charge associated with them). Values can be enabled or disabled.\n"
                },
                "backupsSchedule": {
                    "$ref": "#/types/vultr:index/InstanceBackupsSchedule:InstanceBackupsSchedule",
                    "description": "A block that defines the way backups should be scheduled. While this is an optional field if `backups` are `enabled` this field is mandatory. The configuration of a `backups_schedule` is listed below.\n"
                },
                "dateCreated": {
                    "type": "string",
                    "description": "The date the server was added to your Vultr account.\n"
                },
                "ddosProtection": {
                    "type": "boolean",
                    "description": "Whether DDOS protection will be enabled on the server (there is an additional charge for this).\n"
                },
                "defaultPassword": {
                    "type": "string",
                    "description": "The server's default password.\n"
                },
                "disk": {
                    "type": "integer",
                    "description": "The description of the disk(s) on the server.\n"
                },
                "enableIpv6": {
                    "type": "boolean",
                    "description": "Whether the server has IPv6 networking activated.\n"
                },
                "enablePrivateNetwork": {
                    "type": "boolean",
                    "description": "Whether the server has private networking support enabled.\n",
                    "deprecationMessage": "In the next release of this provider we will be removing `enable_private_network` due to issues that may cause drift and having to maintain private network ip state. Please switch to using private_network_ids to manage your private network fields."
                },
                "features": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "Array of which features are enabled.\n"
                },
                "firewallGroupId": {
                    "type": "string",
                    "description": "The ID of the firewall group to assign to the server.\n"
                },
                "gatewayV4": {
                    "type": "string",
                    "description": "The server's IPv4 gateway.\n"
                },
                "hostname": {
                    "type": "string",
                    "description": "The hostname to assign to the server.\n"
                },
                "imageId": {
                    "type": "string",
                    "description": "The ID of the Vultr marketplace application to be installed on the server. [See List Applications](https://www.vultr.com/api/#operation/list-applications) Note marketplace applications are denoted by type: `marketplace` and you must use the `image_id` not the id.\n"
                },
                "internalIp": {
                    "type": "string",
                    "description": "The server's internal IP address.\n"
                },
                "isoId": {
                    "type": "string",
                    "description": "The ID of the ISO file to be installed on the server. [See List ISO](https://www.vultr.com/api/#operation/list-isos)\n"
                },
                "kvm": {
                    "type": "string",
                    "description": "The server's current KVM URL. This URL will change periodically. It is not advised to cache this value.\n"
                },
                "label": {
                    "type": "string",
                    "description": "A label for the server.\n"
                },
                "mainIp": {
                    "type": "string",
                    "description": "The server's main IP address.\n"
                },
                "netmaskV4": {
                    "type": "string",
                    "description": "The server's IPv4 netmask.\n"
                },
                "os": {
                    "type": "string",
                    "description": "The string description of the operating system installed on the server.\n"
                },
                "osId": {
                    "type": "integer",
                    "description": "The ID of the operating system to be installed on the server. [See List OS](https://www.vultr.com/api/#operation/list-os)\n"
                },
                "plan": {
                    "type": "string",
                    "description": "The ID of the plan that you want the instance to subscribe to. [See List Plans](https://www.vultr.com/api/#tag/plans)\n"
                },
                "powerStatus": {
                    "type": "string",
                    "description": "Whether the server is powered on or not.\n"
                },
                "privateNetworkIds": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "A list of private network IDs to be attached to the server.\n"
                },
                "ram": {
                    "type": "integer",
                    "description": "The amount of memory available on the server in MB.\n"
                },
                "region": {
                    "type": "string",
                    "description": "The ID of the region that the instance is to be created in. [See List Regions](https://www.vultr.com/api/#operation/list-regions)\n"
                },
                "reservedIpId": {
                    "type": "string",
                    "description": "ID of the floating IP to use as the main IP of this server.\n"
                },
                "scriptId": {
                    "type": "string",
                    "description": "The ID of the startup script you want added to the server.\n"
                },
                "serverStatus": {
                    "type": "string",
                    "description": "A more detailed server status (none, locked, installingbooting, isomounting, ok).\n"
                },
                "snapshotId": {
                    "type": "string",
                    "description": "The ID of the Vultr snapshot that the server will restore for the initial installation. [See List Snapshots](https://www.vultr.com/api/#operation/list-snapshots)\n"
                },
                "sshKeyIds": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "A list of SSH key IDs to apply to the server on install (only valid for Linux/FreeBSD).\n"
                },
                "status": {
                    "type": "string",
                    "description": "The status of the server's subscription.\n"
                },
                "tag": {
                    "type": "string",
                    "description": "The tag to assign to the server.\n"
                },
                "userData": {
                    "type": "string",
                    "description": "Generic data store, which some provisioning tools and cloud operating systems use as a configuration file. It is generally consumed only once after an instance has been launched, but individual needs may vary.\n"
                },
                "v6MainIp": {
                    "type": "string",
                    "description": "The main IPv6 network address.\n"
                },
                "v6Network": {
                    "type": "string",
                    "description": "The IPv6 subnet.\n"
                },
                "v6NetworkSize": {
                    "type": "integer",
                    "description": "The IPv6 network size in bits.\n"
                },
                "vcpuCount": {
                    "type": "integer",
                    "description": "The number of virtual CPUs available on the server.\n"
                }
            },
            "required": [
                "allowedBandwidth",
                "appId",
                "dateCreated",
                "defaultPassword",
                "disk",
                "features",
                "firewallGroupId",
                "gatewayV4",
                "hostname",
                "imageId",
                "internalIp",
                "kvm",
                "label",
                "mainIp",
                "netmaskV4",
                "os",
                "osId",
                "plan",
                "powerStatus",
                "ram",
                "region",
                "reservedIpId",
                "scriptId",
                "serverStatus",
                "snapshotId",
                "status",
                "tag",
                "userData",
                "v6MainIp",
                "v6Network",
                "v6NetworkSize",
                "vcpuCount"
            ],
            "inputProperties": {
                "activationEmail": {
                    "type": "boolean",
                    "description": "Whether an activation email will be sent when the server is ready.\n"
                },
                "appId": {
                    "type": "integer",
                    "description": "The ID of the Vultr application to be installed on the server. [See List Applications](https://www.vultr.com/api/#operation/list-applications)\n"
                },
                "backups": {
                    "type": "string",
                    "description": "Whether automatic backups will be enabled for this server (these have an extra charge associated with them). Values can be enabled or disabled.\n"
                },
                "backupsSchedule": {
                    "$ref": "#/types/vultr:index/InstanceBackupsSchedule:InstanceBackupsSchedule",
                    "description": "A block that defines the way backups should be scheduled. While this is an optional field if `backups` are `enabled` this field is mandatory. The configuration of a `backups_schedule` is listed below.\n"
                },
                "ddosProtection": {
                    "type": "boolean",
                    "description": "Whether DDOS protection will be enabled on the server (there is an additional charge for this).\n"
                },
                "enableIpv6": {
                    "type": "boolean",
                    "description": "Whether the server has IPv6 networking activated.\n"
                },
                "enablePrivateNetwork": {
                    "type": "boolean",
                    "description": "Whether the server has private networking support enabled.\n",
                    "deprecationMessage": "In the next release of this provider we will be removing `enable_private_network` due to issues that may cause drift and having to maintain private network ip state. Please switch to using private_network_ids to manage your private network fields."
                },
                "firewallGroupId": {
                    "type": "string",
                    "description": "The ID of the firewall group to assign to the server.\n"
                },
                "hostname": {
                    "type": "string",
                    "description": "The hostname to assign to the server.\n"
                },
                "imageId": {
                    "type": "string",
                    "description": "The ID of the Vultr marketplace application to be installed on the server. [See List Applications](https://www.vultr.com/api/#operation/list-applications) Note marketplace applications are denoted by type: `marketplace` and you must use the `image_id` not the id.\n"
                },
                "isoId": {
                    "type": "string",
                    "description": "The ID of the ISO file to be installed on the server. [See List ISO](https://www.vultr.com/api/#operation/list-isos)\n"
                },
                "label": {
                    "type": "string",
                    "description": "A label for the server.\n"
                },
                "osId": {
                    "type": "integer",
                    "description": "The ID of the operating system to be installed on the server. [See List OS](https://www.vultr.com/api/#operation/list-os)\n"
                },
                "plan": {
                    "type": "string",
                    "description": "The ID of the plan that you want the instance to subscribe to. [See List Plans](https://www.vultr.com/api/#tag/plans)\n"
                },
                "privateNetworkIds": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "A list of private network IDs to be attached to the server.\n"
                },
                "region": {
                    "type": "string",
                    "description": "The ID of the region that the instance is to be created in. [See List Regions](https://www.vultr.com/api/#operation/list-regions)\n"
                },
                "reservedIpId": {
                    "type": "string",
                    "description": "ID of the floating IP to use as the main IP of this server.\n"
                },
                "scriptId": {
                    "type": "string",
                    "description": "The ID of the startup script you want added to the server.\n"
                },
                "snapshotId": {
                    "type": "string",
                    "description": "The ID of the Vultr snapshot that the server will restore for the initial installation. [See List Snapshots](https://www.vultr.com/api/#operation/list-snapshots)\n"
                },
                "sshKeyIds": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "A list of SSH key IDs to apply to the server on install (only valid for Linux/FreeBSD).\n"
                },
                "tag": {
                    "type": "string",
                    "description": "The tag to assign to the server.\n"
                },
                "userData": {
                    "type": "string",
                    "description": "Generic data store, which some provisioning tools and cloud operating systems use as a configuration file. It is generally consumed only once after an instance has been launched, but individual needs may vary.\n"
                }
            },
            "requiredInputs": [
                "plan",
                "region"
            ],
            "stateInputs": {
                "description": "Input properties used for looking up and filtering Instance resources.\n",
                "properties": {
                    "activationEmail": {
                        "type": "boolean",
                        "description": "Whether an activation email will be sent when the server is ready.\n"
                    },
                    "allowedBandwidth": {
                        "type": "integer",
                        "description": "The server's allowed bandwidth usage in GB.\n"
                    },
                    "appId": {
                        "type": "integer",
                        "description": "The ID of the Vultr application to be installed on the server. [See List Applications](https://www.vultr.com/api/#operation/list-applications)\n"
                    },
                    "backups": {
                        "type": "string",
                        "description": "Whether automatic backups will be enabled for this server (these have an extra charge associated with them). Values can be enabled or disabled.\n"
                    },
                    "backupsSchedule": {
                        "$ref": "#/types/vultr:index/InstanceBackupsSchedule:InstanceBackupsSchedule",
                        "description": "A block that defines the way backups should be scheduled. While this is an optional field if `backups` are `enabled` this field is mandatory. The configuration of a `backups_schedule` is listed below.\n"
                    },
                    "dateCreated": {
                        "type": "string",
                        "description": "The date the server was added to your Vultr account.\n"
                    },
                    "ddosProtection": {
                        "type": "boolean",
                        "description": "Whether DDOS protection will be enabled on the server (there is an additional charge for this).\n"
                    },
                    "defaultPassword": {
                        "type": "string",
                        "description": "The server's default password.\n"
                    },
                    "disk": {
                        "type": "integer",
                        "description": "The description of the disk(s) on the server.\n"
                    },
                    "enableIpv6": {
                        "type": "boolean",
                        "description": "Whether the server has IPv6 networking activated.\n"
                    },
                    "enablePrivateNetwork": {
                        "type": "boolean",
                        "description": "Whether the server has private networking support enabled.\n",
                        "deprecationMessage": "In the next release of this provider we will be removing `enable_private_network` due to issues that may cause drift and having to maintain private network ip state. Please switch to using private_network_ids to manage your private network fields."
                    },
                    "features": {
                        "type": "array",
                        "items": {
                            "type": "string"
                        },
                        "description": "Array of which features are enabled.\n"
                    },
                    "firewallGroupId": {
                        "type": "string",
                        "description": "The ID of the firewall group to assign to the server.\n"
                    },
                    "gatewayV4": {
                        "type": "string",
                        "description": "The server's IPv4 gateway.\n"
                    },
                    "hostname": {
                        "type": "string",
                        "description": "The hostname to assign to the server.\n"
                    },
                    "imageId": {
                        "type": "string",
                        "description": "The ID of the Vultr marketplace application to be installed on the server. [See List Applications](https://www.vultr.com/api/#operation/list-applications) Note marketplace applications are denoted by type: `marketplace` and you must use the `image_id` not the id.\n"
                    },
                    "internalIp": {
                        "type": "string",
                        "description": "The server's internal IP address.\n"
                    },
                    "isoId": {
                        "type": "string",
                        "description": "The ID of the ISO file to be installed on the server. [See List ISO](https://www.vultr.com/api/#operation/list-isos)\n"
                    },
                    "kvm": {
                        "type": "string",
                        "description": "The server's current KVM URL. This URL will change periodically. It is not advised to cache this value.\n"
                    },
                    "label": {
                        "type": "string",
                        "description": "A label for the server.\n"
                    },
                    "mainIp": {
                        "type": "string",
                        "description": "The server's main IP address.\n"
                    },
                    "netmaskV4": {
                        "type": "string",
                        "description": "The server's IPv4 netmask.\n"
                    },
                    "os": {
                        "type": "string",
                        "description": "The string description of the operating system installed on the server.\n"
                    },
                    "osId": {
                        "type": "integer",
                        "description": "The ID of the operating system to be installed on the server. [See List OS](https://www.vultr.com/api/#operation/list-os)\n"
                    },
                    "plan": {
                        "type": "string",
                        "description": "The ID of the plan that you want the instance to subscribe to. [See List Plans](https://www.vultr.com/api/#tag/plans)\n"
                    },
                    "powerStatus": {
                        "type": "string",
                        "description": "Whether the server is powered on or not.\n"
                    },
                    "privateNetworkIds": {
                        "type": "array",
                        "items": {
                            "type": "string"
                        },
                        "description": "A list of private network IDs to be attached to the server.\n"
                    },
                    "ram": {
                        "type": "integer",
                        "description": "The amount of memory available on the server in MB.\n"
                    },
                    "region": {
                        "type": "string",
                        "description": "The ID of the region that the instance is to be created in. [See List Regions](https://www.vultr.com/api/#operation/list-regions)\n"
                    },
                    "reservedIpId": {
                        "type": "string",
                        "description": "ID of the floating IP to use as the main IP of this server.\n"
                    },
                    "scriptId": {
                        "type": "string",
                        "description": "The ID of the startup script you want added to the server.\n"
                    },
                    "serverStatus": {
                        "type": "string",
                        "description": "A more detailed server status (none, locked, installingbooting, isomounting, ok).\n"
                    },
                    "snapshotId": {
                        "type": "string",
                        "description": "The ID of the Vultr snapshot that the server will restore for the initial installation. [See List Snapshots](https://www.vultr.com/api/#operation/list-snapshots)\n"
                    },
                    "sshKeyIds": {
                        "type": "array",
                        "items": {
                            "type": "string"
                        },
                        "description": "A list of SSH key IDs to apply to the server on install (only valid for Linux/FreeBSD).\n"
                    },
                    "status": {
                        "type": "string",
                        "description": "The status of the server's subscription.\n"
                    },
                    "tag": {
                        "type": "string",
                        "description": "The tag to assign to the server.\n"
                    },
                    "userData": {
                        "type": "string",
                        "description": "Generic data store, which some provisioning tools and cloud operating systems use as a configuration file. It is generally consumed only once after an instance has been launched, but individual needs may vary.\n"
                    },
                    "v6MainIp": {
                        "type": "string",
                        "description": "The main IPv6 network address.\n"
                    },
                    "v6Network": {
                        "type": "string",
                        "description": "The IPv6 subnet.\n"
                    },
                    "v6NetworkSize": {
                        "type": "integer",
                        "description": "The IPv6 network size in bits.\n"
                    },
                    "vcpuCount": {
                        "type": "integer",
                        "description": "The number of virtual CPUs available on the server.\n"
                    }
                },
                "type": "object"
            }
        },
        "vultr:index/instanceIPv4:InstanceIPv4": {
            "description": "Provides a Vultr instance IPv4 resource. This can be used to create, read, and\nmodify a IPv4 address. instance is rebooted by default.\n\n{{% examples %}}\n## Example Usage\n{{% example %}}\n\nCreate a new IPv4 address for a instance:\n\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as vultr from \"@pulumi/vultr\";\n\nconst myInstance = new vultr.Instance(\"my_instance\", {\n    enableIpv6: true,\n    osId: 167,\n    plan: \"vc2-1c-1gb\",\n    region: \"ewr\",\n});\nconst myInstanceIpv4 = new vultr.InstanceIPv4(\"my_instance_ipv4\", {\n    instanceId: myInstance.id,\n    reboot: false,\n});\n```\n```python\nimport pulumi\nimport pulumi_vultr as vultr\n\nmy_instance = vultr.Instance(\"myInstance\",\n    enable_ipv6=True,\n    os_id=167,\n    plan=\"vc2-1c-1gb\",\n    region=\"ewr\")\nmy_instance_ipv4 = vultr.InstanceIPv4(\"myInstanceIpv4\",\n    instance_id=my_instance.id,\n    reboot=False)\n```\n```csharp\nusing Pulumi;\nusing Vultr = Pulumi.Vultr;\n\nclass MyStack : Stack\n{\n    public MyStack()\n    {\n        var myInstance = new Vultr.Instance(\"myInstance\", new Vultr.InstanceArgs\n        {\n            EnableIpv6 = true,\n            OsId = 167,\n            Plan = \"vc2-1c-1gb\",\n            Region = \"ewr\",\n        });\n        var myInstanceIpv4 = new Vultr.InstanceIPv4(\"myInstanceIpv4\", new Vultr.InstanceIPv4Args\n        {\n            InstanceId = myInstance.Id,\n            Reboot = false,\n        });\n    }\n\n}\n```\n```go\npackage main\n\nimport (\n\t\"github.com/pulumi/pulumi-vultr/sdk/go/vultr\"\n\t\"github.com/pulumi/pulumi/sdk/v3/go/pulumi\"\n)\n\nfunc main() {\n\tpulumi.Run(func(ctx *pulumi.Context) error {\n\t\tmyInstance, err := vultr.NewInstance(ctx, \"myInstance\", \u0026vultr.InstanceArgs{\n\t\t\tEnableIpv6: pulumi.Bool(true),\n\t\t\tOsId:       pulumi.Int(167),\n\t\t\tPlan:       pulumi.String(\"vc2-1c-1gb\"),\n\t\t\tRegion:     pulumi.String(\"ewr\"),\n\t\t})\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\t_, err = vultr.NewInstanceIPv4(ctx, \"myInstanceIpv4\", \u0026vultr.InstanceIPv4Args{\n\t\t\tInstanceId: myInstance.ID(),\n\t\t\tReboot:     pulumi.Bool(false),\n\t\t})\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\treturn nil\n\t})\n}\n```\n{{% /example %}}\n{{% /examples %}}",
            "properties": {
                "gateway": {
                    "type": "string",
                    "description": "The gateway IP address.\n"
                },
                "instanceId": {
                    "type": "string",
                    "description": "The ID of the instance you want to set an IPv4\nreverse DNS record for.\n"
                },
                "ip": {
                    "type": "string",
                    "description": "The IPv4 address in canonical format.\n"
                },
                "netmask": {
                    "type": "string",
                    "description": "The IPv4 netmask in dot-decimal notation.\n"
                },
                "reboot": {
                    "type": "boolean",
                    "description": "Default true. Determines whether or not the server is rebooted after adding the IPv4 address.\n"
                },
                "reverse": {
                    "type": "string",
                    "description": "The reverse DNS information for this IP address.\n"
                }
            },
            "required": [
                "gateway",
                "instanceId",
                "ip",
                "netmask",
                "reverse"
            ],
            "inputProperties": {
                "instanceId": {
                    "type": "string",
                    "description": "The ID of the instance you want to set an IPv4\nreverse DNS record for.\n"
                },
                "reboot": {
                    "type": "boolean",
                    "description": "Default true. Determines whether or not the server is rebooted after adding the IPv4 address.\n"
                }
            },
            "requiredInputs": [
                "instanceId"
            ],
            "stateInputs": {
                "description": "Input properties used for looking up and filtering InstanceIPv4 resources.\n",
                "properties": {
                    "gateway": {
                        "type": "string",
                        "description": "The gateway IP address.\n"
                    },
                    "instanceId": {
                        "type": "string",
                        "description": "The ID of the instance you want to set an IPv4\nreverse DNS record for.\n"
                    },
                    "ip": {
                        "type": "string",
                        "description": "The IPv4 address in canonical format.\n"
                    },
                    "netmask": {
                        "type": "string",
                        "description": "The IPv4 netmask in dot-decimal notation.\n"
                    },
                    "reboot": {
                        "type": "boolean",
                        "description": "Default true. Determines whether or not the server is rebooted after adding the IPv4 address.\n"
                    },
                    "reverse": {
                        "type": "string",
                        "description": "The reverse DNS information for this IP address.\n"
                    }
                },
                "type": "object"
            }
        },
        "vultr:index/isoPrivate:IsoPrivate": {
            "properties": {
                "dateCreated": {
                    "type": "string"
                },
                "filename": {
                    "type": "string"
                },
                "md5sum": {
                    "type": "string"
                },
                "sha512sum": {
                    "type": "string"
                },
                "size": {
                    "type": "integer"
                },
                "status": {
                    "type": "string"
                },
                "url": {
                    "type": "string"
                }
            },
            "required": [
                "dateCreated",
                "filename",
                "md5sum",
                "sha512sum",
                "size",
                "status",
                "url"
            ],
            "inputProperties": {
                "url": {
                    "type": "string"
                }
            },
            "requiredInputs": [
                "url"
            ],
            "stateInputs": {
                "description": "Input properties used for looking up and filtering IsoPrivate resources.\n",
                "properties": {
                    "dateCreated": {
                        "type": "string"
                    },
                    "filename": {
                        "type": "string"
                    },
                    "md5sum": {
                        "type": "string"
                    },
                    "sha512sum": {
                        "type": "string"
                    },
                    "size": {
                        "type": "integer"
                    },
                    "status": {
                        "type": "string"
                    },
                    "url": {
                        "type": "string"
                    }
                },
                "type": "object"
            }
        },
        "vultr:index/loadBalancer:LoadBalancer": {
            "description": "Get information about a Vultr load balancer.\n\n{{% examples %}}\n## Example Usage\n{{% example %}}\n\nCreate a new load balancer:\n\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as vultr from \"@pulumi/vultr\";\n\nconst lb = new vultr.LoadBalancer(\"lb\", {\n    balancingAlgorithm: \"roundrobin\",\n    forwardingRules: [{\n        backendPort: 81,\n        backendProtocol: \"http\",\n        frontendPort: 82,\n        frontendProtocol: \"http\",\n    }],\n    healthCheck: {\n        checkInterval: 3,\n        healthyThreshold: 4,\n        path: \"/test\",\n        port: 8080,\n        protocol: \"http\",\n        responseTimeout: 1,\n        unhealthyThreshold: 2,\n    },\n    label: \"terraform lb example\",\n    region: \"ewr\",\n});\n```\n```python\nimport pulumi\nimport pulumi_vultr as vultr\n\nlb = vultr.LoadBalancer(\"lb\",\n    balancing_algorithm=\"roundrobin\",\n    forwarding_rules=[vultr.LoadBalancerForwardingRuleArgs(\n        backend_port=81,\n        backend_protocol=\"http\",\n        frontend_port=82,\n        frontend_protocol=\"http\",\n    )],\n    health_check=vultr.LoadBalancerHealthCheckArgs(\n        check_interval=3,\n        healthy_threshold=4,\n        path=\"/test\",\n        port=8080,\n        protocol=\"http\",\n        response_timeout=1,\n        unhealthy_threshold=2,\n    ),\n    label=\"terraform lb example\",\n    region=\"ewr\")\n```\n```csharp\nusing Pulumi;\nusing Vultr = Pulumi.Vultr;\n\nclass MyStack : Stack\n{\n    public MyStack()\n    {\n        var lb = new Vultr.LoadBalancer(\"lb\", new Vultr.LoadBalancerArgs\n        {\n            BalancingAlgorithm = \"roundrobin\",\n            ForwardingRules = \n            {\n                new Vultr.Inputs.LoadBalancerForwardingRuleArgs\n                {\n                    BackendPort = 81,\n                    BackendProtocol = \"http\",\n                    FrontendPort = 82,\n                    FrontendProtocol = \"http\",\n                },\n            },\n            HealthCheck = new Vultr.Inputs.LoadBalancerHealthCheckArgs\n            {\n                CheckInterval = 3,\n                HealthyThreshold = 4,\n                Path = \"/test\",\n                Port = 8080,\n                Protocol = \"http\",\n                ResponseTimeout = 1,\n                UnhealthyThreshold = 2,\n            },\n            Label = \"terraform lb example\",\n            Region = \"ewr\",\n        });\n    }\n\n}\n```\n```go\npackage main\n\nimport (\n\t\"github.com/pulumi/pulumi-vultr/sdk/go/vultr\"\n\t\"github.com/pulumi/pulumi/sdk/v3/go/pulumi\"\n)\n\nfunc main() {\n\tpulumi.Run(func(ctx *pulumi.Context) error {\n\t\t_, err := vultr.NewLoadBalancer(ctx, \"lb\", \u0026vultr.LoadBalancerArgs{\n\t\t\tBalancingAlgorithm: pulumi.String(\"roundrobin\"),\n\t\t\tForwardingRules: LoadBalancerForwardingRuleArray{\n\t\t\t\t\u0026LoadBalancerForwardingRuleArgs{\n\t\t\t\t\tBackendPort:      pulumi.Int(81),\n\t\t\t\t\tBackendProtocol:  pulumi.String(\"http\"),\n\t\t\t\t\tFrontendPort:     pulumi.Int(82),\n\t\t\t\t\tFrontendProtocol: pulumi.String(\"http\"),\n\t\t\t\t},\n\t\t\t},\n\t\t\tHealthCheck: \u0026LoadBalancerHealthCheckArgs{\n\t\t\t\tCheckInterval:      pulumi.Int(3),\n\t\t\t\tHealthyThreshold:   pulumi.Int(4),\n\t\t\t\tPath:               pulumi.String(\"/test\"),\n\t\t\t\tPort:               pulumi.Int(8080),\n\t\t\t\tProtocol:           pulumi.String(\"http\"),\n\t\t\t\tResponseTimeout:    pulumi.Int(1),\n\t\t\t\tUnhealthyThreshold: pulumi.Int(2),\n\t\t\t},\n\t\t\tLabel:  pulumi.String(\"terraform lb example\"),\n\t\t\tRegion: pulumi.String(\"ewr\"),\n\t\t})\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\treturn nil\n\t})\n}\n```\n{{% /example %}}\n{{% /examples %}}\n\n## Import\n\nLoad Balancers can be imported using the load balancer `ID`, e.g.\n\n```sh\n $ pulumi import vultr:index/loadBalancer:LoadBalancer lb b6a859c5-b299-49dd-8888-b1abbc517d08\n```\n\n ",
            "properties": {
                "attachedInstances": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "Array of instances that are currently attached to the load balancer.\n"
                },
                "balancingAlgorithm": {
                    "type": "string",
                    "description": "The balancing algorithm for your load balancer. Options are `roundrobin` or `leastconn`. Default value is `roundrobin`\n"
                },
                "cookieName": {
                    "type": "string",
                    "description": "Name for your given sticky session.\n"
                },
                "firewallRules": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/vultr:index/LoadBalancerFirewallRule:LoadBalancerFirewallRule"
                    },
                    "description": "Defines the firewall rules for a load balancer.\n"
                },
                "forwardingRules": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/vultr:index/LoadBalancerForwardingRule:LoadBalancerForwardingRule"
                    },
                    "description": "List of forwarding rules for a load balancer. The configuration of a `forwarding_rules` is listened below.\n"
                },
                "hasSsl": {
                    "type": "boolean",
                    "description": "Boolean value that indicates if SSL is enabled.\n"
                },
                "healthCheck": {
                    "$ref": "#/types/vultr:index/LoadBalancerHealthCheck:LoadBalancerHealthCheck",
                    "description": "A block that defines the way load balancers should check for health. The configuration of a `health_check` is listed below.\n"
                },
                "ipv4": {
                    "type": "string",
                    "description": "IPv4 address for your load balancer.\n"
                },
                "ipv6": {
                    "type": "string",
                    "description": "IPv6 address for your load balancer.\n"
                },
                "label": {
                    "type": "string",
                    "description": "The load balancer's label.\n"
                },
                "privateNetwork": {
                    "type": "string",
                    "description": "- A private network ID that the load balancer should be attached to.\n"
                },
                "proxyProtocol": {
                    "type": "boolean",
                    "description": "Boolean value that indicates if Proxy Protocol is enabled.\n"
                },
                "region": {
                    "type": "string",
                    "description": "The region your load balancer is deployed in.\n"
                },
                "ssl": {
                    "$ref": "#/types/vultr:index/LoadBalancerSsl:LoadBalancerSsl",
                    "description": "A block that supplies your ssl configuration to be used with HTTPS. The configuration of a `ssl` is listed below.\n"
                },
                "sslRedirect": {
                    "type": "boolean",
                    "description": "Boolean value that indicates if HTTP calls will be redirected to HTTPS.\n"
                },
                "status": {
                    "type": "string",
                    "description": "Current status for the load balancer\n"
                }
            },
            "required": [
                "balancingAlgorithm",
                "forwardingRules",
                "hasSsl",
                "healthCheck",
                "ipv4",
                "ipv6",
                "region",
                "status"
            ],
            "inputProperties": {
                "attachedInstances": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "Array of instances that are currently attached to the load balancer.\n"
                },
                "balancingAlgorithm": {
                    "type": "string",
                    "description": "The balancing algorithm for your load balancer. Options are `roundrobin` or `leastconn`. Default value is `roundrobin`\n"
                },
                "cookieName": {
                    "type": "string",
                    "description": "Name for your given sticky session.\n"
                },
                "firewallRules": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/vultr:index/LoadBalancerFirewallRule:LoadBalancerFirewallRule"
                    },
                    "description": "Defines the firewall rules for a load balancer.\n"
                },
                "forwardingRules": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/vultr:index/LoadBalancerForwardingRule:LoadBalancerForwardingRule"
                    },
                    "description": "List of forwarding rules for a load balancer. The configuration of a `forwarding_rules` is listened below.\n"
                },
                "healthCheck": {
                    "$ref": "#/types/vultr:index/LoadBalancerHealthCheck:LoadBalancerHealthCheck",
                    "description": "A block that defines the way load balancers should check for health. The configuration of a `health_check` is listed below.\n"
                },
                "label": {
                    "type": "string",
                    "description": "The load balancer's label.\n"
                },
                "privateNetwork": {
                    "type": "string",
                    "description": "- A private network ID that the load balancer should be attached to.\n"
                },
                "proxyProtocol": {
                    "type": "boolean",
                    "description": "Boolean value that indicates if Proxy Protocol is enabled.\n"
                },
                "region": {
                    "type": "string",
                    "description": "The region your load balancer is deployed in.\n"
                },
                "ssl": {
                    "$ref": "#/types/vultr:index/LoadBalancerSsl:LoadBalancerSsl",
                    "description": "A block that supplies your ssl configuration to be used with HTTPS. The configuration of a `ssl` is listed below.\n"
                },
                "sslRedirect": {
                    "type": "boolean",
                    "description": "Boolean value that indicates if HTTP calls will be redirected to HTTPS.\n"
                }
            },
            "requiredInputs": [
                "forwardingRules",
                "region"
            ],
            "stateInputs": {
                "description": "Input properties used for looking up and filtering LoadBalancer resources.\n",
                "properties": {
                    "attachedInstances": {
                        "type": "array",
                        "items": {
                            "type": "string"
                        },
                        "description": "Array of instances that are currently attached to the load balancer.\n"
                    },
                    "balancingAlgorithm": {
                        "type": "string",
                        "description": "The balancing algorithm for your load balancer. Options are `roundrobin` or `leastconn`. Default value is `roundrobin`\n"
                    },
                    "cookieName": {
                        "type": "string",
                        "description": "Name for your given sticky session.\n"
                    },
                    "firewallRules": {
                        "type": "array",
                        "items": {
                            "$ref": "#/types/vultr:index/LoadBalancerFirewallRule:LoadBalancerFirewallRule"
                        },
                        "description": "Defines the firewall rules for a load balancer.\n"
                    },
                    "forwardingRules": {
                        "type": "array",
                        "items": {
                            "$ref": "#/types/vultr:index/LoadBalancerForwardingRule:LoadBalancerForwardingRule"
                        },
                        "description": "List of forwarding rules for a load balancer. The configuration of a `forwarding_rules` is listened below.\n"
                    },
                    "hasSsl": {
                        "type": "boolean",
                        "description": "Boolean value that indicates if SSL is enabled.\n"
                    },
                    "healthCheck": {
                        "$ref": "#/types/vultr:index/LoadBalancerHealthCheck:LoadBalancerHealthCheck",
                        "description": "A block that defines the way load balancers should check for health. The configuration of a `health_check` is listed below.\n"
                    },
                    "ipv4": {
                        "type": "string",
                        "description": "IPv4 address for your load balancer.\n"
                    },
                    "ipv6": {
                        "type": "string",
                        "description": "IPv6 address for your load balancer.\n"
                    },
                    "label": {
                        "type": "string",
                        "description": "The load balancer's label.\n"
                    },
                    "privateNetwork": {
                        "type": "string",
                        "description": "- A private network ID that the load balancer should be attached to.\n"
                    },
                    "proxyProtocol": {
                        "type": "boolean",
                        "description": "Boolean value that indicates if Proxy Protocol is enabled.\n"
                    },
                    "region": {
                        "type": "string",
                        "description": "The region your load balancer is deployed in.\n"
                    },
                    "ssl": {
                        "$ref": "#/types/vultr:index/LoadBalancerSsl:LoadBalancerSsl",
                        "description": "A block that supplies your ssl configuration to be used with HTTPS. The configuration of a `ssl` is listed below.\n"
                    },
                    "sslRedirect": {
                        "type": "boolean",
                        "description": "Boolean value that indicates if HTTP calls will be redirected to HTTPS.\n"
                    },
                    "status": {
                        "type": "string",
                        "description": "Current status for the load balancer\n"
                    }
                },
                "type": "object"
            }
        },
        "vultr:index/objectStorage:ObjectStorage": {
            "description": "Provides a Vultr private object storage resource. This can be used to create, read, update and delete object storage resources on your Vultr account.\n\n{{% examples %}}\n## Example Usage\n{{% example %}}\n\nCreate a new object storage subscription.\n\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as vultr from \"@pulumi/vultr\";\n\nconst tf = new vultr.ObjectStorage(\"tf\", {\n    clusterId: 2,\n    label: \"tf-label\",\n});\n```\n```python\nimport pulumi\nimport pulumi_vultr as vultr\n\ntf = vultr.ObjectStorage(\"tf\",\n    cluster_id=2,\n    label=\"tf-label\")\n```\n```csharp\nusing Pulumi;\nusing Vultr = Pulumi.Vultr;\n\nclass MyStack : Stack\n{\n    public MyStack()\n    {\n        var tf = new Vultr.ObjectStorage(\"tf\", new Vultr.ObjectStorageArgs\n        {\n            ClusterId = 2,\n            Label = \"tf-label\",\n        });\n    }\n\n}\n```\n```go\npackage main\n\nimport (\n\t\"github.com/pulumi/pulumi-vultr/sdk/go/vultr\"\n\t\"github.com/pulumi/pulumi/sdk/v3/go/pulumi\"\n)\n\nfunc main() {\n\tpulumi.Run(func(ctx *pulumi.Context) error {\n\t\t_, err := vultr.NewObjectStorage(ctx, \"tf\", \u0026vultr.ObjectStorageArgs{\n\t\t\tClusterId: pulumi.Int(2),\n\t\t\tLabel:     pulumi.String(\"tf-label\"),\n\t\t})\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\treturn nil\n\t})\n}\n```\n{{% /example %}}\n{{% /examples %}}\n\n## Import\n\nObject Storage can be imported using the object storage `ID`, e.g.\n\n```sh\n $ pulumi import vultr:index/objectStorage:ObjectStorage my_s3 0e04f918-575e-41cb-86f6-d729b354a5a1\n```\n\n ",
            "properties": {
                "clusterId": {
                    "type": "integer",
                    "description": "The region ID that you want the network to be created in.\n"
                },
                "dateCreated": {
                    "type": "string",
                    "description": "Date of creation for the object storage subscription.\n"
                },
                "label": {
                    "type": "string",
                    "description": "The description you want to give your network.\n"
                },
                "location": {
                    "type": "string",
                    "description": "The location which this subscription resides in.\n"
                },
                "region": {
                    "type": "string",
                    "description": "The region ID of the object storage subscription.\n"
                },
                "s3AccessKey": {
                    "type": "string",
                    "description": "Your access key.\n"
                },
                "s3Hostname": {
                    "type": "string",
                    "description": "The hostname for this subscription.\n"
                },
                "s3SecretKey": {
                    "type": "string",
                    "description": "Your secret key.\n"
                },
                "status": {
                    "type": "string",
                    "description": "Current status of this object storage subscription.\n"
                }
            },
            "required": [
                "clusterId",
                "dateCreated",
                "location",
                "region",
                "s3AccessKey",
                "s3Hostname",
                "s3SecretKey",
                "status"
            ],
            "inputProperties": {
                "clusterId": {
                    "type": "integer",
                    "description": "The region ID that you want the network to be created in.\n"
                },
                "label": {
                    "type": "string",
                    "description": "The description you want to give your network.\n"
                }
            },
            "requiredInputs": [
                "clusterId"
            ],
            "stateInputs": {
                "description": "Input properties used for looking up and filtering ObjectStorage resources.\n",
                "properties": {
                    "clusterId": {
                        "type": "integer",
                        "description": "The region ID that you want the network to be created in.\n"
                    },
                    "dateCreated": {
                        "type": "string",
                        "description": "Date of creation for the object storage subscription.\n"
                    },
                    "label": {
                        "type": "string",
                        "description": "The description you want to give your network.\n"
                    },
                    "location": {
                        "type": "string",
                        "description": "The location which this subscription resides in.\n"
                    },
                    "region": {
                        "type": "string",
                        "description": "The region ID of the object storage subscription.\n"
                    },
                    "s3AccessKey": {
                        "type": "string",
                        "description": "Your access key.\n"
                    },
                    "s3Hostname": {
                        "type": "string",
                        "description": "The hostname for this subscription.\n"
                    },
                    "s3SecretKey": {
                        "type": "string",
                        "description": "Your secret key.\n"
                    },
                    "status": {
                        "type": "string",
                        "description": "Current status of this object storage subscription.\n"
                    }
                },
                "type": "object"
            }
        },
        "vultr:index/privateNetwork:PrivateNetwork": {
            "description": "Provides a Vultr private network resource. This can be used to create, read, and delete private networks on your Vultr account.\n\n{{% examples %}}\n## Example Usage\n{{% example %}}\n\nCreate a new private network with an automatically generated CIDR block:\n\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as vultr from \"@pulumi/vultr\";\n\nconst myNetwork = new vultr.PrivateNetwork(\"my_network\", {\n    description: \"my private network\",\n    region: \"ewr\",\n});\n```\n```python\nimport pulumi\nimport pulumi_vultr as vultr\n\nmy_network = vultr.PrivateNetwork(\"myNetwork\",\n    description=\"my private network\",\n    region=\"ewr\")\n```\n```csharp\nusing Pulumi;\nusing Vultr = Pulumi.Vultr;\n\nclass MyStack : Stack\n{\n    public MyStack()\n    {\n        var myNetwork = new Vultr.PrivateNetwork(\"myNetwork\", new Vultr.PrivateNetworkArgs\n        {\n            Description = \"my private network\",\n            Region = \"ewr\",\n        });\n    }\n\n}\n```\n```go\npackage main\n\nimport (\n\t\"github.com/pulumi/pulumi-vultr/sdk/go/vultr\"\n\t\"github.com/pulumi/pulumi/sdk/v3/go/pulumi\"\n)\n\nfunc main() {\n\tpulumi.Run(func(ctx *pulumi.Context) error {\n\t\t_, err := vultr.NewPrivateNetwork(ctx, \"myNetwork\", \u0026vultr.PrivateNetworkArgs{\n\t\t\tDescription: pulumi.String(\"my private network\"),\n\t\t\tRegion:      pulumi.String(\"ewr\"),\n\t\t})\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\treturn nil\n\t})\n}\n```\n\nCreate a new private network with a specified CIDR block:\n\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as vultr from \"@pulumi/vultr\";\n\nconst myNetwork = new vultr.PrivateNetwork(\"my_network\", {\n    description: \"my private network\",\n    region: \"ewr\",\n    v4Subnet: \"10.0.0.0\",\n    v4SubnetMask: 24,\n});\n```\n```python\nimport pulumi\nimport pulumi_vultr as vultr\n\nmy_network = vultr.PrivateNetwork(\"myNetwork\",\n    description=\"my private network\",\n    region=\"ewr\",\n    v4_subnet=\"10.0.0.0\",\n    v4_subnet_mask=24)\n```\n```csharp\nusing Pulumi;\nusing Vultr = Pulumi.Vultr;\n\nclass MyStack : Stack\n{\n    public MyStack()\n    {\n        var myNetwork = new Vultr.PrivateNetwork(\"myNetwork\", new Vultr.PrivateNetworkArgs\n        {\n            Description = \"my private network\",\n            Region = \"ewr\",\n            V4Subnet = \"10.0.0.0\",\n            V4SubnetMask = 24,\n        });\n    }\n\n}\n```\n```go\npackage main\n\nimport (\n\t\"github.com/pulumi/pulumi-vultr/sdk/go/vultr\"\n\t\"github.com/pulumi/pulumi/sdk/v3/go/pulumi\"\n)\n\nfunc main() {\n\tpulumi.Run(func(ctx *pulumi.Context) error {\n\t\t_, err := vultr.NewPrivateNetwork(ctx, \"myNetwork\", \u0026vultr.PrivateNetworkArgs{\n\t\t\tDescription:  pulumi.String(\"my private network\"),\n\t\t\tRegion:       pulumi.String(\"ewr\"),\n\t\t\tV4Subnet:     pulumi.String(\"10.0.0.0\"),\n\t\t\tV4SubnetMask: pulumi.Int(24),\n\t\t})\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\treturn nil\n\t})\n}\n```\n{{% /example %}}\n{{% /examples %}}\n\n## Import\n\nNetworks can be imported using the network `ID`, e.g.\n\n```sh\n $ pulumi import vultr:index/privateNetwork:PrivateNetwork my_network 0e04f918-575e-41cb-86f6-d729b354a5a1\n```\n\n ",
            "properties": {
                "dateCreated": {
                    "type": "string",
                    "description": "The date that the network was added to your Vultr account.\n"
                },
                "description": {
                    "type": "string",
                    "description": "The description you want to give your network.\n"
                },
                "region": {
                    "type": "string",
                    "description": "The region ID that you want the network to be created in.\n"
                },
                "v4Subnet": {
                    "type": "string",
                    "description": "The IPv4 subnet to be used when attaching instances to this network.\n"
                },
                "v4SubnetMask": {
                    "type": "integer",
                    "description": "The number of bits for the netmask in CIDR notation. Example: 32\n"
                }
            },
            "required": [
                "dateCreated",
                "region",
                "v4Subnet",
                "v4SubnetMask"
            ],
            "inputProperties": {
                "description": {
                    "type": "string",
                    "description": "The description you want to give your network.\n"
                },
                "region": {
                    "type": "string",
                    "description": "The region ID that you want the network to be created in.\n"
                },
                "v4Subnet": {
                    "type": "string",
                    "description": "The IPv4 subnet to be used when attaching instances to this network.\n"
                },
                "v4SubnetMask": {
                    "type": "integer",
                    "description": "The number of bits for the netmask in CIDR notation. Example: 32\n"
                }
            },
            "requiredInputs": [
                "region"
            ],
            "stateInputs": {
                "description": "Input properties used for looking up and filtering PrivateNetwork resources.\n",
                "properties": {
                    "dateCreated": {
                        "type": "string",
                        "description": "The date that the network was added to your Vultr account.\n"
                    },
                    "description": {
                        "type": "string",
                        "description": "The description you want to give your network.\n"
                    },
                    "region": {
                        "type": "string",
                        "description": "The region ID that you want the network to be created in.\n"
                    },
                    "v4Subnet": {
                        "type": "string",
                        "description": "The IPv4 subnet to be used when attaching instances to this network.\n"
                    },
                    "v4SubnetMask": {
                        "type": "integer",
                        "description": "The number of bits for the netmask in CIDR notation. Example: 32\n"
                    }
                },
                "type": "object"
            }
        },
        "vultr:index/reservedIP:ReservedIP": {
            "description": "Provides a Vultr reserved IP resource. This can be used to create, read, modify, and delete reserved IP addresses on your Vultr account.\n\n{{% examples %}}\n## Example Usage\n{{% example %}}\n\nCreate a new reserved IP:\n\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as vultr from \"@pulumi/vultr\";\n\nconst myReservedIp = new vultr.ReservedIP(\"my_reserved_ip\", {\n    ipType: \"v4\",\n    label: \"my-reserved-ip\",\n    region: \"sea\",\n});\n```\n```python\nimport pulumi\nimport pulumi_vultr as vultr\n\nmy_reserved_ip = vultr.ReservedIP(\"myReservedIp\",\n    ip_type=\"v4\",\n    label=\"my-reserved-ip\",\n    region=\"sea\")\n```\n```csharp\nusing Pulumi;\nusing Vultr = Pulumi.Vultr;\n\nclass MyStack : Stack\n{\n    public MyStack()\n    {\n        var myReservedIp = new Vultr.ReservedIP(\"myReservedIp\", new Vultr.ReservedIPArgs\n        {\n            IpType = \"v4\",\n            Label = \"my-reserved-ip\",\n            Region = \"sea\",\n        });\n    }\n\n}\n```\n```go\npackage main\n\nimport (\n\t\"github.com/pulumi/pulumi-vultr/sdk/go/vultr\"\n\t\"github.com/pulumi/pulumi/sdk/v3/go/pulumi\"\n)\n\nfunc main() {\n\tpulumi.Run(func(ctx *pulumi.Context) error {\n\t\t_, err := vultr.NewReservedIP(ctx, \"myReservedIp\", \u0026vultr.ReservedIPArgs{\n\t\t\tIpType: pulumi.String(\"v4\"),\n\t\t\tLabel:  pulumi.String(\"my-reserved-ip\"),\n\t\t\tRegion: pulumi.String(\"sea\"),\n\t\t})\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\treturn nil\n\t})\n}\n```\n\nAttach a reserved IP to a instance:\n\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as vultr from \"@pulumi/vultr\";\n\nconst myReservedIp = new vultr.ReservedIP(\"my_reserved_ip\", {\n    instanceId: \"b9cc6fad-70b1-40ee-ab6a-4d622858962f\",\n    ipType: \"v4\",\n    label: \"my-reserved-ip\",\n    region: \"sea\",\n});\n```\n```python\nimport pulumi\nimport pulumi_vultr as vultr\n\nmy_reserved_ip = vultr.ReservedIP(\"myReservedIp\",\n    instance_id=\"b9cc6fad-70b1-40ee-ab6a-4d622858962f\",\n    ip_type=\"v4\",\n    label=\"my-reserved-ip\",\n    region=\"sea\")\n```\n```csharp\nusing Pulumi;\nusing Vultr = Pulumi.Vultr;\n\nclass MyStack : Stack\n{\n    public MyStack()\n    {\n        var myReservedIp = new Vultr.ReservedIP(\"myReservedIp\", new Vultr.ReservedIPArgs\n        {\n            InstanceId = \"b9cc6fad-70b1-40ee-ab6a-4d622858962f\",\n            IpType = \"v4\",\n            Label = \"my-reserved-ip\",\n            Region = \"sea\",\n        });\n    }\n\n}\n```\n```go\npackage main\n\nimport (\n\t\"github.com/pulumi/pulumi-vultr/sdk/go/vultr\"\n\t\"github.com/pulumi/pulumi/sdk/v3/go/pulumi\"\n)\n\nfunc main() {\n\tpulumi.Run(func(ctx *pulumi.Context) error {\n\t\t_, err := vultr.NewReservedIP(ctx, \"myReservedIp\", \u0026vultr.ReservedIPArgs{\n\t\t\tInstanceId: pulumi.String(\"b9cc6fad-70b1-40ee-ab6a-4d622858962f\"),\n\t\t\tIpType:     pulumi.String(\"v4\"),\n\t\t\tLabel:      pulumi.String(\"my-reserved-ip\"),\n\t\t\tRegion:     pulumi.String(\"sea\"),\n\t\t})\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\treturn nil\n\t})\n}\n```\n{{% /example %}}\n{{% /examples %}}\n\n## Import\n\nReserved IPs can be imported using the reserved IP `ID`, e.g.\n\n```sh\n $ pulumi import vultr:index/reservedIP:ReservedIP my_reserved_ip b9cc6fad-70b1-40ee-ab6a-4d622858962f\n```\n\n ",
            "properties": {
                "instanceId": {
                    "type": "string",
                    "description": "The VPS ID you want this reserved IP to be attached to.\n"
                },
                "ipType": {
                    "type": "string",
                    "description": "The type of reserved IP that you want. Either \"v4\" or \"v6\".\n"
                },
                "label": {
                    "type": "string",
                    "description": "The label you want to give your reserved IP.\n"
                },
                "region": {
                    "type": "string",
                    "description": "The region ID that you want the reserved IP to be created in.\n"
                },
                "subnet": {
                    "type": "string",
                    "description": "The reserved IP's subnet.\n"
                },
                "subnetSize": {
                    "type": "integer",
                    "description": "The reserved IP's subnet size.\n"
                }
            },
            "required": [
                "instanceId",
                "ipType",
                "region",
                "subnet",
                "subnetSize"
            ],
            "inputProperties": {
                "instanceId": {
                    "type": "string",
                    "description": "The VPS ID you want this reserved IP to be attached to.\n"
                },
                "ipType": {
                    "type": "string",
                    "description": "The type of reserved IP that you want. Either \"v4\" or \"v6\".\n"
                },
                "label": {
                    "type": "string",
                    "description": "The label you want to give your reserved IP.\n"
                },
                "region": {
                    "type": "string",
                    "description": "The region ID that you want the reserved IP to be created in.\n"
                }
            },
            "requiredInputs": [
                "ipType",
                "region"
            ],
            "stateInputs": {
                "description": "Input properties used for looking up and filtering ReservedIP resources.\n",
                "properties": {
                    "instanceId": {
                        "type": "string",
                        "description": "The VPS ID you want this reserved IP to be attached to.\n"
                    },
                    "ipType": {
                        "type": "string",
                        "description": "The type of reserved IP that you want. Either \"v4\" or \"v6\".\n"
                    },
                    "label": {
                        "type": "string",
                        "description": "The label you want to give your reserved IP.\n"
                    },
                    "region": {
                        "type": "string",
                        "description": "The region ID that you want the reserved IP to be created in.\n"
                    },
                    "subnet": {
                        "type": "string",
                        "description": "The reserved IP's subnet.\n"
                    },
                    "subnetSize": {
                        "type": "integer",
                        "description": "The reserved IP's subnet size.\n"
                    }
                },
                "type": "object"
            }
        },
        "vultr:index/reverseIpv4:ReverseIpv4": {
            "description": "Provides a Vultr Reverse IPv4 resource. This can be used to create, read, and\nmodify reverse DNS records for IPv4 addresses. Upon success, DNS\nchanges may take 6-12 hours to become active.\n\n{{% examples %}}\n## Example Usage\n{{% example %}}\n\nCreate a new reverse DNS record for an IPv4 address:\n\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as vultr from \"@pulumi/vultr\";\n\nconst myInstance = new vultr.Instance(\"my_instance\", {\n    enableIpv6: true,\n    osId: 167,\n    plan: \"vc2-1c-1gb\",\n    region: \"ewr\",\n});\nconst myReverseIpv4 = new vultr.ReverseIpv4(\"my_reverse_ipv4\", {\n    instanceId: myInstance.id,\n    ip: myInstance.mainIp,\n    reverse: \"host.example.com\",\n});\n```\n```python\nimport pulumi\nimport pulumi_vultr as vultr\n\nmy_instance = vultr.Instance(\"myInstance\",\n    enable_ipv6=True,\n    os_id=167,\n    plan=\"vc2-1c-1gb\",\n    region=\"ewr\")\nmy_reverse_ipv4 = vultr.ReverseIpv4(\"myReverseIpv4\",\n    instance_id=my_instance.id,\n    ip=my_instance.main_ip,\n    reverse=\"host.example.com\")\n```\n```csharp\nusing Pulumi;\nusing Vultr = Pulumi.Vultr;\n\nclass MyStack : Stack\n{\n    public MyStack()\n    {\n        var myInstance = new Vultr.Instance(\"myInstance\", new Vultr.InstanceArgs\n        {\n            EnableIpv6 = true,\n            OsId = 167,\n            Plan = \"vc2-1c-1gb\",\n            Region = \"ewr\",\n        });\n        var myReverseIpv4 = new Vultr.ReverseIpv4(\"myReverseIpv4\", new Vultr.ReverseIpv4Args\n        {\n            InstanceId = myInstance.Id,\n            Ip = myInstance.MainIp,\n            Reverse = \"host.example.com\",\n        });\n    }\n\n}\n```\n```go\npackage main\n\nimport (\n\t\"github.com/pulumi/pulumi-vultr/sdk/go/vultr\"\n\t\"github.com/pulumi/pulumi/sdk/v3/go/pulumi\"\n)\n\nfunc main() {\n\tpulumi.Run(func(ctx *pulumi.Context) error {\n\t\tmyInstance, err := vultr.NewInstance(ctx, \"myInstance\", \u0026vultr.InstanceArgs{\n\t\t\tEnableIpv6: pulumi.Bool(true),\n\t\t\tOsId:       pulumi.Int(167),\n\t\t\tPlan:       pulumi.String(\"vc2-1c-1gb\"),\n\t\t\tRegion:     pulumi.String(\"ewr\"),\n\t\t})\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\t_, err = vultr.NewReverseIpv4(ctx, \"myReverseIpv4\", \u0026vultr.ReverseIpv4Args{\n\t\t\tInstanceId: myInstance.ID(),\n\t\t\tIp:         myInstance.MainIp,\n\t\t\tReverse:    pulumi.String(\"host.example.com\"),\n\t\t})\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\treturn nil\n\t})\n}\n```\n{{% /example %}}\n{{% /examples %}}",
            "properties": {
                "gateway": {
                    "type": "string",
                    "description": "The gateway IP address.\n"
                },
                "instanceId": {
                    "type": "string",
                    "description": "The ID of the instance you want to set an IPv4\nreverse DNS record for.\n"
                },
                "ip": {
                    "type": "string",
                    "description": "The IPv4 address used in the reverse DNS record.\n"
                },
                "netmask": {
                    "type": "string",
                    "description": "The IPv4 netmask in dot-decimal notation.\n"
                },
                "reverse": {
                    "type": "string",
                    "description": "The hostname used in the IPv4 reverse DNS record.\n"
                }
            },
            "required": [
                "gateway",
                "instanceId",
                "ip",
                "netmask",
                "reverse"
            ],
            "inputProperties": {
                "instanceId": {
                    "type": "string",
                    "description": "The ID of the instance you want to set an IPv4\nreverse DNS record for.\n"
                },
                "ip": {
                    "type": "string",
                    "description": "The IPv4 address used in the reverse DNS record.\n"
                },
                "reverse": {
                    "type": "string",
                    "description": "The hostname used in the IPv4 reverse DNS record.\n"
                }
            },
            "requiredInputs": [
                "instanceId",
                "ip",
                "reverse"
            ],
            "stateInputs": {
                "description": "Input properties used for looking up and filtering ReverseIpv4 resources.\n",
                "properties": {
                    "gateway": {
                        "type": "string",
                        "description": "The gateway IP address.\n"
                    },
                    "instanceId": {
                        "type": "string",
                        "description": "The ID of the instance you want to set an IPv4\nreverse DNS record for.\n"
                    },
                    "ip": {
                        "type": "string",
                        "description": "The IPv4 address used in the reverse DNS record.\n"
                    },
                    "netmask": {
                        "type": "string",
                        "description": "The IPv4 netmask in dot-decimal notation.\n"
                    },
                    "reverse": {
                        "type": "string",
                        "description": "The hostname used in the IPv4 reverse DNS record.\n"
                    }
                },
                "type": "object"
            }
        },
        "vultr:index/reverseIpv6:ReverseIpv6": {
            "description": "Provides a Vultr Reverse IPv6 resource. This can be used to create, read,\nmodify, and delete reverse DNS records for IPv6 addresses. Upon success, DNS\nchanges may take 6-12 hours to become active.\n\n{{% examples %}}\n## Example Usage\n{{% example %}}\n\nCreate a new reverse DNS record for an IPv6 address:\n\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as vultr from \"@pulumi/vultr\";\n\nconst myServer = new vultr.Instance(\"myServer\", {\n    plan: \"vc2-1c-1gb\",\n    region: \"ewr\",\n    osId: 167,\n    enableIpv6: true,\n});\nconst myReverseIpv6 = new vultr.ReverseIpv6(\"myReverseIpv6\", {\n    instanceId: vultr_server.my_server.id,\n    ip: vultr_server.my_server.v6_networks[0].v6_main_ip,\n    reverse: \"host.example.com\",\n});\n```\n```python\nimport pulumi\nimport pulumi_vultr as vultr\n\nmy_server = vultr.Instance(\"myServer\",\n    plan=\"vc2-1c-1gb\",\n    region=\"ewr\",\n    os_id=167,\n    enable_ipv6=True)\nmy_reverse_ipv6 = vultr.ReverseIpv6(\"myReverseIpv6\",\n    instance_id=vultr_server[\"my_server\"][\"id\"],\n    ip=vultr_server[\"my_server\"][\"v6_networks\"][0][\"v6_main_ip\"],\n    reverse=\"host.example.com\")\n```\n```csharp\nusing Pulumi;\nusing Vultr = Pulumi.Vultr;\n\nclass MyStack : Stack\n{\n    public MyStack()\n    {\n        var myServer = new Vultr.Instance(\"myServer\", new Vultr.InstanceArgs\n        {\n            Plan = \"vc2-1c-1gb\",\n            Region = \"ewr\",\n            OsId = 167,\n            EnableIpv6 = true,\n        });\n        var myReverseIpv6 = new Vultr.ReverseIpv6(\"myReverseIpv6\", new Vultr.ReverseIpv6Args\n        {\n            InstanceId = vultr_server.My_server.Id,\n            Ip = vultr_server.My_server.V6_networks[0].V6_main_ip,\n            Reverse = \"host.example.com\",\n        });\n    }\n\n}\n```\n```go\npackage main\n\nimport (\n\t\"github.com/pulumi/pulumi-vultr/sdk/go/vultr\"\n\t\"github.com/pulumi/pulumi/sdk/v3/go/pulumi\"\n)\n\nfunc main() {\n\tpulumi.Run(func(ctx *pulumi.Context) error {\n\t\t_, err := vultr.NewInstance(ctx, \"myServer\", \u0026vultr.InstanceArgs{\n\t\t\tPlan:       pulumi.String(\"vc2-1c-1gb\"),\n\t\t\tRegion:     pulumi.String(\"ewr\"),\n\t\t\tOsId:       pulumi.Int(167),\n\t\t\tEnableIpv6: pulumi.Bool(true),\n\t\t})\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\t_, err = vultr.NewReverseIpv6(ctx, \"myReverseIpv6\", \u0026vultr.ReverseIpv6Args{\n\t\t\tInstanceId: pulumi.Any(vultr_server.My_server.Id),\n\t\t\tIp:         pulumi.Any(vultr_server.My_server.V6_networks[0].V6_main_ip),\n\t\t\tReverse:    pulumi.String(\"host.example.com\"),\n\t\t})\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\treturn nil\n\t})\n}\n```\n{{% /example %}}\n{{% /examples %}}",
            "properties": {
                "instanceId": {
                    "type": "string",
                    "description": "The ID of the server you want to set an IPv6\nreverse DNS record for.\n"
                },
                "ip": {
                    "type": "string",
                    "description": "The IPv6 address used in the reverse DNS record.\n"
                },
                "reverse": {
                    "type": "string",
                    "description": "The hostname used in the IPv6 reverse DNS record.\n"
                }
            },
            "required": [
                "instanceId",
                "ip",
                "reverse"
            ],
            "inputProperties": {
                "instanceId": {
                    "type": "string",
                    "description": "The ID of the server you want to set an IPv6\nreverse DNS record for.\n"
                },
                "ip": {
                    "type": "string",
                    "description": "The IPv6 address used in the reverse DNS record.\n"
                },
                "reverse": {
                    "type": "string",
                    "description": "The hostname used in the IPv6 reverse DNS record.\n"
                }
            },
            "requiredInputs": [
                "instanceId",
                "ip",
                "reverse"
            ],
            "stateInputs": {
                "description": "Input properties used for looking up and filtering ReverseIpv6 resources.\n",
                "properties": {
                    "instanceId": {
                        "type": "string",
                        "description": "The ID of the server you want to set an IPv6\nreverse DNS record for.\n"
                    },
                    "ip": {
                        "type": "string",
                        "description": "The IPv6 address used in the reverse DNS record.\n"
                    },
                    "reverse": {
                        "type": "string",
                        "description": "The hostname used in the IPv6 reverse DNS record.\n"
                    }
                },
                "type": "object"
            }
        },
        "vultr:index/snapshot:Snapshot": {
            "description": "Provides a Vultr Snapshot resource. This can be used to create, read, modify, and delete Snapshot.\n\n{{% examples %}}\n## Example Usage\n{{% example %}}\n\nCreate a new Snapshot\n\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as vultr from \"@pulumi/vultr\";\n\nconst myInstance = new vultr.Instance(\"my_instance\", {\n    label: \"my_instance\",\n    osId: 167,\n    plan: \"201\",\n    region: \"ewr\",\n});\nconst mySnapshot = new vultr.Snapshot(\"my_snapshot\", {\n    description: \"my instances snapshot\",\n    instanceId: myInstance.id,\n});\n```\n```python\nimport pulumi\nimport pulumi_vultr as vultr\n\nmy_instance = vultr.Instance(\"myInstance\",\n    label=\"my_instance\",\n    os_id=167,\n    plan=\"201\",\n    region=\"ewr\")\nmy_snapshot = vultr.Snapshot(\"mySnapshot\",\n    description=\"my instances snapshot\",\n    instance_id=my_instance.id)\n```\n```csharp\nusing Pulumi;\nusing Vultr = Pulumi.Vultr;\n\nclass MyStack : Stack\n{\n    public MyStack()\n    {\n        var myInstance = new Vultr.Instance(\"myInstance\", new Vultr.InstanceArgs\n        {\n            Label = \"my_instance\",\n            OsId = 167,\n            Plan = \"201\",\n            Region = \"ewr\",\n        });\n        var mySnapshot = new Vultr.Snapshot(\"mySnapshot\", new Vultr.SnapshotArgs\n        {\n            Description = \"my instances snapshot\",\n            InstanceId = myInstance.Id,\n        });\n    }\n\n}\n```\n```go\npackage main\n\nimport (\n\t\"github.com/pulumi/pulumi-vultr/sdk/go/vultr\"\n\t\"github.com/pulumi/pulumi/sdk/v3/go/pulumi\"\n)\n\nfunc main() {\n\tpulumi.Run(func(ctx *pulumi.Context) error {\n\t\tmyInstance, err := vultr.NewInstance(ctx, \"myInstance\", \u0026vultr.InstanceArgs{\n\t\t\tLabel:  pulumi.String(\"my_instance\"),\n\t\t\tOsId:   pulumi.Int(167),\n\t\t\tPlan:   pulumi.String(\"201\"),\n\t\t\tRegion: pulumi.String(\"ewr\"),\n\t\t})\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\t_, err = vultr.NewSnapshot(ctx, \"mySnapshot\", \u0026vultr.SnapshotArgs{\n\t\t\tDescription: pulumi.String(\"my instances snapshot\"),\n\t\t\tInstanceId:  myInstance.ID(),\n\t\t})\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\treturn nil\n\t})\n}\n```\n{{% /example %}}\n{{% /examples %}}\n\n## Import\n\nSnapshots can be imported using the Snapshot `ID`, e.g.\n\n```sh\n $ pulumi import vultr:index/snapshot:Snapshot my_snapshot 283941e8-0783-410e-9540-71c86b833992\n```\n\n ",
            "properties": {
                "appId": {
                    "type": "integer",
                    "description": "The app id which the snapshot is associated with.\n"
                },
                "dateCreated": {
                    "type": "string",
                    "description": "The date the snapshot was created.\n"
                },
                "description": {
                    "type": "string",
                    "description": "The description for the given snapshot.\n"
                },
                "instanceId": {
                    "type": "string",
                    "description": "ID of a given instance that you want to create a snapshot from.\n"
                },
                "osId": {
                    "type": "integer",
                    "description": "The os id which the snapshot is associated with.\n"
                },
                "size": {
                    "type": "integer",
                    "description": "The size of the snapshot in Bytes.\n"
                },
                "status": {
                    "type": "string",
                    "description": "The status for the given snapshot.\n"
                }
            },
            "required": [
                "appId",
                "dateCreated",
                "instanceId",
                "osId",
                "size",
                "status"
            ],
            "inputProperties": {
                "description": {
                    "type": "string",
                    "description": "The description for the given snapshot.\n"
                },
                "instanceId": {
                    "type": "string",
                    "description": "ID of a given instance that you want to create a snapshot from.\n"
                }
            },
            "requiredInputs": [
                "instanceId"
            ],
            "stateInputs": {
                "description": "Input properties used for looking up and filtering Snapshot resources.\n",
                "properties": {
                    "appId": {
                        "type": "integer",
                        "description": "The app id which the snapshot is associated with.\n"
                    },
                    "dateCreated": {
                        "type": "string",
                        "description": "The date the snapshot was created.\n"
                    },
                    "description": {
                        "type": "string",
                        "description": "The description for the given snapshot.\n"
                    },
                    "instanceId": {
                        "type": "string",
                        "description": "ID of a given instance that you want to create a snapshot from.\n"
                    },
                    "osId": {
                        "type": "integer",
                        "description": "The os id which the snapshot is associated with.\n"
                    },
                    "size": {
                        "type": "integer",
                        "description": "The size of the snapshot in Bytes.\n"
                    },
                    "status": {
                        "type": "string",
                        "description": "The status for the given snapshot.\n"
                    }
                },
                "type": "object"
            }
        },
        "vultr:index/snapshotFromUrl:SnapshotFromUrl": {
            "description": "Provides a Vultr Snapshots from URL resource. This can be used to create, read, modify, and delete Snapshots from URL.\n\n{{% examples %}}\n## Example Usage\n{{% example %}}\n\nCreate a new Snapshots from URL\n\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as vultr from \"@pulumi/vultr\";\n\nconst mySnapshot = new vultr.SnapshotFromUrl(\"my_snapshot\", {\n    url: \"http://dl-cdn.alpinelinux.org/alpine/v3.9/releases/x86_64/alpine-virt-3.9.1-x86_64.iso\",\n});\n```\n```python\nimport pulumi\nimport pulumi_vultr as vultr\n\nmy_snapshot = vultr.SnapshotFromUrl(\"mySnapshot\", url=\"http://dl-cdn.alpinelinux.org/alpine/v3.9/releases/x86_64/alpine-virt-3.9.1-x86_64.iso\")\n```\n```csharp\nusing Pulumi;\nusing Vultr = Pulumi.Vultr;\n\nclass MyStack : Stack\n{\n    public MyStack()\n    {\n        var mySnapshot = new Vultr.SnapshotFromUrl(\"mySnapshot\", new Vultr.SnapshotFromUrlArgs\n        {\n            Url = \"http://dl-cdn.alpinelinux.org/alpine/v3.9/releases/x86_64/alpine-virt-3.9.1-x86_64.iso\",\n        });\n    }\n\n}\n```\n```go\npackage main\n\nimport (\n\t\"github.com/pulumi/pulumi-vultr/sdk/go/vultr\"\n\t\"github.com/pulumi/pulumi/sdk/v3/go/pulumi\"\n)\n\nfunc main() {\n\tpulumi.Run(func(ctx *pulumi.Context) error {\n\t\t_, err := vultr.NewSnapshotFromUrl(ctx, \"mySnapshot\", \u0026vultr.SnapshotFromUrlArgs{\n\t\t\tUrl: pulumi.String(\"http://dl-cdn.alpinelinux.org/alpine/v3.9/releases/x86_64/alpine-virt-3.9.1-x86_64.iso\"),\n\t\t})\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\treturn nil\n\t})\n}\n```\n{{% /example %}}\n{{% /examples %}}\n\n## Import\n\nSnapshots from Url can be imported using the Snapshot `ID`, e.g.\n\n```sh\n $ pulumi import vultr:index/snapshotFromUrl:SnapshotFromUrl my_snapshot e60dc0a2-9313-4bab-bffc-57ffe33d99f6\n```\n\n ",
            "properties": {
                "appId": {
                    "type": "integer",
                    "description": "The app id which the snapshot is associated with.\n"
                },
                "dateCreated": {
                    "type": "string",
                    "description": "The date the snapshot was created.\n"
                },
                "description": {
                    "type": "string",
                    "description": "The description for the given snapshot.\n"
                },
                "osId": {
                    "type": "integer",
                    "description": "The os id which the snapshot is associated with.\n"
                },
                "size": {
                    "type": "integer",
                    "description": "The size of the snapshot in Bytes.\n"
                },
                "status": {
                    "type": "string",
                    "description": "The status for the given snapshot.\n"
                },
                "url": {
                    "type": "string",
                    "description": "URL of the given resource you want to create a snapshot from.\n"
                }
            },
            "required": [
                "appId",
                "dateCreated",
                "description",
                "osId",
                "size",
                "status",
                "url"
            ],
            "inputProperties": {
                "url": {
                    "type": "string",
                    "description": "URL of the given resource you want to create a snapshot from.\n"
                }
            },
            "requiredInputs": [
                "url"
            ],
            "stateInputs": {
                "description": "Input properties used for looking up and filtering SnapshotFromUrl resources.\n",
                "properties": {
                    "appId": {
                        "type": "integer",
                        "description": "The app id which the snapshot is associated with.\n"
                    },
                    "dateCreated": {
                        "type": "string",
                        "description": "The date the snapshot was created.\n"
                    },
                    "description": {
                        "type": "string",
                        "description": "The description for the given snapshot.\n"
                    },
                    "osId": {
                        "type": "integer",
                        "description": "The os id which the snapshot is associated with.\n"
                    },
                    "size": {
                        "type": "integer",
                        "description": "The size of the snapshot in Bytes.\n"
                    },
                    "status": {
                        "type": "string",
                        "description": "The status for the given snapshot.\n"
                    },
                    "url": {
                        "type": "string",
                        "description": "URL of the given resource you want to create a snapshot from.\n"
                    }
                },
                "type": "object"
            }
        },
        "vultr:index/sshKey:SshKey": {
            "description": "Provides a Vultr SSH key resource. This can be used to create, read, modify, and delete SSH keys.\n\n{{% examples %}}\n## Example Usage\n{{% example %}}\n\nCreate an SSH key\n\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as vultr from \"@pulumi/vultr\";\n\nconst mySshKey = new vultr.SshKey(\"my_ssh_key\", {\n    sshKey: \"ssh-rsa AAAAB3NzaC1yc2EAAAADAQABAAABAQCyVGaw1PuEl98f4/7Kq3O9ZIvDw2OFOSXAFVqilSFNkHlefm1iMtPeqsIBp2t9cbGUf55xNDULz/bD/4BCV43yZ5lh0cUYuXALg9NI29ui7PEGReXjSpNwUD6ceN/78YOK41KAcecq+SS0bJ4b4amKZIJG3JWmDKljtv1dmSBCrTmEAQaOorxqGGBYmZS7NQumRe4lav5r6wOs8OACMANE1ejkeZsGFzJFNqvr5DuHdDL5FAudW23me3BDmrM9ifUzzjl1Jwku3bnRaCcjaxH8oTumt1a00mWci/1qUlaVFft085yvVq7KZbF2OPPbl+erDW91+EZ2FgEi+v1/CSJ5 your_username@hostname\",\n});\n```\n```python\nimport pulumi\nimport pulumi_vultr as vultr\n\nmy_ssh_key = vultr.SshKey(\"mySshKey\", ssh_key=\"ssh-rsa AAAAB3NzaC1yc2EAAAADAQABAAABAQCyVGaw1PuEl98f4/7Kq3O9ZIvDw2OFOSXAFVqilSFNkHlefm1iMtPeqsIBp2t9cbGUf55xNDULz/bD/4BCV43yZ5lh0cUYuXALg9NI29ui7PEGReXjSpNwUD6ceN/78YOK41KAcecq+SS0bJ4b4amKZIJG3JWmDKljtv1dmSBCrTmEAQaOorxqGGBYmZS7NQumRe4lav5r6wOs8OACMANE1ejkeZsGFzJFNqvr5DuHdDL5FAudW23me3BDmrM9ifUzzjl1Jwku3bnRaCcjaxH8oTumt1a00mWci/1qUlaVFft085yvVq7KZbF2OPPbl+erDW91+EZ2FgEi+v1/CSJ5 your_username@hostname\")\n```\n```csharp\nusing Pulumi;\nusing Vultr = Pulumi.Vultr;\n\nclass MyStack : Stack\n{\n    public MyStack()\n    {\n        var mySshKey = new Vultr.SshKey(\"mySshKey\", new Vultr.SshKeyArgs\n        {\n            SshKey = \"ssh-rsa AAAAB3NzaC1yc2EAAAADAQABAAABAQCyVGaw1PuEl98f4/7Kq3O9ZIvDw2OFOSXAFVqilSFNkHlefm1iMtPeqsIBp2t9cbGUf55xNDULz/bD/4BCV43yZ5lh0cUYuXALg9NI29ui7PEGReXjSpNwUD6ceN/78YOK41KAcecq+SS0bJ4b4amKZIJG3JWmDKljtv1dmSBCrTmEAQaOorxqGGBYmZS7NQumRe4lav5r6wOs8OACMANE1ejkeZsGFzJFNqvr5DuHdDL5FAudW23me3BDmrM9ifUzzjl1Jwku3bnRaCcjaxH8oTumt1a00mWci/1qUlaVFft085yvVq7KZbF2OPPbl+erDW91+EZ2FgEi+v1/CSJ5 your_username@hostname\",\n        });\n    }\n\n}\n```\n```go\npackage main\n\nimport (\n\t\"github.com/pulumi/pulumi-vultr/sdk/go/vultr\"\n\t\"github.com/pulumi/pulumi/sdk/v3/go/pulumi\"\n)\n\nfunc main() {\n\tpulumi.Run(func(ctx *pulumi.Context) error {\n\t\t_, err := vultr.NewSshKey(ctx, \"mySshKey\", \u0026vultr.SshKeyArgs{\n\t\t\tSshKey: pulumi.String(\"ssh-rsa AAAAB3NzaC1yc2EAAAADAQABAAABAQCyVGaw1PuEl98f4/7Kq3O9ZIvDw2OFOSXAFVqilSFNkHlefm1iMtPeqsIBp2t9cbGUf55xNDULz/bD/4BCV43yZ5lh0cUYuXALg9NI29ui7PEGReXjSpNwUD6ceN/78YOK41KAcecq+SS0bJ4b4amKZIJG3JWmDKljtv1dmSBCrTmEAQaOorxqGGBYmZS7NQumRe4lav5r6wOs8OACMANE1ejkeZsGFzJFNqvr5DuHdDL5FAudW23me3BDmrM9ifUzzjl1Jwku3bnRaCcjaxH8oTumt1a00mWci/1qUlaVFft085yvVq7KZbF2OPPbl+erDW91+EZ2FgEi+v1/CSJ5 your_username@hostname\"),\n\t\t})\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\treturn nil\n\t})\n}\n```\n{{% /example %}}\n{{% /examples %}}\n\n## Import\n\nSSH keys can be imported using the SSH key `ID`, e.g.\n\n```sh\n $ pulumi import vultr:index/sshKey:SshKey my_key 6b0876a7-f709-41ba-aed8-abed9d38ae45\n```\n\n ",
            "properties": {
                "dateCreated": {
                    "type": "string",
                    "description": "The date the SSH key was added to your Vultr account.\n"
                },
                "name": {
                    "type": "string",
                    "description": "The name/label of the SSH key.\n"
                },
                "sshKey": {
                    "type": "string",
                    "description": "The public SSH key.\n"
                }
            },
            "required": [
                "dateCreated",
                "name",
                "sshKey"
            ],
            "inputProperties": {
                "name": {
                    "type": "string",
                    "description": "The name/label of the SSH key.\n"
                },
                "sshKey": {
                    "type": "string",
                    "description": "The public SSH key.\n"
                }
            },
            "requiredInputs": [
                "sshKey"
            ],
            "stateInputs": {
                "description": "Input properties used for looking up and filtering SshKey resources.\n",
                "properties": {
                    "dateCreated": {
                        "type": "string",
                        "description": "The date the SSH key was added to your Vultr account.\n"
                    },
                    "name": {
                        "type": "string",
                        "description": "The name/label of the SSH key.\n"
                    },
                    "sshKey": {
                        "type": "string",
                        "description": "The public SSH key.\n"
                    }
                },
                "type": "object"
            }
        },
        "vultr:index/startupScript:StartupScript": {
            "description": "Provides a Vultr Startup Script resource. This can be used to create, read, modify, and delete Startup Scripts.\n\n{{% examples %}}\n## Example Usage\n{{% example %}}\n\nCreate a new Startup Script\n\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as vultr from \"@pulumi/vultr\";\n\nconst myScript = new vultr.StartupScript(\"my_script\", {\n    script: \"echo $PATH\",\n});\n```\n```python\nimport pulumi\nimport pulumi_vultr as vultr\n\nmy_script = vultr.StartupScript(\"myScript\", script=\"echo $PATH\")\n```\n```csharp\nusing Pulumi;\nusing Vultr = Pulumi.Vultr;\n\nclass MyStack : Stack\n{\n    public MyStack()\n    {\n        var myScript = new Vultr.StartupScript(\"myScript\", new Vultr.StartupScriptArgs\n        {\n            Script = \"echo $PATH\",\n        });\n    }\n\n}\n```\n```go\npackage main\n\nimport (\n\t\"fmt\"\n\n\t\"github.com/pulumi/pulumi-vultr/sdk/go/vultr\"\n\t\"github.com/pulumi/pulumi/sdk/v3/go/pulumi\"\n)\n\nfunc main() {\n\tpulumi.Run(func(ctx *pulumi.Context) error {\n\t\t_, err := vultr.NewStartupScript(ctx, \"myScript\", \u0026vultr.StartupScriptArgs{\n\t\t\tScript: pulumi.String(fmt.Sprintf(\"%v%v%v\", \"echo \", \"$\", \"PATH\")),\n\t\t})\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\treturn nil\n\t})\n}\n```\n{{% /example %}}\n{{% /examples %}}\n\n## Import\n\nStartup Scripts can be imported using the Startup Scripts `ID`, e.g.\n\n```sh\n $ pulumi import vultr:index/startupScript:StartupScript my_script ff8f36a8-eb86-4b8d-8667-b9d5459b6390\n```\n\n ",
            "properties": {
                "dateCreated": {
                    "type": "string",
                    "description": "Date the script was created.\n"
                },
                "dateModified": {
                    "type": "string",
                    "description": "Date the script was last modified.\n"
                },
                "name": {
                    "type": "string",
                    "description": "Name of the given script.\n"
                },
                "script": {
                    "type": "string",
                    "description": "Contents of the startup script base64 encoded.\n"
                },
                "type": {
                    "type": "string",
                    "description": "Type of startup script. Possible values are boot or pxe - default is boot.\n"
                }
            },
            "required": [
                "dateCreated",
                "dateModified",
                "name",
                "script"
            ],
            "inputProperties": {
                "name": {
                    "type": "string",
                    "description": "Name of the given script.\n"
                },
                "script": {
                    "type": "string",
                    "description": "Contents of the startup script base64 encoded.\n"
                },
                "type": {
                    "type": "string",
                    "description": "Type of startup script. Possible values are boot or pxe - default is boot.\n"
                }
            },
            "requiredInputs": [
                "script"
            ],
            "stateInputs": {
                "description": "Input properties used for looking up and filtering StartupScript resources.\n",
                "properties": {
                    "dateCreated": {
                        "type": "string",
                        "description": "Date the script was created.\n"
                    },
                    "dateModified": {
                        "type": "string",
                        "description": "Date the script was last modified.\n"
                    },
                    "name": {
                        "type": "string",
                        "description": "Name of the given script.\n"
                    },
                    "script": {
                        "type": "string",
                        "description": "Contents of the startup script base64 encoded.\n"
                    },
                    "type": {
                        "type": "string",
                        "description": "Type of startup script. Possible values are boot or pxe - default is boot.\n"
                    }
                },
                "type": "object"
            }
        },
        "vultr:index/user:User": {
            "description": "Provides a Vultr User resource. This can be used to create, read, modify, and delete Users.\n\n{{% examples %}}\n## Example Usage\n{{% example %}}\n\nCreate a new User without any ACLs\n\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as vultr from \"@pulumi/vultr\";\n\nconst myUser = new vultr.User(\"my_user\", {\n    apiEnabled: true,\n    email: \"user@vultr.com\",\n    password: \"myP@ssw0rd\",\n});\n```\n```python\nimport pulumi\nimport pulumi_vultr as vultr\n\nmy_user = vultr.User(\"myUser\",\n    api_enabled=True,\n    email=\"user@vultr.com\",\n    password=\"myP@ssw0rd\")\n```\n```csharp\nusing Pulumi;\nusing Vultr = Pulumi.Vultr;\n\nclass MyStack : Stack\n{\n    public MyStack()\n    {\n        var myUser = new Vultr.User(\"myUser\", new Vultr.UserArgs\n        {\n            ApiEnabled = true,\n            Email = \"user@vultr.com\",\n            Password = \"myP@ssw0rd\",\n        });\n    }\n\n}\n```\n```go\npackage main\n\nimport (\n\t\"github.com/pulumi/pulumi-vultr/sdk/go/vultr\"\n\t\"github.com/pulumi/pulumi/sdk/v3/go/pulumi\"\n)\n\nfunc main() {\n\tpulumi.Run(func(ctx *pulumi.Context) error {\n\t\t_, err := vultr.NewUser(ctx, \"myUser\", \u0026vultr.UserArgs{\n\t\t\tApiEnabled: pulumi.Bool(true),\n\t\t\tEmail:      pulumi.String(\"user@vultr.com\"),\n\t\t\tPassword:   pulumi.String(\"myP@ssw0rd\"),\n\t\t})\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\treturn nil\n\t})\n}\n```\n\nCreate a new User with all ACLs\n\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as vultr from \"@pulumi/vultr\";\n\nconst myUser = new vultr.User(\"my_user\", {\n    acls: [\n        \"manage_users\",\n        \"subscriptions\",\n        \"provisioning\",\n        \"billing\",\n        \"support\",\n        \"abuse\",\n        \"dns\",\n        \"upgrade\",\n    ],\n    apiEnabled: true,\n    email: \"user@vultr.com\",\n    password: \"myP@ssw0rd\",\n});\n```\n```python\nimport pulumi\nimport pulumi_vultr as vultr\n\nmy_user = vultr.User(\"myUser\",\n    acls=[\n        \"manage_users\",\n        \"subscriptions\",\n        \"provisioning\",\n        \"billing\",\n        \"support\",\n        \"abuse\",\n        \"dns\",\n        \"upgrade\",\n    ],\n    api_enabled=True,\n    email=\"user@vultr.com\",\n    password=\"myP@ssw0rd\")\n```\n```csharp\nusing Pulumi;\nusing Vultr = Pulumi.Vultr;\n\nclass MyStack : Stack\n{\n    public MyStack()\n    {\n        var myUser = new Vultr.User(\"myUser\", new Vultr.UserArgs\n        {\n            Acls = \n            {\n                \"manage_users\",\n                \"subscriptions\",\n                \"provisioning\",\n                \"billing\",\n                \"support\",\n                \"abuse\",\n                \"dns\",\n                \"upgrade\",\n            },\n            ApiEnabled = true,\n            Email = \"user@vultr.com\",\n            Password = \"myP@ssw0rd\",\n        });\n    }\n\n}\n```\n```go\npackage main\n\nimport (\n\t\"github.com/pulumi/pulumi-vultr/sdk/go/vultr\"\n\t\"github.com/pulumi/pulumi/sdk/v3/go/pulumi\"\n)\n\nfunc main() {\n\tpulumi.Run(func(ctx *pulumi.Context) error {\n\t\t_, err := vultr.NewUser(ctx, \"myUser\", \u0026vultr.UserArgs{\n\t\t\tAcls: pulumi.StringArray{\n\t\t\t\tpulumi.String(\"manage_users\"),\n\t\t\t\tpulumi.String(\"subscriptions\"),\n\t\t\t\tpulumi.String(\"provisioning\"),\n\t\t\t\tpulumi.String(\"billing\"),\n\t\t\t\tpulumi.String(\"support\"),\n\t\t\t\tpulumi.String(\"abuse\"),\n\t\t\t\tpulumi.String(\"dns\"),\n\t\t\t\tpulumi.String(\"upgrade\"),\n\t\t\t},\n\t\t\tApiEnabled: pulumi.Bool(true),\n\t\t\tEmail:      pulumi.String(\"user@vultr.com\"),\n\t\t\tPassword:   pulumi.String(\"myP@ssw0rd\"),\n\t\t})\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\treturn nil\n\t})\n}\n```\n{{% /example %}}\n{{% /examples %}}\n\n## Import\n\nUsers can be imported using the User `ID`, e.g.\n\n```sh\n $ pulumi import vultr:index/user:User myuser 1345fef0-8ed3-4a66-bd8c-822a7b7bd05a\n```\n\n ",
            "properties": {
                "acls": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "The access control list for the user.\n"
                },
                "apiEnabled": {
                    "type": "boolean",
                    "description": "Whether API is enabled for the user. Default behavior is set to enabled.\n"
                },
                "apiKey": {
                    "type": "string"
                },
                "email": {
                    "type": "string",
                    "description": "Email for this user.\n"
                },
                "name": {
                    "type": "string",
                    "description": "Name for this user.\n"
                },
                "password": {
                    "type": "string",
                    "description": "Password for this user.\n"
                }
            },
            "required": [
                "apiKey",
                "email",
                "name",
                "password"
            ],
            "inputProperties": {
                "acls": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "The access control list for the user.\n"
                },
                "apiEnabled": {
                    "type": "boolean",
                    "description": "Whether API is enabled for the user. Default behavior is set to enabled.\n"
                },
                "email": {
                    "type": "string",
                    "description": "Email for this user.\n"
                },
                "name": {
                    "type": "string",
                    "description": "Name for this user.\n"
                },
                "password": {
                    "type": "string",
                    "description": "Password for this user.\n"
                }
            },
            "requiredInputs": [
                "email",
                "password"
            ],
            "stateInputs": {
                "description": "Input properties used for looking up and filtering User resources.\n",
                "properties": {
                    "acls": {
                        "type": "array",
                        "items": {
                            "type": "string"
                        },
                        "description": "The access control list for the user.\n"
                    },
                    "apiEnabled": {
                        "type": "boolean",
                        "description": "Whether API is enabled for the user. Default behavior is set to enabled.\n"
                    },
                    "apiKey": {
                        "type": "string"
                    },
                    "email": {
                        "type": "string",
                        "description": "Email for this user.\n"
                    },
                    "name": {
                        "type": "string",
                        "description": "Name for this user.\n"
                    },
                    "password": {
                        "type": "string",
                        "description": "Password for this user.\n"
                    }
                },
                "type": "object"
            }
        }
    },
    "functions": {
        "vultr:index/getAccount:getAccount": {
            "description": "Get information about your Vultr account. This data source provides the balance, pending charges, last payment date, and last payment amount for your Vultr account.\n\n{{% examples %}}\n## Example Usage\n{{% example %}}\n\nGet the information for an account:\n\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as vultr from \"@pulumi/vultr\";\n\nconst myAccount = pulumi.output(vultr.getAccount());\n```\n```python\nimport pulumi\nimport pulumi_vultr as vultr\n\nmy_account = vultr.get_account()\n```\n```csharp\nusing Pulumi;\nusing Vultr = Pulumi.Vultr;\n\nclass MyStack : Stack\n{\n    public MyStack()\n    {\n        var myAccount = Output.Create(Vultr.GetAccount.InvokeAsync());\n    }\n\n}\n```\n```go\npackage main\n\nimport (\n\t\"github.com/pulumi/pulumi-vultr/sdk/go/vultr\"\n\t\"github.com/pulumi/pulumi/sdk/v3/go/pulumi\"\n)\n\nfunc main() {\n\tpulumi.Run(func(ctx *pulumi.Context) error {\n\t\t_, err := vultr.GetAccount(ctx, nil, nil)\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\treturn nil\n\t})\n}\n```\n{{% /example %}}\n{{% /examples %}}",
            "outputs": {
                "description": "A collection of values returned by getAccount.\n",
                "properties": {
                    "acls": {
                        "type": "array",
                        "items": {
                            "type": "string"
                        },
                        "description": "The access control list on your Vultr account.\n"
                    },
                    "balance": {
                        "type": "number",
                        "description": "The current balance on your Vultr account.\n"
                    },
                    "email": {
                        "type": "string",
                        "description": "The email address on your Vultr account.\n"
                    },
                    "id": {
                        "type": "string",
                        "description": "The provider-assigned unique ID for this managed resource.\n"
                    },
                    "lastPaymentAmount": {
                        "type": "number",
                        "description": "The amount of the last payment made on your Vultr account.\n"
                    },
                    "lastPaymentDate": {
                        "type": "string",
                        "description": "The date of the last payment made on your Vultr account.\n"
                    },
                    "name": {
                        "type": "string",
                        "description": "The name on your Vultr account.\n"
                    },
                    "pendingCharges": {
                        "type": "number",
                        "description": "The pending charges on your Vultr account.\n"
                    }
                },
                "type": "object",
                "required": [
                    "acls",
                    "balance",
                    "email",
                    "lastPaymentAmount",
                    "lastPaymentDate",
                    "name",
                    "pendingCharges",
                    "id"
                ]
            }
        },
        "vultr:index/getApplication:getApplication": {
            "description": "Get information about applications that can be launched when creating a Vultr VPS.\n\n{{% examples %}}\n## Example Usage\n{{% example %}}\n\nGet the information for an application by `deploy_name`:\n\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as vultr from \"@pulumi/vultr\";\n\nconst docker = pulumi.output(vultr.getApplication({\n    filters: [{\n        name: \"deploy_name\",\n        values: [\"Docker on CentOS 7 x64\"],\n    }],\n}));\n```\n```python\nimport pulumi\nimport pulumi_vultr as vultr\n\ndocker = vultr.get_application(filters=[vultr.GetApplicationFilterArgs(\n    name=\"deploy_name\",\n    values=[\"Docker on CentOS 7 x64\"],\n)])\n```\n```csharp\nusing Pulumi;\nusing Vultr = Pulumi.Vultr;\n\nclass MyStack : Stack\n{\n    public MyStack()\n    {\n        var docker = Output.Create(Vultr.GetApplication.InvokeAsync(new Vultr.GetApplicationArgs\n        {\n            Filters = \n            {\n                new Vultr.Inputs.GetApplicationFilterArgs\n                {\n                    Name = \"deploy_name\",\n                    Values = \n                    {\n                        \"Docker on CentOS 7 x64\",\n                    },\n                },\n            },\n        }));\n    }\n\n}\n```\n```go\npackage main\n\nimport (\n\t\"github.com/pulumi/pulumi-vultr/sdk/go/vultr\"\n\t\"github.com/pulumi/pulumi/sdk/v3/go/pulumi\"\n)\n\nfunc main() {\n\tpulumi.Run(func(ctx *pulumi.Context) error {\n\t\t_, err := vultr.GetApplication(ctx, \u0026GetApplicationArgs{\n\t\t\tFilters: []GetApplicationFilter{\n\t\t\t\tGetApplicationFilter{\n\t\t\t\t\tName: \"deploy_name\",\n\t\t\t\t\tValues: []string{\n\t\t\t\t\t\t\"Docker on CentOS 7 x64\",\n\t\t\t\t\t},\n\t\t\t\t},\n\t\t\t},\n\t\t}, nil)\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\treturn nil\n\t})\n}\n```\n{{% /example %}}\n{{% /examples %}}",
            "inputs": {
                "description": "A collection of arguments for invoking getApplication.\n",
                "properties": {
                    "filters": {
                        "type": "array",
                        "items": {
                            "$ref": "#/types/vultr:index/getApplicationFilter:getApplicationFilter"
                        },
                        "description": "Query parameters for finding applications.\n"
                    }
                },
                "type": "object"
            },
            "outputs": {
                "description": "A collection of values returned by getApplication.\n",
                "properties": {
                    "deployName": {
                        "type": "string",
                        "description": "The deploy name of the application.\n"
                    },
                    "filters": {
                        "type": "array",
                        "items": {
                            "$ref": "#/types/vultr:index/getApplicationFilter:getApplicationFilter"
                        }
                    },
                    "id": {
                        "type": "string",
                        "description": "The provider-assigned unique ID for this managed resource.\n"
                    },
                    "imageId": {
                        "type": "string",
                        "description": "The Marketplace ID for this application.\n"
                    },
                    "name": {
                        "type": "string",
                        "description": "The name of the application.\n"
                    },
                    "shortName": {
                        "type": "string",
                        "description": "The short name of the application.\n"
                    },
                    "type": {
                        "type": "string",
                        "description": "This defines if an application is `one-click` or `marketplace` .\n"
                    },
                    "vendor": {
                        "type": "string",
                        "description": "The vendor who authored the application.\n"
                    }
                },
                "type": "object",
                "required": [
                    "deployName",
                    "imageId",
                    "name",
                    "shortName",
                    "type",
                    "vendor",
                    "id"
                ]
            }
        },
        "vultr:index/getBackup:getBackup": {
            "description": "Get information about a Vultr backup. This data source provides a list of backups which contain the description, size, status, and the creation date for your Vultr backup.\n\n{{% examples %}}\n## Example Usage\n{{% example %}}\n\nGet the information for a backup by `description`:\n\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as vultr from \"@pulumi/vultr\";\n\nconst myBackup = pulumi.output(vultr.getBackup({\n    filters: [{\n        name: \"description\",\n        values: [\"my-backup-description\"],\n    }],\n}));\n```\n```python\nimport pulumi\nimport pulumi_vultr as vultr\n\nmy_backup = vultr.get_backup(filters=[vultr.GetBackupFilterArgs(\n    name=\"description\",\n    values=[\"my-backup-description\"],\n)])\n```\n```csharp\nusing Pulumi;\nusing Vultr = Pulumi.Vultr;\n\nclass MyStack : Stack\n{\n    public MyStack()\n    {\n        var myBackup = Output.Create(Vultr.GetBackup.InvokeAsync(new Vultr.GetBackupArgs\n        {\n            Filters = \n            {\n                new Vultr.Inputs.GetBackupFilterArgs\n                {\n                    Name = \"description\",\n                    Values = \n                    {\n                        \"my-backup-description\",\n                    },\n                },\n            },\n        }));\n    }\n\n}\n```\n```go\npackage main\n\nimport (\n\t\"github.com/pulumi/pulumi-vultr/sdk/go/vultr\"\n\t\"github.com/pulumi/pulumi/sdk/v3/go/pulumi\"\n)\n\nfunc main() {\n\tpulumi.Run(func(ctx *pulumi.Context) error {\n\t\t_, err := vultr.GetBackup(ctx, \u0026GetBackupArgs{\n\t\t\tFilters: []GetBackupFilter{\n\t\t\t\tGetBackupFilter{\n\t\t\t\t\tName: \"description\",\n\t\t\t\t\tValues: []string{\n\t\t\t\t\t\t\"my-backup-description\",\n\t\t\t\t\t},\n\t\t\t\t},\n\t\t\t},\n\t\t}, nil)\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\treturn nil\n\t})\n}\n```\n{{% /example %}}\n{{% /examples %}}",
            "inputs": {
                "description": "A collection of arguments for invoking getBackup.\n",
                "properties": {
                    "filters": {
                        "type": "array",
                        "items": {
                            "$ref": "#/types/vultr:index/getBackupFilter:getBackupFilter"
                        },
                        "description": "Query parameters for finding backups.\n"
                    }
                },
                "type": "object"
            },
            "outputs": {
                "description": "A collection of values returned by getBackup.\n",
                "properties": {
                    "backups": {
                        "type": "array",
                        "items": {
                            "type": "object",
                            "additionalProperties": {
                                "$ref": "pulumi.json#/Any"
                            }
                        }
                    },
                    "filters": {
                        "type": "array",
                        "items": {
                            "$ref": "#/types/vultr:index/getBackupFilter:getBackupFilter"
                        }
                    },
                    "id": {
                        "type": "string",
                        "description": "The provider-assigned unique ID for this managed resource.\n"
                    }
                },
                "type": "object",
                "required": [
                    "backups",
                    "id"
                ]
            }
        },
        "vultr:index/getBareMetalPlan:getBareMetalPlan": {
            "description": "Get information about a Vultr bare metal server plan.\n\n{{% examples %}}\n## Example Usage\n{{% example %}}\n\nGet the information for a plan by `id`:\n\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as vultr from \"@pulumi/vultr\";\n\nconst myPlan = pulumi.output(vultr.getBareMetalPlan({\n    filters: [{\n        name: \"id\",\n        values: [\"vbm-4c-32gb\"],\n    }],\n}));\n```\n```python\nimport pulumi\nimport pulumi_vultr as vultr\n\nmy_plan = vultr.get_bare_metal_plan(filters=[vultr.GetBareMetalPlanFilterArgs(\n    name=\"id\",\n    values=[\"vbm-4c-32gb\"],\n)])\n```\n```csharp\nusing Pulumi;\nusing Vultr = Pulumi.Vultr;\n\nclass MyStack : Stack\n{\n    public MyStack()\n    {\n        var myPlan = Output.Create(Vultr.GetBareMetalPlan.InvokeAsync(new Vultr.GetBareMetalPlanArgs\n        {\n            Filters = \n            {\n                new Vultr.Inputs.GetBareMetalPlanFilterArgs\n                {\n                    Name = \"id\",\n                    Values = \n                    {\n                        \"vbm-4c-32gb\",\n                    },\n                },\n            },\n        }));\n    }\n\n}\n```\n```go\npackage main\n\nimport (\n\t\"github.com/pulumi/pulumi-vultr/sdk/go/vultr\"\n\t\"github.com/pulumi/pulumi/sdk/v3/go/pulumi\"\n)\n\nfunc main() {\n\tpulumi.Run(func(ctx *pulumi.Context) error {\n\t\t_, err := vultr.GetBareMetalPlan(ctx, \u0026GetBareMetalPlanArgs{\n\t\t\tFilters: []GetBareMetalPlanFilter{\n\t\t\t\tGetBareMetalPlanFilter{\n\t\t\t\t\tName: \"id\",\n\t\t\t\t\tValues: []string{\n\t\t\t\t\t\t\"vbm-4c-32gb\",\n\t\t\t\t\t},\n\t\t\t\t},\n\t\t\t},\n\t\t}, nil)\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\treturn nil\n\t})\n}\n```\n{{% /example %}}\n{{% /examples %}}",
            "inputs": {
                "description": "A collection of arguments for invoking getBareMetalPlan.\n",
                "properties": {
                    "filters": {
                        "type": "array",
                        "items": {
                            "$ref": "#/types/vultr:index/getBareMetalPlanFilter:getBareMetalPlanFilter"
                        },
                        "description": "Query parameters for finding plans.\n"
                    }
                },
                "type": "object"
            },
            "outputs": {
                "description": "A collection of values returned by getBareMetalPlan.\n",
                "properties": {
                    "bandwidth": {
                        "type": "integer",
                        "description": "The bandwidth available on the plan.\n"
                    },
                    "cpuCount": {
                        "type": "integer",
                        "description": "The number of CPUs available on the plan.\n"
                    },
                    "cpuModel": {
                        "type": "string",
                        "description": "The CPU model of the plan.\n"
                    },
                    "cpuThreads": {
                        "type": "integer",
                        "description": "The number of CPU threads.\n"
                    },
                    "disk": {
                        "type": "integer",
                        "description": "The description of the disk(s) on the plan.\n"
                    },
                    "diskCount": {
                        "type": "integer",
                        "description": "The number of disks that this plan offers.\n"
                    },
                    "filters": {
                        "type": "array",
                        "items": {
                            "$ref": "#/types/vultr:index/getBareMetalPlanFilter:getBareMetalPlanFilter"
                        }
                    },
                    "id": {
                        "type": "string",
                        "description": "The provider-assigned unique ID for this managed resource.\n"
                    },
                    "locations": {
                        "type": "array",
                        "items": {
                            "type": "string"
                        }
                    },
                    "monthlyCost": {
                        "type": "integer",
                        "description": "The price per month of the plan in USD.\n"
                    },
                    "ram": {
                        "type": "integer",
                        "description": "The amount of memory available on the plan in MB.\n"
                    },
                    "type": {
                        "type": "string",
                        "description": "The type of plan it is.\n"
                    }
                },
                "type": "object",
                "required": [
                    "bandwidth",
                    "cpuCount",
                    "cpuModel",
                    "cpuThreads",
                    "disk",
                    "diskCount",
                    "locations",
                    "monthlyCost",
                    "ram",
                    "type",
                    "id"
                ]
            }
        },
        "vultr:index/getBareMetalServer:getBareMetalServer": {
            "description": "Get information about a Vultr bare metal server.\n\n{{% examples %}}\n## Example Usage\n{{% example %}}\n\nGet the information for a server by `label`:\n\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as vultr from \"@pulumi/vultr\";\n\nconst myServer = pulumi.output(vultr.getBareMetalServer({\n    filters: [{\n        name: \"label\",\n        values: [\"my-server-label\"],\n    }],\n}));\n```\n```python\nimport pulumi\nimport pulumi_vultr as vultr\n\nmy_server = vultr.get_bare_metal_server(filters=[vultr.GetBareMetalServerFilterArgs(\n    name=\"label\",\n    values=[\"my-server-label\"],\n)])\n```\n```csharp\nusing Pulumi;\nusing Vultr = Pulumi.Vultr;\n\nclass MyStack : Stack\n{\n    public MyStack()\n    {\n        var myServer = Output.Create(Vultr.GetBareMetalServer.InvokeAsync(new Vultr.GetBareMetalServerArgs\n        {\n            Filters = \n            {\n                new Vultr.Inputs.GetBareMetalServerFilterArgs\n                {\n                    Name = \"label\",\n                    Values = \n                    {\n                        \"my-server-label\",\n                    },\n                },\n            },\n        }));\n    }\n\n}\n```\n```go\npackage main\n\nimport (\n\t\"github.com/pulumi/pulumi-vultr/sdk/go/vultr\"\n\t\"github.com/pulumi/pulumi/sdk/v3/go/pulumi\"\n)\n\nfunc main() {\n\tpulumi.Run(func(ctx *pulumi.Context) error {\n\t\t_, err := vultr.LookupBareMetalServer(ctx, \u0026GetBareMetalServerArgs{\n\t\t\tFilters: []GetBareMetalServerFilter{\n\t\t\t\tGetBareMetalServerFilter{\n\t\t\t\t\tName: \"label\",\n\t\t\t\t\tValues: []string{\n\t\t\t\t\t\t\"my-server-label\",\n\t\t\t\t\t},\n\t\t\t\t},\n\t\t\t},\n\t\t}, nil)\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\treturn nil\n\t})\n}\n```\n{{% /example %}}\n{{% /examples %}}",
            "inputs": {
                "description": "A collection of arguments for invoking getBareMetalServer.\n",
                "properties": {
                    "filters": {
                        "type": "array",
                        "items": {
                            "$ref": "#/types/vultr:index/getBareMetalServerFilter:getBareMetalServerFilter"
                        },
                        "description": "Query parameters for finding servers.\n"
                    }
                },
                "type": "object"
            },
            "outputs": {
                "description": "A collection of values returned by getBareMetalServer.\n",
                "properties": {
                    "appId": {
                        "type": "integer",
                        "description": "The server's application ID.\n"
                    },
                    "cpuCount": {
                        "type": "integer",
                        "description": "The number of CPUs available on the server.\n"
                    },
                    "dateCreated": {
                        "type": "string",
                        "description": "The date the server was added to your Vultr account.\n"
                    },
                    "disk": {
                        "type": "string",
                        "description": "The description of the disk(s) on the server.\n"
                    },
                    "features": {
                        "type": "array",
                        "items": {
                            "type": "string"
                        }
                    },
                    "filters": {
                        "type": "array",
                        "items": {
                            "$ref": "#/types/vultr:index/getBareMetalServerFilter:getBareMetalServerFilter"
                        }
                    },
                    "gatewayV4": {
                        "type": "string",
                        "description": "The server's IPv4 gateway.\n"
                    },
                    "id": {
                        "type": "string",
                        "description": "The provider-assigned unique ID for this managed resource.\n"
                    },
                    "imageId": {
                        "type": "string",
                        "description": "The Marketplace ID for this application.\n"
                    },
                    "label": {
                        "type": "string",
                        "description": "The server's label.\n"
                    },
                    "macAddress": {
                        "type": "string"
                    },
                    "mainIp": {
                        "type": "string",
                        "description": "The server's main IP address.\n"
                    },
                    "netmaskV4": {
                        "type": "string",
                        "description": "The server's IPv4 netmask.\n"
                    },
                    "os": {
                        "type": "string",
                        "description": "The operating system of the server.\n"
                    },
                    "osId": {
                        "type": "integer",
                        "description": "The server's operating system ID.\n"
                    },
                    "plan": {
                        "type": "string",
                        "description": "The server's plan ID.\n"
                    },
                    "ram": {
                        "type": "string",
                        "description": "The amount of memory available on the server in MB.\n"
                    },
                    "region": {
                        "type": "string",
                        "description": "The region ID of the server.\n"
                    },
                    "status": {
                        "type": "string",
                        "description": "The status of the server's subscription.\n"
                    },
                    "tag": {
                        "type": "string",
                        "description": "The server's tag.\n"
                    },
                    "v6MainIp": {
                        "type": "string"
                    },
                    "v6Network": {
                        "type": "string"
                    },
                    "v6NetworkSize": {
                        "type": "integer"
                    }
                },
                "type": "object",
                "required": [
                    "appId",
                    "cpuCount",
                    "dateCreated",
                    "disk",
                    "features",
                    "gatewayV4",
                    "imageId",
                    "label",
                    "macAddress",
                    "mainIp",
                    "netmaskV4",
                    "os",
                    "osId",
                    "plan",
                    "ram",
                    "region",
                    "status",
                    "tag",
                    "v6MainIp",
                    "v6Network",
                    "v6NetworkSize",
                    "id"
                ]
            }
        },
        "vultr:index/getBlockStorage:getBlockStorage": {
            "description": "Get information about a Vultr block storage subscription.\n\n{{% examples %}}\n## Example Usage\n{{% example %}}\n\nGet the information for a block storage subscription by `label`:\n\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as vultr from \"@pulumi/vultr\";\n\nconst myBlockStorage = pulumi.output(vultr.getBlockStorage({\n    filters: [{\n        name: \"label\",\n        values: [\"my-block-storage-label\"],\n    }],\n}));\n```\n```python\nimport pulumi\nimport pulumi_vultr as vultr\n\nmy_block_storage = vultr.get_block_storage(filters=[vultr.GetBlockStorageFilterArgs(\n    name=\"label\",\n    values=[\"my-block-storage-label\"],\n)])\n```\n```csharp\nusing Pulumi;\nusing Vultr = Pulumi.Vultr;\n\nclass MyStack : Stack\n{\n    public MyStack()\n    {\n        var myBlockStorage = Output.Create(Vultr.GetBlockStorage.InvokeAsync(new Vultr.GetBlockStorageArgs\n        {\n            Filters = \n            {\n                new Vultr.Inputs.GetBlockStorageFilterArgs\n                {\n                    Name = \"label\",\n                    Values = \n                    {\n                        \"my-block-storage-label\",\n                    },\n                },\n            },\n        }));\n    }\n\n}\n```\n```go\npackage main\n\nimport (\n\t\"github.com/pulumi/pulumi-vultr/sdk/go/vultr\"\n\t\"github.com/pulumi/pulumi/sdk/v3/go/pulumi\"\n)\n\nfunc main() {\n\tpulumi.Run(func(ctx *pulumi.Context) error {\n\t\t_, err := vultr.LookupBlockStorage(ctx, \u0026GetBlockStorageArgs{\n\t\t\tFilters: []GetBlockStorageFilter{\n\t\t\t\tGetBlockStorageFilter{\n\t\t\t\t\tName: \"label\",\n\t\t\t\t\tValues: []string{\n\t\t\t\t\t\t\"my-block-storage-label\",\n\t\t\t\t\t},\n\t\t\t\t},\n\t\t\t},\n\t\t}, nil)\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\treturn nil\n\t})\n}\n```\n{{% /example %}}\n{{% /examples %}}",
            "inputs": {
                "description": "A collection of arguments for invoking getBlockStorage.\n",
                "properties": {
                    "filters": {
                        "type": "array",
                        "items": {
                            "$ref": "#/types/vultr:index/getBlockStorageFilter:getBlockStorageFilter"
                        },
                        "description": "Query parameters for finding block storage subscriptions.\n"
                    }
                },
                "type": "object"
            },
            "outputs": {
                "description": "A collection of values returned by getBlockStorage.\n",
                "properties": {
                    "attachedToInstance": {
                        "type": "string",
                        "description": "The ID of the VPS the block storage subscription is attached to.\n"
                    },
                    "cost": {
                        "type": "integer",
                        "description": "The cost per month of the block storage subscription in USD.\n"
                    },
                    "dateCreated": {
                        "type": "string",
                        "description": "The date the block storage subscription was added to your Vultr account.\n"
                    },
                    "filters": {
                        "type": "array",
                        "items": {
                            "$ref": "#/types/vultr:index/getBlockStorageFilter:getBlockStorageFilter"
                        }
                    },
                    "id": {
                        "type": "string",
                        "description": "The provider-assigned unique ID for this managed resource.\n"
                    },
                    "label": {
                        "type": "string",
                        "description": "The label of the block storage subscription.\n"
                    },
                    "mountId": {
                        "type": "string",
                        "description": "An ID associated with the instance, when mounted the ID can be found in /dev/disk/by-id prefixed with virtio.\n"
                    },
                    "region": {
                        "type": "string",
                        "description": "The region ID of the block storage subscription.\n"
                    },
                    "sizeGb": {
                        "type": "integer",
                        "description": "The size of the block storage subscription in GB.\n"
                    },
                    "status": {
                        "type": "string",
                        "description": "The status of the block storage subscription.\n"
                    }
                },
                "type": "object",
                "required": [
                    "attachedToInstance",
                    "cost",
                    "dateCreated",
                    "label",
                    "mountId",
                    "region",
                    "sizeGb",
                    "status",
                    "id"
                ]
            }
        },
        "vultr:index/getDnsDomain:getDnsDomain": {
            "description": "Get information about a DNS domain associated with your Vultr account.\n\n{{% examples %}}\n## Example Usage\n{{% example %}}\n\nGet the information for a DNS domain:\n\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as vultr from \"@pulumi/vultr\";\n\nconst myDomain = pulumi.output(vultr.getDnsDomain({\n    domain: \"example.com\",\n}));\n```\n```python\nimport pulumi\nimport pulumi_vultr as vultr\n\nmy_domain = vultr.get_dns_domain(domain=\"example.com\")\n```\n```csharp\nusing Pulumi;\nusing Vultr = Pulumi.Vultr;\n\nclass MyStack : Stack\n{\n    public MyStack()\n    {\n        var myDomain = Output.Create(Vultr.GetDnsDomain.InvokeAsync(new Vultr.GetDnsDomainArgs\n        {\n            Domain = \"example.com\",\n        }));\n    }\n\n}\n```\n```go\npackage main\n\nimport (\n\t\"github.com/pulumi/pulumi-vultr/sdk/go/vultr\"\n\t\"github.com/pulumi/pulumi/sdk/v3/go/pulumi\"\n)\n\nfunc main() {\n\tpulumi.Run(func(ctx *pulumi.Context) error {\n\t\t_, err := vultr.LookupDnsDomain(ctx, \u0026GetDnsDomainArgs{\n\t\t\tDomain: \"example.com\",\n\t\t}, nil)\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\treturn nil\n\t})\n}\n```\n{{% /example %}}\n{{% /examples %}}",
            "inputs": {
                "description": "A collection of arguments for invoking getDnsDomain.\n",
                "properties": {
                    "domain": {
                        "type": "string",
                        "description": "The name you're searching for.\n"
                    }
                },
                "type": "object",
                "required": [
                    "domain"
                ]
            },
            "outputs": {
                "description": "A collection of values returned by getDnsDomain.\n",
                "properties": {
                    "dateCreated": {
                        "type": "string",
                        "description": "The date the DNS domain was added to your Vultr account.\n"
                    },
                    "dnsSec": {
                        "type": "string",
                        "description": "The Domain's DNSSEC status\n"
                    },
                    "domain": {
                        "type": "string",
                        "description": "Name of domain.\n"
                    },
                    "id": {
                        "type": "string",
                        "description": "The provider-assigned unique ID for this managed resource.\n"
                    }
                },
                "type": "object",
                "required": [
                    "dateCreated",
                    "dnsSec",
                    "domain",
                    "id"
                ]
            }
        },
        "vultr:index/getFirewallGroup:getFirewallGroup": {
            "description": "Get information about a firewall group on your Vultr account.\n\n{{% examples %}}\n## Example Usage\n{{% example %}}\n\nGet the information for a firewall group by `description`:\n\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as vultr from \"@pulumi/vultr\";\n\nconst myFwg = pulumi.output(vultr.getFirewallGroup({\n    filters: [{\n        name: \"description\",\n        values: [\"fwg-description\"],\n    }],\n}));\n```\n```python\nimport pulumi\nimport pulumi_vultr as vultr\n\nmy_fwg = vultr.get_firewall_group(filters=[vultr.GetFirewallGroupFilterArgs(\n    name=\"description\",\n    values=[\"fwg-description\"],\n)])\n```\n```csharp\nusing Pulumi;\nusing Vultr = Pulumi.Vultr;\n\nclass MyStack : Stack\n{\n    public MyStack()\n    {\n        var myFwg = Output.Create(Vultr.GetFirewallGroup.InvokeAsync(new Vultr.GetFirewallGroupArgs\n        {\n            Filters = \n            {\n                new Vultr.Inputs.GetFirewallGroupFilterArgs\n                {\n                    Name = \"description\",\n                    Values = \n                    {\n                        \"fwg-description\",\n                    },\n                },\n            },\n        }));\n    }\n\n}\n```\n```go\npackage main\n\nimport (\n\t\"github.com/pulumi/pulumi-vultr/sdk/go/vultr\"\n\t\"github.com/pulumi/pulumi/sdk/v3/go/pulumi\"\n)\n\nfunc main() {\n\tpulumi.Run(func(ctx *pulumi.Context) error {\n\t\t_, err := vultr.LookupFirewallGroup(ctx, \u0026GetFirewallGroupArgs{\n\t\t\tFilters: []GetFirewallGroupFilter{\n\t\t\t\tGetFirewallGroupFilter{\n\t\t\t\t\tName: \"description\",\n\t\t\t\t\tValues: []string{\n\t\t\t\t\t\t\"fwg-description\",\n\t\t\t\t\t},\n\t\t\t\t},\n\t\t\t},\n\t\t}, nil)\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\treturn nil\n\t})\n}\n```\n{{% /example %}}\n{{% /examples %}}",
            "inputs": {
                "description": "A collection of arguments for invoking getFirewallGroup.\n",
                "properties": {
                    "filters": {
                        "type": "array",
                        "items": {
                            "$ref": "#/types/vultr:index/getFirewallGroupFilter:getFirewallGroupFilter"
                        },
                        "description": "Query parameters for finding firewall groups.\n"
                    }
                },
                "type": "object"
            },
            "outputs": {
                "description": "A collection of values returned by getFirewallGroup.\n",
                "properties": {
                    "dateCreated": {
                        "type": "string",
                        "description": "The date the firewall group was added to your Vultr account.\n"
                    },
                    "dateModified": {
                        "type": "string",
                        "description": "The date the firewall group was last modified.\n"
                    },
                    "description": {
                        "type": "string",
                        "description": "The description of the firewall group.\n"
                    },
                    "filters": {
                        "type": "array",
                        "items": {
                            "$ref": "#/types/vultr:index/getFirewallGroupFilter:getFirewallGroupFilter"
                        }
                    },
                    "id": {
                        "type": "string",
                        "description": "The provider-assigned unique ID for this managed resource.\n"
                    },
                    "instanceCount": {
                        "type": "integer",
                        "description": "The number of instances this firewall group is applied to.\n"
                    },
                    "maxRuleCount": {
                        "type": "integer",
                        "description": "The maximum number of rules this firewall group can have.\n"
                    },
                    "ruleCount": {
                        "type": "integer",
                        "description": "The number of rules added to this firewall group.\n"
                    }
                },
                "type": "object",
                "required": [
                    "dateCreated",
                    "dateModified",
                    "description",
                    "instanceCount",
                    "maxRuleCount",
                    "ruleCount",
                    "id"
                ]
            }
        },
        "vultr:index/getInstance:getInstance": {
            "description": "Get information about a Vultr instance.\n\n{{% examples %}}\n## Example Usage\n{{% example %}}\n\nGet the information for a instance by `label`:\n\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as vultr from \"@pulumi/vultr\";\n\nconst myInstance = pulumi.output(vultr.getInstance({\n    filters: [{\n        name: \"label\",\n        values: [\"my-instance-label\"],\n    }],\n}));\n```\n```python\nimport pulumi\nimport pulumi_vultr as vultr\n\nmy_instance = vultr.get_instance(filters=[vultr.GetInstanceFilterArgs(\n    name=\"label\",\n    values=[\"my-instance-label\"],\n)])\n```\n```csharp\nusing Pulumi;\nusing Vultr = Pulumi.Vultr;\n\nclass MyStack : Stack\n{\n    public MyStack()\n    {\n        var myInstance = Output.Create(Vultr.GetInstance.InvokeAsync(new Vultr.GetInstanceArgs\n        {\n            Filters = \n            {\n                new Vultr.Inputs.GetInstanceFilterArgs\n                {\n                    Name = \"label\",\n                    Values = \n                    {\n                        \"my-instance-label\",\n                    },\n                },\n            },\n        }));\n    }\n\n}\n```\n```go\npackage main\n\nimport (\n\t\"github.com/pulumi/pulumi-vultr/sdk/go/vultr\"\n\t\"github.com/pulumi/pulumi/sdk/v3/go/pulumi\"\n)\n\nfunc main() {\n\tpulumi.Run(func(ctx *pulumi.Context) error {\n\t\t_, err := vultr.LookupInstance(ctx, \u0026GetInstanceArgs{\n\t\t\tFilters: []GetInstanceFilter{\n\t\t\t\tGetInstanceFilter{\n\t\t\t\t\tName: \"label\",\n\t\t\t\t\tValues: []string{\n\t\t\t\t\t\t\"my-instance-label\",\n\t\t\t\t\t},\n\t\t\t\t},\n\t\t\t},\n\t\t}, nil)\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\treturn nil\n\t})\n}\n```\n{{% /example %}}\n{{% /examples %}}",
            "inputs": {
                "description": "A collection of arguments for invoking getInstance.\n",
                "properties": {
                    "filters": {
                        "type": "array",
                        "items": {
                            "$ref": "#/types/vultr:index/getInstanceFilter:getInstanceFilter"
                        },
                        "description": "Query parameters for finding instances.\n"
                    }
                },
                "type": "object"
            },
            "outputs": {
                "description": "A collection of values returned by getInstance.\n",
                "properties": {
                    "allowedBandwidth": {
                        "type": "integer",
                        "description": "The server's allowed bandwidth usage in GB.\n"
                    },
                    "appId": {
                        "type": "integer",
                        "description": "The server's application ID.\n"
                    },
                    "backups": {
                        "type": "string"
                    },
                    "backupsSchedule": {
                        "type": "object",
                        "additionalProperties": {
                            "$ref": "pulumi.json#/Any"
                        },
                        "description": "The current configuration for backups\n"
                    },
                    "dateCreated": {
                        "type": "string",
                        "description": "The date the server was added to your Vultr account.\n"
                    },
                    "disk": {
                        "type": "integer",
                        "description": "The description of the disk(s) on the server.\n"
                    },
                    "features": {
                        "type": "array",
                        "items": {
                            "type": "string"
                        },
                        "description": "Array of which features are enabled.\n"
                    },
                    "filters": {
                        "type": "array",
                        "items": {
                            "$ref": "#/types/vultr:index/getInstanceFilter:getInstanceFilter"
                        }
                    },
                    "firewallGroupId": {
                        "type": "string",
                        "description": "The ID of the firewall group applied to this server.\n"
                    },
                    "gatewayV4": {
                        "type": "string",
                        "description": "The server's IPv4 gateway.\n"
                    },
                    "hostname": {
                        "type": "string",
                        "description": "The hostname assigned to the server.\n"
                    },
                    "id": {
                        "type": "string",
                        "description": "The provider-assigned unique ID for this managed resource.\n"
                    },
                    "imageId": {
                        "type": "string",
                        "description": "The Marketplace ID for this application.\n"
                    },
                    "internalIp": {
                        "type": "string",
                        "description": "The server's internal IP address.\n"
                    },
                    "kvm": {
                        "type": "string",
                        "description": "The server's current KVM URL. This URL will change periodically. It is not advised to cache this value.\n"
                    },
                    "label": {
                        "type": "string",
                        "description": "The server's label.\n"
                    },
                    "location": {
                        "type": "string"
                    },
                    "mainIp": {
                        "type": "string",
                        "description": "The server's main IP address.\n"
                    },
                    "netmaskV4": {
                        "type": "string",
                        "description": "The server's IPv4 netmask.\n"
                    },
                    "os": {
                        "type": "string",
                        "description": "The operating system of the instance.\n"
                    },
                    "osId": {
                        "type": "integer",
                        "description": "The server's operating system ID.\n"
                    },
                    "plan": {
                        "type": "string",
                        "description": "The server's plan ID.\n"
                    },
                    "powerStatus": {
                        "type": "string",
                        "description": "Whether the server is powered on or not.\n"
                    },
                    "ram": {
                        "type": "integer",
                        "description": "The amount of memory available on the instance in MB.\n"
                    },
                    "region": {
                        "type": "string",
                        "description": "The region ID of the server.\n"
                    },
                    "serverStatus": {
                        "type": "string",
                        "description": "A more detailed server status (none, locked, installingbooting, isomounting, ok).\n"
                    },
                    "status": {
                        "type": "string",
                        "description": "The status of the server's subscription.\n"
                    },
                    "tag": {
                        "type": "string",
                        "description": "The server's tag.\n"
                    },
                    "v6MainIp": {
                        "type": "string",
                        "description": "The main IPv6 network address.\n"
                    },
                    "v6Network": {
                        "type": "string",
                        "description": "The IPv6 subnet.\n"
                    },
                    "v6NetworkSize": {
                        "type": "integer",
                        "description": "The IPv6 network size in bits.\n"
                    },
                    "vcpuCount": {
                        "type": "integer",
                        "description": "The number of virtual CPUs available on the server.\n"
                    }
                },
                "type": "object",
                "required": [
                    "allowedBandwidth",
                    "appId",
                    "backups",
                    "backupsSchedule",
                    "dateCreated",
                    "disk",
                    "features",
                    "firewallGroupId",
                    "gatewayV4",
                    "hostname",
                    "imageId",
                    "internalIp",
                    "kvm",
                    "label",
                    "location",
                    "mainIp",
                    "netmaskV4",
                    "os",
                    "osId",
                    "plan",
                    "powerStatus",
                    "ram",
                    "region",
                    "serverStatus",
                    "status",
                    "tag",
                    "v6MainIp",
                    "v6Network",
                    "v6NetworkSize",
                    "vcpuCount",
                    "id"
                ]
            }
        },
        "vultr:index/getInstanceIpv4:getInstanceIpv4": {
            "description": "Get information about a Vultr instance IPv4.\n\n{{% examples %}}\n## Example Usage\n{{% example %}}\n\nGet the information for an IPv4 address by `instance_id`:\n\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as vultr from \"@pulumi/vultr\";\n\nconst myInstanceIpv4 = pulumi.output(vultr.getInstanceIpv4({\n    filters: [{\n        name: \"ip\",\n        values: [\"123.123.123.123\"],\n    }],\n}));\n```\n```python\nimport pulumi\nimport pulumi_vultr as vultr\n\nmy_instance_ipv4 = vultr.get_instance_ipv4(filters=[vultr.GetInstanceIpv4FilterArgs(\n    name=\"ip\",\n    values=[\"123.123.123.123\"],\n)])\n```\n```csharp\nusing Pulumi;\nusing Vultr = Pulumi.Vultr;\n\nclass MyStack : Stack\n{\n    public MyStack()\n    {\n        var myInstanceIpv4 = Output.Create(Vultr.GetInstanceIpv4.InvokeAsync(new Vultr.GetInstanceIpv4Args\n        {\n            Filters = \n            {\n                new Vultr.Inputs.GetInstanceIpv4FilterArgs\n                {\n                    Name = \"ip\",\n                    Values = \n                    {\n                        \"123.123.123.123\",\n                    },\n                },\n            },\n        }));\n    }\n\n}\n```\n```go\npackage main\n\nimport (\n\t\"github.com/pulumi/pulumi-vultr/sdk/go/vultr\"\n\t\"github.com/pulumi/pulumi/sdk/v3/go/pulumi\"\n)\n\nfunc main() {\n\tpulumi.Run(func(ctx *pulumi.Context) error {\n\t\t_, err := vultr.GetInstanceIpv4(ctx, \u0026GetInstanceIpv4Args{\n\t\t\tFilters: []GetInstanceIpv4Filter{\n\t\t\t\tGetInstanceIpv4Filter{\n\t\t\t\t\tName: \"ip\",\n\t\t\t\t\tValues: []string{\n\t\t\t\t\t\t\"123.123.123.123\",\n\t\t\t\t\t},\n\t\t\t\t},\n\t\t\t},\n\t\t}, nil)\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\treturn nil\n\t})\n}\n```\n{{% /example %}}\n{{% /examples %}}",
            "inputs": {
                "description": "A collection of arguments for invoking getInstanceIpv4.\n",
                "properties": {
                    "filters": {
                        "type": "array",
                        "items": {
                            "$ref": "#/types/vultr:index/getInstanceIpv4Filter:getInstanceIpv4Filter"
                        },
                        "description": "Query parameters for finding IPv4 address.\n"
                    }
                },
                "type": "object"
            },
            "outputs": {
                "description": "A collection of values returned by getInstanceIpv4.\n",
                "properties": {
                    "filters": {
                        "type": "array",
                        "items": {
                            "$ref": "#/types/vultr:index/getInstanceIpv4Filter:getInstanceIpv4Filter"
                        }
                    },
                    "gateway": {
                        "type": "string",
                        "description": "The gateway IP address.\n"
                    },
                    "id": {
                        "type": "string",
                        "description": "The provider-assigned unique ID for this managed resource.\n"
                    },
                    "instanceId": {
                        "type": "string",
                        "description": "The ID of the instance the IPv4 address.\n"
                    },
                    "ip": {
                        "type": "string",
                        "description": "The IPv4 address in canonical format.\n"
                    },
                    "netmask": {
                        "type": "string",
                        "description": "The IPv4 netmask in dot-decimal notation.\n"
                    },
                    "reverse": {
                        "type": "string",
                        "description": "The reverse DNS information for this IP address.\n"
                    }
                },
                "type": "object",
                "required": [
                    "gateway",
                    "instanceId",
                    "ip",
                    "netmask",
                    "reverse",
                    "id"
                ]
            }
        },
        "vultr:index/getIsoPrivate:getIsoPrivate": {
            "description": "Get information about an ISO file uploaded to your Vultr account.\n\n{{% examples %}}\n## Example Usage\n{{% example %}}\n\nGet the information for a ISO file by `filename`:\n\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as vultr from \"@pulumi/vultr\";\n\nconst myIso = pulumi.output(vultr.getIsoPrivate({\n    filters: [{\n        name: \"filename\",\n        values: [\"my-iso-filename\"],\n    }],\n}));\n```\n```python\nimport pulumi\nimport pulumi_vultr as vultr\n\nmy_iso = vultr.get_iso_private(filters=[vultr.GetIsoPrivateFilterArgs(\n    name=\"filename\",\n    values=[\"my-iso-filename\"],\n)])\n```\n```csharp\nusing Pulumi;\nusing Vultr = Pulumi.Vultr;\n\nclass MyStack : Stack\n{\n    public MyStack()\n    {\n        var myIso = Output.Create(Vultr.GetIsoPrivate.InvokeAsync(new Vultr.GetIsoPrivateArgs\n        {\n            Filters = \n            {\n                new Vultr.Inputs.GetIsoPrivateFilterArgs\n                {\n                    Name = \"filename\",\n                    Values = \n                    {\n                        \"my-iso-filename\",\n                    },\n                },\n            },\n        }));\n    }\n\n}\n```\n```go\npackage main\n\nimport (\n\t\"github.com/pulumi/pulumi-vultr/sdk/go/vultr\"\n\t\"github.com/pulumi/pulumi/sdk/v3/go/pulumi\"\n)\n\nfunc main() {\n\tpulumi.Run(func(ctx *pulumi.Context) error {\n\t\t_, err := vultr.LookupIsoPrivate(ctx, \u0026GetIsoPrivateArgs{\n\t\t\tFilters: []GetIsoPrivateFilter{\n\t\t\t\tGetIsoPrivateFilter{\n\t\t\t\t\tName: \"filename\",\n\t\t\t\t\tValues: []string{\n\t\t\t\t\t\t\"my-iso-filename\",\n\t\t\t\t\t},\n\t\t\t\t},\n\t\t\t},\n\t\t}, nil)\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\treturn nil\n\t})\n}\n```\n{{% /example %}}\n{{% /examples %}}",
            "inputs": {
                "description": "A collection of arguments for invoking getIsoPrivate.\n",
                "properties": {
                    "filters": {
                        "type": "array",
                        "items": {
                            "$ref": "#/types/vultr:index/getIsoPrivateFilter:getIsoPrivateFilter"
                        },
                        "description": "Query parameters for finding ISO files.\n"
                    }
                },
                "type": "object"
            },
            "outputs": {
                "description": "A collection of values returned by getIsoPrivate.\n",
                "properties": {
                    "dateCreated": {
                        "type": "string",
                        "description": "The date the ISO file was added to your Vultr account.\n"
                    },
                    "filename": {
                        "type": "string",
                        "description": "The ISO file's filename.\n"
                    },
                    "filters": {
                        "type": "array",
                        "items": {
                            "$ref": "#/types/vultr:index/getIsoPrivateFilter:getIsoPrivateFilter"
                        }
                    },
                    "id": {
                        "type": "string",
                        "description": "The provider-assigned unique ID for this managed resource.\n"
                    },
                    "md5sum": {
                        "type": "string",
                        "description": "The md5 hash of the ISO file.\n"
                    },
                    "sha512sum": {
                        "type": "string",
                        "description": "The sha512 hash of the ISO file.\n"
                    },
                    "size": {
                        "type": "integer",
                        "description": "The size of the ISO file in bytes.\n"
                    },
                    "status": {
                        "type": "string",
                        "description": "The status of the ISO file.\n"
                    }
                },
                "type": "object",
                "required": [
                    "dateCreated",
                    "filename",
                    "md5sum",
                    "sha512sum",
                    "size",
                    "status",
                    "id"
                ]
            }
        },
        "vultr:index/getIsoPublic:getIsoPublic": {
            "description": "Get information about an ISO file offered in the Vultr ISO library.\n\n{{% examples %}}\n## Example Usage\n{{% example %}}\n\nGet the information for a ISO file by `description`:\n\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as vultr from \"@pulumi/vultr\";\n\nconst myIso = pulumi.output(vultr.getIsoPublic({\n    filters: [{\n        name: \"description\",\n        values: [\"iso-description\"],\n    }],\n}));\n```\n```python\nimport pulumi\nimport pulumi_vultr as vultr\n\nmy_iso = vultr.get_iso_public(filters=[vultr.GetIsoPublicFilterArgs(\n    name=\"description\",\n    values=[\"iso-description\"],\n)])\n```\n```csharp\nusing Pulumi;\nusing Vultr = Pulumi.Vultr;\n\nclass MyStack : Stack\n{\n    public MyStack()\n    {\n        var myIso = Output.Create(Vultr.GetIsoPublic.InvokeAsync(new Vultr.GetIsoPublicArgs\n        {\n            Filters = \n            {\n                new Vultr.Inputs.GetIsoPublicFilterArgs\n                {\n                    Name = \"description\",\n                    Values = \n                    {\n                        \"iso-description\",\n                    },\n                },\n            },\n        }));\n    }\n\n}\n```\n```go\npackage main\n\nimport (\n\t\"github.com/pulumi/pulumi-vultr/sdk/go/vultr\"\n\t\"github.com/pulumi/pulumi/sdk/v3/go/pulumi\"\n)\n\nfunc main() {\n\tpulumi.Run(func(ctx *pulumi.Context) error {\n\t\t_, err := vultr.GetIsoPublic(ctx, \u0026GetIsoPublicArgs{\n\t\t\tFilters: []GetIsoPublicFilter{\n\t\t\t\tGetIsoPublicFilter{\n\t\t\t\t\tName: \"description\",\n\t\t\t\t\tValues: []string{\n\t\t\t\t\t\t\"iso-description\",\n\t\t\t\t\t},\n\t\t\t\t},\n\t\t\t},\n\t\t}, nil)\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\treturn nil\n\t})\n}\n```\n{{% /example %}}\n{{% /examples %}}",
            "inputs": {
                "description": "A collection of arguments for invoking getIsoPublic.\n",
                "properties": {
                    "filters": {
                        "type": "array",
                        "items": {
                            "$ref": "#/types/vultr:index/getIsoPublicFilter:getIsoPublicFilter"
                        },
                        "description": "Query parameters for finding ISO files.\n"
                    }
                },
                "type": "object"
            },
            "outputs": {
                "description": "A collection of values returned by getIsoPublic.\n",
                "properties": {
                    "description": {
                        "type": "string",
                        "description": "The description of the ISO file.\n"
                    },
                    "filters": {
                        "type": "array",
                        "items": {
                            "$ref": "#/types/vultr:index/getIsoPublicFilter:getIsoPublicFilter"
                        }
                    },
                    "id": {
                        "type": "string",
                        "description": "The provider-assigned unique ID for this managed resource.\n"
                    },
                    "md5sum": {
                        "type": "string",
                        "description": "The MD5Sum of the ISO file.\n"
                    },
                    "name": {
                        "type": "string",
                        "description": "The ISO file's name.\n"
                    }
                },
                "type": "object",
                "required": [
                    "description",
                    "md5sum",
                    "name",
                    "id"
                ]
            }
        },
        "vultr:index/getLoadBalancer:getLoadBalancer": {
            "description": "Get information about a Vultr load balancer.\n\n{{% examples %}}\n## Example Usage\n{{% example %}}\n\nGet the information for a load balancer by `label`:\n\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as vultr from \"@pulumi/vultr\";\n\nconst myLb = pulumi.output(vultr.getLoadBalancer({\n    filters: [{\n        name: \"label\",\n        values: [\"my-lb-label\"],\n    }],\n}));\n```\n```python\nimport pulumi\nimport pulumi_vultr as vultr\n\nmy_lb = vultr.get_load_balancer(filters=[vultr.GetLoadBalancerFilterArgs(\n    name=\"label\",\n    values=[\"my-lb-label\"],\n)])\n```\n```csharp\nusing Pulumi;\nusing Vultr = Pulumi.Vultr;\n\nclass MyStack : Stack\n{\n    public MyStack()\n    {\n        var myLb = Output.Create(Vultr.GetLoadBalancer.InvokeAsync(new Vultr.GetLoadBalancerArgs\n        {\n            Filters = \n            {\n                new Vultr.Inputs.GetLoadBalancerFilterArgs\n                {\n                    Name = \"label\",\n                    Values = \n                    {\n                        \"my-lb-label\",\n                    },\n                },\n            },\n        }));\n    }\n\n}\n```\n```go\npackage main\n\nimport (\n\t\"github.com/pulumi/pulumi-vultr/sdk/go/vultr\"\n\t\"github.com/pulumi/pulumi/sdk/v3/go/pulumi\"\n)\n\nfunc main() {\n\tpulumi.Run(func(ctx *pulumi.Context) error {\n\t\t_, err := vultr.LookupLoadBalancer(ctx, \u0026GetLoadBalancerArgs{\n\t\t\tFilters: []GetLoadBalancerFilter{\n\t\t\t\tGetLoadBalancerFilter{\n\t\t\t\t\tName: \"label\",\n\t\t\t\t\tValues: []string{\n\t\t\t\t\t\t\"my-lb-label\",\n\t\t\t\t\t},\n\t\t\t\t},\n\t\t\t},\n\t\t}, nil)\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\treturn nil\n\t})\n}\n```\n{{% /example %}}\n{{% /examples %}}",
            "inputs": {
                "description": "A collection of arguments for invoking getLoadBalancer.\n",
                "properties": {
                    "filters": {
                        "type": "array",
                        "items": {
                            "$ref": "#/types/vultr:index/getLoadBalancerFilter:getLoadBalancerFilter"
                        },
                        "description": "Query parameters for finding load balancers.\n"
                    },
                    "proxyProtocol": {
                        "type": "boolean",
                        "description": "Boolean value that indicates if Proxy Protocol is enabled.\n"
                    }
                },
                "type": "object"
            },
            "outputs": {
                "description": "A collection of values returned by getLoadBalancer.\n",
                "properties": {
                    "attachedInstances": {
                        "type": "array",
                        "items": {
                            "type": "string"
                        },
                        "description": "Array of instances that are currently attached to the load balancer.\n"
                    },
                    "balancingAlgorithm": {
                        "type": "string",
                        "description": "The balancing algorithm for your load balancer.\n"
                    },
                    "cookieName": {
                        "type": "string",
                        "description": "Name for your given sticky session.\n"
                    },
                    "dateCreated": {
                        "type": "string"
                    },
                    "filters": {
                        "type": "array",
                        "items": {
                            "$ref": "#/types/vultr:index/getLoadBalancerFilter:getLoadBalancerFilter"
                        }
                    },
                    "firewallRules": {
                        "type": "array",
                        "items": {
                            "type": "object",
                            "additionalProperties": {
                                "$ref": "pulumi.json#/Any"
                            }
                        }
                    },
                    "forwardingRules": {
                        "type": "array",
                        "items": {
                            "type": "object",
                            "additionalProperties": {
                                "$ref": "pulumi.json#/Any"
                            }
                        },
                        "description": "Defines the forwarding rules for a load balancer. The configuration of a `forwarding_rules` is listened below.\n"
                    },
                    "hasSsl": {
                        "type": "boolean",
                        "description": "Boolean value that indicates if SSL is enabled.\n"
                    },
                    "healthCheck": {
                        "type": "object",
                        "additionalProperties": {
                            "$ref": "pulumi.json#/Any"
                        },
                        "description": "Defines the way load balancers should check for health. The configuration of a `health_check` is listed below.\n"
                    },
                    "id": {
                        "type": "string",
                        "description": "The provider-assigned unique ID for this managed resource.\n"
                    },
                    "ipv4": {
                        "type": "string",
                        "description": "IPv4 address for your load balancer.\n"
                    },
                    "ipv6": {
                        "type": "string",
                        "description": "IPv6 address for your load balancer.\n"
                    },
                    "label": {
                        "type": "string",
                        "description": "The load balancers label.\n"
                    },
                    "privateNetwork": {
                        "type": "string",
                        "description": "Defines the private network the load balancer is attached to.\n"
                    },
                    "proxyProtocol": {
                        "type": "boolean",
                        "description": "Boolean value that indicates if Proxy Protocol is enabled.\n"
                    },
                    "region": {
                        "type": "string",
                        "description": "The region your load balancer is deployed in.\n"
                    },
                    "ssl": {
                        "type": "object",
                        "additionalProperties": {
                            "$ref": "pulumi.json#/Any"
                        }
                    },
                    "sslRedirect": {
                        "type": "boolean",
                        "description": "Boolean value that indicates if HTTP calls will be redirected to HTTPS.\n"
                    },
                    "status": {
                        "type": "string",
                        "description": "Current status for the load balancer\n"
                    }
                },
                "type": "object",
                "required": [
                    "attachedInstances",
                    "balancingAlgorithm",
                    "cookieName",
                    "dateCreated",
                    "firewallRules",
                    "forwardingRules",
                    "hasSsl",
                    "healthCheck",
                    "ipv4",
                    "ipv6",
                    "label",
                    "privateNetwork",
                    "region",
                    "ssl",
                    "sslRedirect",
                    "status",
                    "id"
                ]
            }
        },
        "vultr:index/getObjectStorage:getObjectStorage": {
            "description": "Get information about an Object Storage subscription on Vultr.\n\n{{% examples %}}\n## Example Usage\n{{% example %}}\n\nGet the information for an object storage subscription by `label`:\n\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as vultr from \"@pulumi/vultr\";\n\nconst s3 = pulumi.output(vultr.getObjectStorage({\n    filters: [{\n        name: \"label\",\n        values: [\"my-s3\"],\n    }],\n}));\n```\n```python\nimport pulumi\nimport pulumi_vultr as vultr\n\ns3 = vultr.get_object_storage(filters=[vultr.GetObjectStorageFilterArgs(\n    name=\"label\",\n    values=[\"my-s3\"],\n)])\n```\n```csharp\nusing Pulumi;\nusing Vultr = Pulumi.Vultr;\n\nclass MyStack : Stack\n{\n    public MyStack()\n    {\n        var s3 = Output.Create(Vultr.GetObjectStorage.InvokeAsync(new Vultr.GetObjectStorageArgs\n        {\n            Filters = \n            {\n                new Vultr.Inputs.GetObjectStorageFilterArgs\n                {\n                    Name = \"label\",\n                    Values = \n                    {\n                        \"my-s3\",\n                    },\n                },\n            },\n        }));\n    }\n\n}\n```\n```go\npackage main\n\nimport (\n\t\"github.com/pulumi/pulumi-vultr/sdk/go/vultr\"\n\t\"github.com/pulumi/pulumi/sdk/v3/go/pulumi\"\n)\n\nfunc main() {\n\tpulumi.Run(func(ctx *pulumi.Context) error {\n\t\t_, err := vultr.LookupObjectStorage(ctx, \u0026GetObjectStorageArgs{\n\t\t\tFilters: []GetObjectStorageFilter{\n\t\t\t\tGetObjectStorageFilter{\n\t\t\t\t\tName: \"label\",\n\t\t\t\t\tValues: []string{\n\t\t\t\t\t\t\"my-s3\",\n\t\t\t\t\t},\n\t\t\t\t},\n\t\t\t},\n\t\t}, nil)\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\treturn nil\n\t})\n}\n```\n{{% /example %}}\n{{% /examples %}}",
            "inputs": {
                "description": "A collection of arguments for invoking getObjectStorage.\n",
                "properties": {
                    "filters": {
                        "type": "array",
                        "items": {
                            "$ref": "#/types/vultr:index/getObjectStorageFilter:getObjectStorageFilter"
                        },
                        "description": "Query parameters for finding operating systems.\n"
                    }
                },
                "type": "object"
            },
            "outputs": {
                "description": "A collection of values returned by getObjectStorage.\n",
                "properties": {
                    "clusterId": {
                        "type": "integer",
                        "description": "The identifying cluster ID.\n"
                    },
                    "dateCreated": {
                        "type": "string",
                        "description": "Date of creation for the object storage subscription.\n"
                    },
                    "filters": {
                        "type": "array",
                        "items": {
                            "$ref": "#/types/vultr:index/getObjectStorageFilter:getObjectStorageFilter"
                        }
                    },
                    "id": {
                        "type": "string",
                        "description": "The provider-assigned unique ID for this managed resource.\n"
                    },
                    "label": {
                        "type": "string",
                        "description": "The label of the object storage subscription.\n"
                    },
                    "location": {
                        "type": "string",
                        "description": "The location which this subscription resides in.\n"
                    },
                    "region": {
                        "type": "string",
                        "description": "The region ID of the object storage subscription.\n"
                    },
                    "s3AccessKey": {
                        "type": "string",
                        "description": "Your access key.\n"
                    },
                    "s3Hostname": {
                        "type": "string",
                        "description": "The hostname for this subscription.\n"
                    },
                    "s3SecretKey": {
                        "type": "string",
                        "description": "Your secret key.\n"
                    },
                    "status": {
                        "type": "string",
                        "description": "Current status of this object storage subscription.\n"
                    }
                },
                "type": "object",
                "required": [
                    "clusterId",
                    "dateCreated",
                    "label",
                    "location",
                    "region",
                    "s3AccessKey",
                    "s3Hostname",
                    "s3SecretKey",
                    "status",
                    "id"
                ]
            }
        },
        "vultr:index/getOs:getOs": {
            "description": "Get information about operating systems that can be launched when creating a Vultr VPS.\n\n{{% examples %}}\n## Example Usage\n{{% example %}}\n\nGet the information for an operating system by `name`:\n\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as vultr from \"@pulumi/vultr\";\n\nconst centos = pulumi.output(vultr.getOs({\n    filters: [{\n        name: \"name\",\n        values: [\"CentOS 7 x64\"],\n    }],\n}));\n```\n```python\nimport pulumi\nimport pulumi_vultr as vultr\n\ncentos = vultr.get_os(filters=[vultr.GetOsFilterArgs(\n    name=\"name\",\n    values=[\"CentOS 7 x64\"],\n)])\n```\n```csharp\nusing Pulumi;\nusing Vultr = Pulumi.Vultr;\n\nclass MyStack : Stack\n{\n    public MyStack()\n    {\n        var centos = Output.Create(Vultr.GetOs.InvokeAsync(new Vultr.GetOsArgs\n        {\n            Filters = \n            {\n                new Vultr.Inputs.GetOsFilterArgs\n                {\n                    Name = \"name\",\n                    Values = \n                    {\n                        \"CentOS 7 x64\",\n                    },\n                },\n            },\n        }));\n    }\n\n}\n```\n```go\npackage main\n\nimport (\n\t\"github.com/pulumi/pulumi-vultr/sdk/go/vultr\"\n\t\"github.com/pulumi/pulumi/sdk/v3/go/pulumi\"\n)\n\nfunc main() {\n\tpulumi.Run(func(ctx *pulumi.Context) error {\n\t\t_, err := vultr.GetOs(ctx, \u0026GetOsArgs{\n\t\t\tFilters: []GetOsFilter{\n\t\t\t\tGetOsFilter{\n\t\t\t\t\tName: \"name\",\n\t\t\t\t\tValues: []string{\n\t\t\t\t\t\t\"CentOS 7 x64\",\n\t\t\t\t\t},\n\t\t\t\t},\n\t\t\t},\n\t\t}, nil)\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\treturn nil\n\t})\n}\n```\n{{% /example %}}\n{{% /examples %}}",
            "inputs": {
                "description": "A collection of arguments for invoking getOs.\n",
                "properties": {
                    "filters": {
                        "type": "array",
                        "items": {
                            "$ref": "#/types/vultr:index/getOsFilter:getOsFilter"
                        },
                        "description": "Query parameters for finding operating systems.\n"
                    }
                },
                "type": "object"
            },
            "outputs": {
                "description": "A collection of values returned by getOs.\n",
                "properties": {
                    "arch": {
                        "type": "string",
                        "description": "The architecture of the operating system.\n"
                    },
                    "family": {
                        "type": "string",
                        "description": "The family of the operating system.\n"
                    },
                    "filters": {
                        "type": "array",
                        "items": {
                            "$ref": "#/types/vultr:index/getOsFilter:getOsFilter"
                        }
                    },
                    "id": {
                        "type": "string",
                        "description": "The provider-assigned unique ID for this managed resource.\n"
                    },
                    "name": {
                        "type": "string",
                        "description": "The name of the operating system.\n"
                    }
                },
                "type": "object",
                "required": [
                    "arch",
                    "family",
                    "name",
                    "id"
                ]
            }
        },
        "vultr:index/getPlan:getPlan": {
            "description": "Get information about a Vultr plan.\n\n{{% examples %}}\n## Example Usage\n{{% example %}}\n\nGet the information for a plan by `id`:\n\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as vultr from \"@pulumi/vultr\";\n\nconst myPlan = pulumi.output(vultr.getPlan({\n    filters: [{\n        name: \"id\",\n        values: [\"vc2-1c-1gb\"],\n    }],\n}));\n```\n```python\nimport pulumi\nimport pulumi_vultr as vultr\n\nmy_plan = vultr.get_plan(filters=[vultr.GetPlanFilterArgs(\n    name=\"id\",\n    values=[\"vc2-1c-1gb\"],\n)])\n```\n```csharp\nusing Pulumi;\nusing Vultr = Pulumi.Vultr;\n\nclass MyStack : Stack\n{\n    public MyStack()\n    {\n        var myPlan = Output.Create(Vultr.GetPlan.InvokeAsync(new Vultr.GetPlanArgs\n        {\n            Filters = \n            {\n                new Vultr.Inputs.GetPlanFilterArgs\n                {\n                    Name = \"id\",\n                    Values = \n                    {\n                        \"vc2-1c-1gb\",\n                    },\n                },\n            },\n        }));\n    }\n\n}\n```\n```go\npackage main\n\nimport (\n\t\"github.com/pulumi/pulumi-vultr/sdk/go/vultr\"\n\t\"github.com/pulumi/pulumi/sdk/v3/go/pulumi\"\n)\n\nfunc main() {\n\tpulumi.Run(func(ctx *pulumi.Context) error {\n\t\t_, err := vultr.GetPlan(ctx, \u0026GetPlanArgs{\n\t\t\tFilters: []GetPlanFilter{\n\t\t\t\tGetPlanFilter{\n\t\t\t\t\tName: \"id\",\n\t\t\t\t\tValues: []string{\n\t\t\t\t\t\t\"vc2-1c-1gb\",\n\t\t\t\t\t},\n\t\t\t\t},\n\t\t\t},\n\t\t}, nil)\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\treturn nil\n\t})\n}\n```\n{{% /example %}}\n{{% /examples %}}",
            "inputs": {
                "description": "A collection of arguments for invoking getPlan.\n",
                "properties": {
                    "filters": {
                        "type": "array",
                        "items": {
                            "$ref": "#/types/vultr:index/getPlanFilter:getPlanFilter"
                        },
                        "description": "Query parameters for finding plans.\n"
                    }
                },
                "type": "object"
            },
            "outputs": {
                "description": "A collection of values returned by getPlan.\n",
                "properties": {
                    "bandwidth": {
                        "type": "integer",
                        "description": "The bandwidth available on the plan in GB.\n"
                    },
                    "disk": {
                        "type": "integer",
                        "description": "The amount of disk space in GB available on the plan.\n"
                    },
                    "diskCount": {
                        "type": "integer",
                        "description": "The number of disks that this plan offers.\n"
                    },
                    "filters": {
                        "type": "array",
                        "items": {
                            "$ref": "#/types/vultr:index/getPlanFilter:getPlanFilter"
                        }
                    },
                    "id": {
                        "type": "string",
                        "description": "The provider-assigned unique ID for this managed resource.\n"
                    },
                    "locations": {
                        "type": "array",
                        "items": {
                            "type": "string"
                        }
                    },
                    "monthlyCost": {
                        "type": "number",
                        "description": "The price per month of the plan in USD.\n"
                    },
                    "ram": {
                        "type": "integer",
                        "description": "The amount of memory available on the plan in MB.\n"
                    },
                    "type": {
                        "type": "string",
                        "description": "The type of plan it is.\n"
                    },
                    "vcpuCount": {
                        "type": "integer",
                        "description": "The number of virtual CPUs available on the plan.\n"
                    }
                },
                "type": "object",
                "required": [
                    "bandwidth",
                    "disk",
                    "diskCount",
                    "locations",
                    "monthlyCost",
                    "ram",
                    "type",
                    "vcpuCount",
                    "id"
                ]
            }
        },
        "vultr:index/getPrivateNetwork:getPrivateNetwork": {
            "description": "Get information about a Vultr private network.\n\n{{% examples %}}\n## Example Usage\n{{% example %}}\n\nGet the information for a private network by `description`:\n\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as vultr from \"@pulumi/vultr\";\n\nconst myNetwork = pulumi.output(vultr.getPrivateNetwork({\n    filters: [{\n        name: \"description\",\n        values: [\"my-network-description\"],\n    }],\n}));\n```\n```python\nimport pulumi\nimport pulumi_vultr as vultr\n\nmy_network = vultr.get_private_network(filters=[vultr.GetPrivateNetworkFilterArgs(\n    name=\"description\",\n    values=[\"my-network-description\"],\n)])\n```\n```csharp\nusing Pulumi;\nusing Vultr = Pulumi.Vultr;\n\nclass MyStack : Stack\n{\n    public MyStack()\n    {\n        var myNetwork = Output.Create(Vultr.GetPrivateNetwork.InvokeAsync(new Vultr.GetPrivateNetworkArgs\n        {\n            Filters = \n            {\n                new Vultr.Inputs.GetPrivateNetworkFilterArgs\n                {\n                    Name = \"description\",\n                    Values = \n                    {\n                        \"my-network-description\",\n                    },\n                },\n            },\n        }));\n    }\n\n}\n```\n```go\npackage main\n\nimport (\n\t\"github.com/pulumi/pulumi-vultr/sdk/go/vultr\"\n\t\"github.com/pulumi/pulumi/sdk/v3/go/pulumi\"\n)\n\nfunc main() {\n\tpulumi.Run(func(ctx *pulumi.Context) error {\n\t\t_, err := vultr.LookupPrivateNetwork(ctx, \u0026GetPrivateNetworkArgs{\n\t\t\tFilters: []GetPrivateNetworkFilter{\n\t\t\t\tGetPrivateNetworkFilter{\n\t\t\t\t\tName: \"description\",\n\t\t\t\t\tValues: []string{\n\t\t\t\t\t\t\"my-network-description\",\n\t\t\t\t\t},\n\t\t\t\t},\n\t\t\t},\n\t\t}, nil)\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\treturn nil\n\t})\n}\n```\n{{% /example %}}\n{{% /examples %}}",
            "inputs": {
                "description": "A collection of arguments for invoking getPrivateNetwork.\n",
                "properties": {
                    "filters": {
                        "type": "array",
                        "items": {
                            "$ref": "#/types/vultr:index/getPrivateNetworkFilter:getPrivateNetworkFilter"
                        },
                        "description": "Query parameters for finding private networks.\n"
                    }
                },
                "type": "object"
            },
            "outputs": {
                "description": "A collection of values returned by getPrivateNetwork.\n",
                "properties": {
                    "dateCreated": {
                        "type": "string",
                        "description": "The date the private network was added to your Vultr account.\n"
                    },
                    "description": {
                        "type": "string",
                        "description": "The private network's description.\n"
                    },
                    "filters": {
                        "type": "array",
                        "items": {
                            "$ref": "#/types/vultr:index/getPrivateNetworkFilter:getPrivateNetworkFilter"
                        }
                    },
                    "id": {
                        "type": "string",
                        "description": "The provider-assigned unique ID for this managed resource.\n"
                    },
                    "region": {
                        "type": "string",
                        "description": "The ID of the region that the private network is in.\n"
                    },
                    "v4Subnet": {
                        "type": "string",
                        "description": "The IPv4 network address. For example: 10.1.1.0.\n"
                    },
                    "v4SubnetMask": {
                        "type": "integer",
                        "description": "The number of bits for the netmask in CIDR notation. Example: 20\n"
                    }
                },
                "type": "object",
                "required": [
                    "dateCreated",
                    "description",
                    "region",
                    "v4Subnet",
                    "v4SubnetMask",
                    "id"
                ]
            }
        },
        "vultr:index/getRegion:getRegion": {
            "description": "Get information about a Vultr region.\n\n{{% examples %}}\n## Example Usage\n{{% example %}}\n\nGet the information for a region by `id`:\n\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as vultr from \"@pulumi/vultr\";\n\nconst myRegion = pulumi.output(vultr.getRegion({\n    filters: [{\n        name: \"id\",\n        values: [\"sea\"],\n    }],\n}));\n```\n```python\nimport pulumi\nimport pulumi_vultr as vultr\n\nmy_region = vultr.get_region(filters=[vultr.GetRegionFilterArgs(\n    name=\"id\",\n    values=[\"sea\"],\n)])\n```\n```csharp\nusing Pulumi;\nusing Vultr = Pulumi.Vultr;\n\nclass MyStack : Stack\n{\n    public MyStack()\n    {\n        var myRegion = Output.Create(Vultr.GetRegion.InvokeAsync(new Vultr.GetRegionArgs\n        {\n            Filters = \n            {\n                new Vultr.Inputs.GetRegionFilterArgs\n                {\n                    Name = \"id\",\n                    Values = \n                    {\n                        \"sea\",\n                    },\n                },\n            },\n        }));\n    }\n\n}\n```\n```go\npackage main\n\nimport (\n\t\"github.com/pulumi/pulumi-vultr/sdk/go/vultr\"\n\t\"github.com/pulumi/pulumi/sdk/v3/go/pulumi\"\n)\n\nfunc main() {\n\tpulumi.Run(func(ctx *pulumi.Context) error {\n\t\t_, err := vultr.GetRegion(ctx, \u0026GetRegionArgs{\n\t\t\tFilters: []GetRegionFilter{\n\t\t\t\tGetRegionFilter{\n\t\t\t\t\tName: \"id\",\n\t\t\t\t\tValues: []string{\n\t\t\t\t\t\t\"sea\",\n\t\t\t\t\t},\n\t\t\t\t},\n\t\t\t},\n\t\t}, nil)\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\treturn nil\n\t})\n}\n```\n{{% /example %}}\n{{% /examples %}}",
            "inputs": {
                "description": "A collection of arguments for invoking getRegion.\n",
                "properties": {
                    "filters": {
                        "type": "array",
                        "items": {
                            "$ref": "#/types/vultr:index/getRegionFilter:getRegionFilter"
                        },
                        "description": "Query parameters for finding regions.\n"
                    }
                },
                "type": "object"
            },
            "outputs": {
                "description": "A collection of values returned by getRegion.\n",
                "properties": {
                    "city": {
                        "type": "string",
                        "description": "The city the region is in.\n"
                    },
                    "continent": {
                        "type": "string",
                        "description": "The continent the region is in.\n"
                    },
                    "country": {
                        "type": "string",
                        "description": "The country the region is in.\n"
                    },
                    "filters": {
                        "type": "array",
                        "items": {
                            "$ref": "#/types/vultr:index/getRegionFilter:getRegionFilter"
                        }
                    },
                    "id": {
                        "type": "string",
                        "description": "The provider-assigned unique ID for this managed resource.\n"
                    },
                    "options": {
                        "type": "array",
                        "items": {
                            "type": "string"
                        },
                        "description": "Shows whether options like ddos protection or block storage are available in the region.\n"
                    }
                },
                "type": "object",
                "required": [
                    "city",
                    "continent",
                    "country",
                    "options",
                    "id"
                ]
            }
        },
        "vultr:index/getReservedIp:getReservedIp": {
            "description": "Get information about a Vultr reserved IP address.\n\n{{% examples %}}\n## Example Usage\n{{% example %}}\n\nGet the information for a reserved IP by `label`:\n\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as vultr from \"@pulumi/vultr\";\n\nconst myReservedIp = pulumi.output(vultr.getReservedIp({\n    filters: [{\n        name: \"label\",\n        values: [\"my-reserved-ip-label\"],\n    }],\n}));\n```\n```python\nimport pulumi\nimport pulumi_vultr as vultr\n\nmy_reserved_ip = vultr.get_reserved_ip(filters=[vultr.GetReservedIpFilterArgs(\n    name=\"label\",\n    values=[\"my-reserved-ip-label\"],\n)])\n```\n```csharp\nusing Pulumi;\nusing Vultr = Pulumi.Vultr;\n\nclass MyStack : Stack\n{\n    public MyStack()\n    {\n        var myReservedIp = Output.Create(Vultr.GetReservedIp.InvokeAsync(new Vultr.GetReservedIpArgs\n        {\n            Filters = \n            {\n                new Vultr.Inputs.GetReservedIpFilterArgs\n                {\n                    Name = \"label\",\n                    Values = \n                    {\n                        \"my-reserved-ip-label\",\n                    },\n                },\n            },\n        }));\n    }\n\n}\n```\n```go\npackage main\n\nimport (\n\t\"github.com/pulumi/pulumi-vultr/sdk/go/vultr\"\n\t\"github.com/pulumi/pulumi/sdk/v3/go/pulumi\"\n)\n\nfunc main() {\n\tpulumi.Run(func(ctx *pulumi.Context) error {\n\t\t_, err := vultr.GetReservedIp(ctx, \u0026GetReservedIpArgs{\n\t\t\tFilters: []GetReservedIpFilter{\n\t\t\t\tGetReservedIpFilter{\n\t\t\t\t\tName: \"label\",\n\t\t\t\t\tValues: []string{\n\t\t\t\t\t\t\"my-reserved-ip-label\",\n\t\t\t\t\t},\n\t\t\t\t},\n\t\t\t},\n\t\t}, nil)\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\treturn nil\n\t})\n}\n```\n{{% /example %}}\n{{% /examples %}}",
            "inputs": {
                "description": "A collection of arguments for invoking getReservedIp.\n",
                "properties": {
                    "filters": {
                        "type": "array",
                        "items": {
                            "$ref": "#/types/vultr:index/getReservedIpFilter:getReservedIpFilter"
                        },
                        "description": "Query parameters for finding reserved IP addresses.\n"
                    }
                },
                "type": "object"
            },
            "outputs": {
                "description": "A collection of values returned by getReservedIp.\n",
                "properties": {
                    "filters": {
                        "type": "array",
                        "items": {
                            "$ref": "#/types/vultr:index/getReservedIpFilter:getReservedIpFilter"
                        }
                    },
                    "id": {
                        "type": "string",
                        "description": "The provider-assigned unique ID for this managed resource.\n"
                    },
                    "instanceId": {
                        "type": "string",
                        "description": "The ID of the VPS the reserved IP is attached to.\n"
                    },
                    "ipType": {
                        "type": "string",
                        "description": "The IP type of the reserved IP.\n"
                    },
                    "label": {
                        "type": "string",
                        "description": "The label of the reserved IP.\n"
                    },
                    "region": {
                        "type": "string",
                        "description": "The ID of the region that the reserved IP is in.\n"
                    },
                    "subnet": {
                        "type": "string",
                        "description": "The subnet of the reserved IP.\n"
                    },
                    "subnetSize": {
                        "type": "integer",
                        "description": "The subnet size of the reserved IP.\n"
                    }
                },
                "type": "object",
                "required": [
                    "instanceId",
                    "ipType",
                    "label",
                    "region",
                    "subnet",
                    "subnetSize",
                    "id"
                ]
            }
        },
        "vultr:index/getReverseIpv4:getReverseIpv4": {
            "description": "Get information about a Vultr Reverse IPv4.\n\n{{% examples %}}\n## Example Usage\n{{% example %}}\n\nGet the information for an IPv4 reverse DNS record by `reverse`:\n\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as vultr from \"@pulumi/vultr\";\n\nconst myReverseIpv4 = pulumi.output(vultr.getReverseIpv4({\n    filters: [{\n        name: \"reverse\",\n        values: [\"host.example.com\"],\n    }],\n}));\n```\n```python\nimport pulumi\nimport pulumi_vultr as vultr\n\nmy_reverse_ipv4 = vultr.get_reverse_ipv4(filters=[vultr.GetReverseIpv4FilterArgs(\n    name=\"reverse\",\n    values=[\"host.example.com\"],\n)])\n```\n```csharp\nusing Pulumi;\nusing Vultr = Pulumi.Vultr;\n\nclass MyStack : Stack\n{\n    public MyStack()\n    {\n        var myReverseIpv4 = Output.Create(Vultr.GetReverseIpv4.InvokeAsync(new Vultr.GetReverseIpv4Args\n        {\n            Filters = \n            {\n                new Vultr.Inputs.GetReverseIpv4FilterArgs\n                {\n                    Name = \"reverse\",\n                    Values = \n                    {\n                        \"host.example.com\",\n                    },\n                },\n            },\n        }));\n    }\n\n}\n```\n```go\npackage main\n\nimport (\n\t\"github.com/pulumi/pulumi-vultr/sdk/go/vultr\"\n\t\"github.com/pulumi/pulumi/sdk/v3/go/pulumi\"\n)\n\nfunc main() {\n\tpulumi.Run(func(ctx *pulumi.Context) error {\n\t\t_, err := vultr.LookupReverseIpv4(ctx, \u0026GetReverseIpv4Args{\n\t\t\tFilters: []GetReverseIpv4Filter{\n\t\t\t\tGetReverseIpv4Filter{\n\t\t\t\t\tName: \"reverse\",\n\t\t\t\t\tValues: []string{\n\t\t\t\t\t\t\"host.example.com\",\n\t\t\t\t\t},\n\t\t\t\t},\n\t\t\t},\n\t\t}, nil)\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\treturn nil\n\t})\n}\n```\n{{% /example %}}\n{{% /examples %}}",
            "inputs": {
                "description": "A collection of arguments for invoking getReverseIpv4.\n",
                "properties": {
                    "filters": {
                        "type": "array",
                        "items": {
                            "$ref": "#/types/vultr:index/getReverseIpv4Filter:getReverseIpv4Filter"
                        },
                        "description": "Query parameters for finding IPv4 reverse DNS records.\n"
                    }
                },
                "type": "object"
            },
            "outputs": {
                "description": "A collection of values returned by getReverseIpv4.\n",
                "properties": {
                    "filters": {
                        "type": "array",
                        "items": {
                            "$ref": "#/types/vultr:index/getReverseIpv4Filter:getReverseIpv4Filter"
                        }
                    },
                    "gateway": {
                        "type": "string",
                        "description": "The gateway IP address.\n"
                    },
                    "id": {
                        "type": "string",
                        "description": "The provider-assigned unique ID for this managed resource.\n"
                    },
                    "instanceId": {
                        "type": "string",
                        "description": "The ID of the instance the IPv4 reverse DNS record was set for.\n"
                    },
                    "ip": {
                        "type": "string",
                        "description": "The IPv4 address in canonical format used in the reverse DNS record.\n"
                    },
                    "netmask": {
                        "type": "string",
                        "description": "The IPv4 netmask in dot-decimal notation.\n"
                    },
                    "reverse": {
                        "type": "string",
                        "description": "The hostname used in the IPv4 reverse DNS record.\n"
                    }
                },
                "type": "object",
                "required": [
                    "gateway",
                    "instanceId",
                    "ip",
                    "netmask",
                    "reverse",
                    "id"
                ]
            }
        },
        "vultr:index/getReverseIpv6:getReverseIpv6": {
            "description": "Get information about a Vultr Reverse IPv6.\n\n{{% examples %}}\n## Example Usage\n{{% example %}}\n\nGet the information for an IPv6 reverse DNS record by `reverse`:\n\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as vultr from \"@pulumi/vultr\";\n\nconst myReverseIpv6 = pulumi.output(vultr.getReverseIpv6({\n    filters: [{\n        name: \"reverse\",\n        values: [\"host.example.com\"],\n    }],\n}));\n```\n```python\nimport pulumi\nimport pulumi_vultr as vultr\n\nmy_reverse_ipv6 = vultr.get_reverse_ipv6(filters=[vultr.GetReverseIpv6FilterArgs(\n    name=\"reverse\",\n    values=[\"host.example.com\"],\n)])\n```\n```csharp\nusing Pulumi;\nusing Vultr = Pulumi.Vultr;\n\nclass MyStack : Stack\n{\n    public MyStack()\n    {\n        var myReverseIpv6 = Output.Create(Vultr.GetReverseIpv6.InvokeAsync(new Vultr.GetReverseIpv6Args\n        {\n            Filters = \n            {\n                new Vultr.Inputs.GetReverseIpv6FilterArgs\n                {\n                    Name = \"reverse\",\n                    Values = \n                    {\n                        \"host.example.com\",\n                    },\n                },\n            },\n        }));\n    }\n\n}\n```\n```go\npackage main\n\nimport (\n\t\"github.com/pulumi/pulumi-vultr/sdk/go/vultr\"\n\t\"github.com/pulumi/pulumi/sdk/v3/go/pulumi\"\n)\n\nfunc main() {\n\tpulumi.Run(func(ctx *pulumi.Context) error {\n\t\t_, err := vultr.LookupReverseIpv6(ctx, \u0026GetReverseIpv6Args{\n\t\t\tFilters: []GetReverseIpv6Filter{\n\t\t\t\tGetReverseIpv6Filter{\n\t\t\t\t\tName: \"reverse\",\n\t\t\t\t\tValues: []string{\n\t\t\t\t\t\t\"host.example.com\",\n\t\t\t\t\t},\n\t\t\t\t},\n\t\t\t},\n\t\t}, nil)\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\treturn nil\n\t})\n}\n```\n{{% /example %}}\n{{% /examples %}}",
            "inputs": {
                "description": "A collection of arguments for invoking getReverseIpv6.\n",
                "properties": {
                    "filters": {
                        "type": "array",
                        "items": {
                            "$ref": "#/types/vultr:index/getReverseIpv6Filter:getReverseIpv6Filter"
                        },
                        "description": "Query parameters for finding IPv6 reverse DNS records.\n"
                    }
                },
                "type": "object"
            },
            "outputs": {
                "description": "A collection of values returned by getReverseIpv6.\n",
                "properties": {
                    "filters": {
                        "type": "array",
                        "items": {
                            "$ref": "#/types/vultr:index/getReverseIpv6Filter:getReverseIpv6Filter"
                        }
                    },
                    "id": {
                        "type": "string",
                        "description": "The provider-assigned unique ID for this managed resource.\n"
                    },
                    "instanceId": {
                        "type": "string",
                        "description": "The ID of the instance the IPv6 reverse DNS record was set for.\n"
                    },
                    "ip": {
                        "type": "string",
                        "description": "The IPv6 address in canonical format used in the reverse DNS record.\n"
                    },
                    "reverse": {
                        "type": "string",
                        "description": "The hostname used in the IPv6 reverse DNS record.\n"
                    }
                },
                "type": "object",
                "required": [
                    "instanceId",
                    "ip",
                    "reverse",
                    "id"
                ]
            }
        },
        "vultr:index/getSnapshot:getSnapshot": {
            "description": "Get information about a Vultr snapshot.\n\n{{% examples %}}\n## Example Usage\n{{% example %}}\n\nGet the information for a snapshot by `description`:\n\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as vultr from \"@pulumi/vultr\";\n\nconst mySnapshot = pulumi.output(vultr.getSnapshot({\n    filters: [{\n        name: \"description\",\n        values: [\"my-snapshot-description\"],\n    }],\n}));\n```\n```python\nimport pulumi\nimport pulumi_vultr as vultr\n\nmy_snapshot = vultr.get_snapshot(filters=[vultr.GetSnapshotFilterArgs(\n    name=\"description\",\n    values=[\"my-snapshot-description\"],\n)])\n```\n```csharp\nusing Pulumi;\nusing Vultr = Pulumi.Vultr;\n\nclass MyStack : Stack\n{\n    public MyStack()\n    {\n        var mySnapshot = Output.Create(Vultr.GetSnapshot.InvokeAsync(new Vultr.GetSnapshotArgs\n        {\n            Filters = \n            {\n                new Vultr.Inputs.GetSnapshotFilterArgs\n                {\n                    Name = \"description\",\n                    Values = \n                    {\n                        \"my-snapshot-description\",\n                    },\n                },\n            },\n        }));\n    }\n\n}\n```\n```go\npackage main\n\nimport (\n\t\"github.com/pulumi/pulumi-vultr/sdk/go/vultr\"\n\t\"github.com/pulumi/pulumi/sdk/v3/go/pulumi\"\n)\n\nfunc main() {\n\tpulumi.Run(func(ctx *pulumi.Context) error {\n\t\t_, err := vultr.LookupSnapshot(ctx, \u0026GetSnapshotArgs{\n\t\t\tFilters: []GetSnapshotFilter{\n\t\t\t\tGetSnapshotFilter{\n\t\t\t\t\tName: \"description\",\n\t\t\t\t\tValues: []string{\n\t\t\t\t\t\t\"my-snapshot-description\",\n\t\t\t\t\t},\n\t\t\t\t},\n\t\t\t},\n\t\t}, nil)\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\treturn nil\n\t})\n}\n```\n{{% /example %}}\n{{% /examples %}}",
            "inputs": {
                "description": "A collection of arguments for invoking getSnapshot.\n",
                "properties": {
                    "filters": {
                        "type": "array",
                        "items": {
                            "$ref": "#/types/vultr:index/getSnapshotFilter:getSnapshotFilter"
                        },
                        "description": "Query parameters for finding snapshots.\n"
                    }
                },
                "type": "object"
            },
            "outputs": {
                "description": "A collection of values returned by getSnapshot.\n",
                "properties": {
                    "appId": {
                        "type": "integer",
                        "description": "The application ID of the snapshot.\n"
                    },
                    "dateCreated": {
                        "type": "string",
                        "description": "The date the snapshot was added to your Vultr account.\n"
                    },
                    "description": {
                        "type": "string",
                        "description": "The description of the snapshot.\n"
                    },
                    "filters": {
                        "type": "array",
                        "items": {
                            "$ref": "#/types/vultr:index/getSnapshotFilter:getSnapshotFilter"
                        }
                    },
                    "id": {
                        "type": "string",
                        "description": "The provider-assigned unique ID for this managed resource.\n"
                    },
                    "osId": {
                        "type": "integer",
                        "description": "The operating system ID of the snapshot.\n"
                    },
                    "size": {
                        "type": "integer",
                        "description": "The size of the snapshot in bytes.\n"
                    },
                    "status": {
                        "type": "string",
                        "description": "The status of the snapshot.\n"
                    }
                },
                "type": "object",
                "required": [
                    "appId",
                    "dateCreated",
                    "description",
                    "osId",
                    "size",
                    "status",
                    "id"
                ]
            }
        },
        "vultr:index/getSshKey:getSshKey": {
            "description": "Get information about a Vultr SSH key. This data source provides the name, public SSH key, and the creation date for your Vultr SSH key.\n\n{{% examples %}}\n## Example Usage\n{{% example %}}\n\nGet the information for an SSH key by `name`:\n\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as vultr from \"@pulumi/vultr\";\n\nconst mySshKey = pulumi.output(vultr.getSshKey({\n    filters: [{\n        name: \"name\",\n        values: [\"my-ssh-key-name\"],\n    }],\n}));\n```\n```python\nimport pulumi\nimport pulumi_vultr as vultr\n\nmy_ssh_key = vultr.get_ssh_key(filters=[vultr.GetSshKeyFilterArgs(\n    name=\"name\",\n    values=[\"my-ssh-key-name\"],\n)])\n```\n```csharp\nusing Pulumi;\nusing Vultr = Pulumi.Vultr;\n\nclass MyStack : Stack\n{\n    public MyStack()\n    {\n        var mySshKey = Output.Create(Vultr.GetSshKey.InvokeAsync(new Vultr.GetSshKeyArgs\n        {\n            Filters = \n            {\n                new Vultr.Inputs.GetSshKeyFilterArgs\n                {\n                    Name = \"name\",\n                    Values = \n                    {\n                        \"my-ssh-key-name\",\n                    },\n                },\n            },\n        }));\n    }\n\n}\n```\n```go\npackage main\n\nimport (\n\t\"github.com/pulumi/pulumi-vultr/sdk/go/vultr\"\n\t\"github.com/pulumi/pulumi/sdk/v3/go/pulumi\"\n)\n\nfunc main() {\n\tpulumi.Run(func(ctx *pulumi.Context) error {\n\t\t_, err := vultr.LookupSshKey(ctx, \u0026GetSshKeyArgs{\n\t\t\tFilters: []GetSshKeyFilter{\n\t\t\t\tGetSshKeyFilter{\n\t\t\t\t\tName: \"name\",\n\t\t\t\t\tValues: []string{\n\t\t\t\t\t\t\"my-ssh-key-name\",\n\t\t\t\t\t},\n\t\t\t\t},\n\t\t\t},\n\t\t}, nil)\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\treturn nil\n\t})\n}\n```\n{{% /example %}}\n{{% /examples %}}",
            "inputs": {
                "description": "A collection of arguments for invoking getSshKey.\n",
                "properties": {
                    "filters": {
                        "type": "array",
                        "items": {
                            "$ref": "#/types/vultr:index/getSshKeyFilter:getSshKeyFilter"
                        },
                        "description": "Query parameters for finding SSH keys.\n"
                    }
                },
                "type": "object"
            },
            "outputs": {
                "description": "A collection of values returned by getSshKey.\n",
                "properties": {
                    "dateCreated": {
                        "type": "string",
                        "description": "The date the SSH key was added to your Vultr account.\n"
                    },
                    "filters": {
                        "type": "array",
                        "items": {
                            "$ref": "#/types/vultr:index/getSshKeyFilter:getSshKeyFilter"
                        }
                    },
                    "id": {
                        "type": "string",
                        "description": "The provider-assigned unique ID for this managed resource.\n"
                    },
                    "name": {
                        "type": "string",
                        "description": "The name of the SSH key.\n"
                    },
                    "sshKey": {
                        "type": "string",
                        "description": "The public SSH key.\n"
                    }
                },
                "type": "object",
                "required": [
                    "dateCreated",
                    "name",
                    "sshKey",
                    "id"
                ]
            }
        },
        "vultr:index/getStartupScript:getStartupScript": {
            "description": "Get information about a Vultr startup script. This data source provides the name, script, type, creation date, and the last modification date for your Vultr startup script.\n\n{{% examples %}}\n## Example Usage\n{{% example %}}\n\nGet the information for a startup script by `name`:\n\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as vultr from \"@pulumi/vultr\";\n\nconst myStartupScript = pulumi.output(vultr.getStartupScript({\n    filters: [{\n        name: \"name\",\n        values: [\"my-startup-script-name\"],\n    }],\n}));\n```\n```python\nimport pulumi\nimport pulumi_vultr as vultr\n\nmy_startup_script = vultr.get_startup_script(filters=[vultr.GetStartupScriptFilterArgs(\n    name=\"name\",\n    values=[\"my-startup-script-name\"],\n)])\n```\n```csharp\nusing Pulumi;\nusing Vultr = Pulumi.Vultr;\n\nclass MyStack : Stack\n{\n    public MyStack()\n    {\n        var myStartupScript = Output.Create(Vultr.GetStartupScript.InvokeAsync(new Vultr.GetStartupScriptArgs\n        {\n            Filters = \n            {\n                new Vultr.Inputs.GetStartupScriptFilterArgs\n                {\n                    Name = \"name\",\n                    Values = \n                    {\n                        \"my-startup-script-name\",\n                    },\n                },\n            },\n        }));\n    }\n\n}\n```\n```go\npackage main\n\nimport (\n\t\"github.com/pulumi/pulumi-vultr/sdk/go/vultr\"\n\t\"github.com/pulumi/pulumi/sdk/v3/go/pulumi\"\n)\n\nfunc main() {\n\tpulumi.Run(func(ctx *pulumi.Context) error {\n\t\t_, err := vultr.LookupStartupScript(ctx, \u0026GetStartupScriptArgs{\n\t\t\tFilters: []GetStartupScriptFilter{\n\t\t\t\tGetStartupScriptFilter{\n\t\t\t\t\tName: \"name\",\n\t\t\t\t\tValues: []string{\n\t\t\t\t\t\t\"my-startup-script-name\",\n\t\t\t\t\t},\n\t\t\t\t},\n\t\t\t},\n\t\t}, nil)\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\treturn nil\n\t})\n}\n```\n{{% /example %}}\n{{% /examples %}}",
            "inputs": {
                "description": "A collection of arguments for invoking getStartupScript.\n",
                "properties": {
                    "filters": {
                        "type": "array",
                        "items": {
                            "$ref": "#/types/vultr:index/getStartupScriptFilter:getStartupScriptFilter"
                        },
                        "description": "Query parameters for finding startup scripts.\n"
                    }
                },
                "type": "object"
            },
            "outputs": {
                "description": "A collection of values returned by getStartupScript.\n",
                "properties": {
                    "dateCreated": {
                        "type": "string",
                        "description": "The date the startup script was added to your Vultr account.\n"
                    },
                    "dateModified": {
                        "type": "string",
                        "description": "The date the startup script was last modified.\n"
                    },
                    "filters": {
                        "type": "array",
                        "items": {
                            "$ref": "#/types/vultr:index/getStartupScriptFilter:getStartupScriptFilter"
                        }
                    },
                    "id": {
                        "type": "string",
                        "description": "The provider-assigned unique ID for this managed resource.\n"
                    },
                    "name": {
                        "type": "string",
                        "description": "The name of the startup script.\n"
                    },
                    "script": {
                        "type": "string",
                        "description": "The contents of the startup script base64 encoded.\n"
                    },
                    "type": {
                        "type": "string",
                        "description": "The type of the startup script.\n"
                    }
                },
                "type": "object",
                "required": [
                    "dateCreated",
                    "dateModified",
                    "name",
                    "script",
                    "type",
                    "id"
                ]
            }
        },
        "vultr:index/getUser:getUser": {
            "description": "Get information about a Vultr user associated with your account. This data source provides the name, email, access control list, and API status for a Vultr user associated with your account.\n\n{{% examples %}}\n## Example Usage\n{{% example %}}\n\nGet the information for a user by `email`:\n\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as vultr from \"@pulumi/vultr\";\n\nconst myUser = pulumi.output(vultr.getUser({\n    filters: [{\n        name: \"email\",\n        values: [\"jdoe@example.com\"],\n    }],\n}));\n```\n```python\nimport pulumi\nimport pulumi_vultr as vultr\n\nmy_user = vultr.get_user(filters=[vultr.GetUserFilterArgs(\n    name=\"email\",\n    values=[\"jdoe@example.com\"],\n)])\n```\n```csharp\nusing Pulumi;\nusing Vultr = Pulumi.Vultr;\n\nclass MyStack : Stack\n{\n    public MyStack()\n    {\n        var myUser = Output.Create(Vultr.GetUser.InvokeAsync(new Vultr.GetUserArgs\n        {\n            Filters = \n            {\n                new Vultr.Inputs.GetUserFilterArgs\n                {\n                    Name = \"email\",\n                    Values = \n                    {\n                        \"jdoe@example.com\",\n                    },\n                },\n            },\n        }));\n    }\n\n}\n```\n```go\npackage main\n\nimport (\n\t\"github.com/pulumi/pulumi-vultr/sdk/go/vultr\"\n\t\"github.com/pulumi/pulumi/sdk/v3/go/pulumi\"\n)\n\nfunc main() {\n\tpulumi.Run(func(ctx *pulumi.Context) error {\n\t\t_, err := vultr.LookupUser(ctx, \u0026GetUserArgs{\n\t\t\tFilters: []GetUserFilter{\n\t\t\t\tGetUserFilter{\n\t\t\t\t\tName: \"email\",\n\t\t\t\t\tValues: []string{\n\t\t\t\t\t\t\"jdoe@example.com\",\n\t\t\t\t\t},\n\t\t\t\t},\n\t\t\t},\n\t\t}, nil)\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\treturn nil\n\t})\n}\n```\n\nGet the information for a user by `name`:\n\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as vultr from \"@pulumi/vultr\";\n\nconst myUser = pulumi.output(vultr.getUser({\n    filters: [{\n        name: \"name\",\n        values: [\"John Doe\"],\n    }],\n}));\n```\n```python\nimport pulumi\nimport pulumi_vultr as vultr\n\nmy_user = vultr.get_user(filters=[vultr.GetUserFilterArgs(\n    name=\"name\",\n    values=[\"John Doe\"],\n)])\n```\n```csharp\nusing Pulumi;\nusing Vultr = Pulumi.Vultr;\n\nclass MyStack : Stack\n{\n    public MyStack()\n    {\n        var myUser = Output.Create(Vultr.GetUser.InvokeAsync(new Vultr.GetUserArgs\n        {\n            Filters = \n            {\n                new Vultr.Inputs.GetUserFilterArgs\n                {\n                    Name = \"name\",\n                    Values = \n                    {\n                        \"John Doe\",\n                    },\n                },\n            },\n        }));\n    }\n\n}\n```\n```go\npackage main\n\nimport (\n\t\"github.com/pulumi/pulumi-vultr/sdk/go/vultr\"\n\t\"github.com/pulumi/pulumi/sdk/v3/go/pulumi\"\n)\n\nfunc main() {\n\tpulumi.Run(func(ctx *pulumi.Context) error {\n\t\t_, err := vultr.LookupUser(ctx, \u0026GetUserArgs{\n\t\t\tFilters: []GetUserFilter{\n\t\t\t\tGetUserFilter{\n\t\t\t\t\tName: \"name\",\n\t\t\t\t\tValues: []string{\n\t\t\t\t\t\t\"John Doe\",\n\t\t\t\t\t},\n\t\t\t\t},\n\t\t\t},\n\t\t}, nil)\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\treturn nil\n\t})\n}\n```\n{{% /example %}}\n{{% /examples %}}",
            "inputs": {
                "description": "A collection of arguments for invoking getUser.\n",
                "properties": {
                    "filters": {
                        "type": "array",
                        "items": {
                            "$ref": "#/types/vultr:index/getUserFilter:getUserFilter"
                        },
                        "description": "Query parameters for finding users.\n"
                    }
                },
                "type": "object"
            },
            "outputs": {
                "description": "A collection of values returned by getUser.\n",
                "properties": {
                    "acls": {
                        "type": "array",
                        "items": {
                            "type": "string"
                        },
                        "description": "The access control list for the user.\n"
                    },
                    "apiEnabled": {
                        "type": "boolean",
                        "description": "Whether API is enabled for the user.\n"
                    },
                    "email": {
                        "type": "string",
                        "description": "The email of the user.\n"
                    },
                    "filters": {
                        "type": "array",
                        "items": {
                            "$ref": "#/types/vultr:index/getUserFilter:getUserFilter"
                        }
                    },
                    "id": {
                        "type": "string",
                        "description": "The provider-assigned unique ID for this managed resource.\n"
                    },
                    "name": {
                        "type": "string",
                        "description": "The name of the user.\n"
                    }
                },
                "type": "object",
                "required": [
                    "acls",
                    "apiEnabled",
                    "email",
                    "name",
                    "id"
                ]
            }
        }
    },
    "language": {
        "csharp": {
            "compatibility": "tfbridge20",
            "namespaces": null,
            "packageReferences": {
                "Pulumi": "3.*"
            }
        },
        "go": {
            "generateResourceContainerTypes": true,
            "importBasePath": "github.com/vincentbernat/pulumi-vultr/sdk/go/vultr"
        },
        "nodejs": {
            "compatibility": "tfbridge20",
            "dependencies": {
                "@pulumi/pulumi": "^3.0.0"
            },
            "devDependencies": {
                "@types/mime": "^2.0.0",
                "@types/node": "^10.0.0"
            },
            "disableUnionOutputTypes": true,
            "packageDescription": "A Pulumi package for creating and managing vultr cloud resources.",
            "packageName": "",
            "readme": "\u003e This provider is a derived work of the [Terraform Provider](https://github.com/vultr/terraform-provider-vultr)\n\u003e distributed under [MPL 2.0](https://www.mozilla.org/en-US/MPL/2.0/). If you encounter a bug or missing feature,\n\u003e first check the [`pulumi/pulumi-vultr` repo](https://github.com/pulumi/pulumi-vultr/issues); however, if that doesn't turn up anything,\n\u003e please consult the source [`vultr/terraform-provider-vultr` repo](https://github.com/vultr/terraform-provider-vultr/issues).",
            "typescriptVersion": ""
        },
        "python": {
            "compatibility": "tfbridge20",
            "readme": "\u003e This provider is a derived work of the [Terraform Provider](https://github.com/vultr/terraform-provider-vultr)\n\u003e distributed under [MPL 2.0](https://www.mozilla.org/en-US/MPL/2.0/). If you encounter a bug or missing feature,\n\u003e first check the [`pulumi/pulumi-vultr` repo](https://github.com/pulumi/pulumi-vultr/issues); however, if that doesn't turn up anything,\n\u003e please consult the source [`vultr/terraform-provider-vultr` repo](https://github.com/vultr/terraform-provider-vultr/issues).",
            "requires": {
                "pulumi": "\u003e=3.0.0,\u003c4.0.0"
            }
        }
    }
}