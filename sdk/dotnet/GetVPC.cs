// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;

namespace Pulumi.Vultr
{
    public static class GetVPC
    {
        /// <summary>
        /// Get information about a Vultr VPC.
        /// 
        /// {{% examples %}}
        /// ## Example Usage
        /// {{% example %}}
        /// 
        /// Get the information for a VPC by `description`:
        /// 
        /// ```csharp
        /// using System.Collections.Generic;
        /// using Pulumi;
        /// using Vultr = Pulumi.Vultr;
        /// 
        /// return await Deployment.RunAsync(() =&gt; 
        /// {
        ///     var myVpc = Vultr.GetVPC.Invoke(new()
        ///     {
        ///         Filters = new[]
        ///         {
        ///             new Vultr.Inputs.GetVPCFilterInputArgs
        ///             {
        ///                 Name = "description",
        ///                 Values = new[]
        ///                 {
        ///                     "my-vpc-description",
        ///                 },
        ///             },
        ///         },
        ///     });
        /// 
        /// });
        /// ```
        /// {{% /example %}}
        /// {{% /examples %}}
        /// </summary>
        public static Task<GetVPCResult> InvokeAsync(GetVPCArgs? args = null, InvokeOptions? options = null)
            => Pulumi.Deployment.Instance.InvokeAsync<GetVPCResult>("vultr:index/getVPC:getVPC", args ?? new GetVPCArgs(), options.WithDefaults());

        /// <summary>
        /// Get information about a Vultr VPC.
        /// 
        /// {{% examples %}}
        /// ## Example Usage
        /// {{% example %}}
        /// 
        /// Get the information for a VPC by `description`:
        /// 
        /// ```csharp
        /// using System.Collections.Generic;
        /// using Pulumi;
        /// using Vultr = Pulumi.Vultr;
        /// 
        /// return await Deployment.RunAsync(() =&gt; 
        /// {
        ///     var myVpc = Vultr.GetVPC.Invoke(new()
        ///     {
        ///         Filters = new[]
        ///         {
        ///             new Vultr.Inputs.GetVPCFilterInputArgs
        ///             {
        ///                 Name = "description",
        ///                 Values = new[]
        ///                 {
        ///                     "my-vpc-description",
        ///                 },
        ///             },
        ///         },
        ///     });
        /// 
        /// });
        /// ```
        /// {{% /example %}}
        /// {{% /examples %}}
        /// </summary>
        public static Output<GetVPCResult> Invoke(GetVPCInvokeArgs? args = null, InvokeOptions? options = null)
            => Pulumi.Deployment.Instance.Invoke<GetVPCResult>("vultr:index/getVPC:getVPC", args ?? new GetVPCInvokeArgs(), options.WithDefaults());
    }


    public sealed class GetVPCArgs : global::Pulumi.InvokeArgs
    {
        [Input("filters")]
        private List<Inputs.GetVPCFilterArgs>? _filters;

        /// <summary>
        /// Query parameters for finding VPCs.
        /// </summary>
        public List<Inputs.GetVPCFilterArgs> Filters
        {
            get => _filters ?? (_filters = new List<Inputs.GetVPCFilterArgs>());
            set => _filters = value;
        }

        public GetVPCArgs()
        {
        }
        public static new GetVPCArgs Empty => new GetVPCArgs();
    }

    public sealed class GetVPCInvokeArgs : global::Pulumi.InvokeArgs
    {
        [Input("filters")]
        private InputList<Inputs.GetVPCFilterInputArgs>? _filters;

        /// <summary>
        /// Query parameters for finding VPCs.
        /// </summary>
        public InputList<Inputs.GetVPCFilterInputArgs> Filters
        {
            get => _filters ?? (_filters = new InputList<Inputs.GetVPCFilterInputArgs>());
            set => _filters = value;
        }

        public GetVPCInvokeArgs()
        {
        }
        public static new GetVPCInvokeArgs Empty => new GetVPCInvokeArgs();
    }


    [OutputType]
    public sealed class GetVPCResult
    {
        /// <summary>
        /// The date the VPC was added to your Vultr account.
        /// </summary>
        public readonly string DateCreated;
        /// <summary>
        /// The VPC's description.
        /// </summary>
        public readonly string Description;
        public readonly ImmutableArray<Outputs.GetVPCFilterResult> Filters;
        /// <summary>
        /// The provider-assigned unique ID for this managed resource.
        /// </summary>
        public readonly string Id;
        /// <summary>
        /// The ID of the region that the VPC is in.
        /// </summary>
        public readonly string Region;
        /// <summary>
        /// The IPv4 network address. For example: 10.1.1.0.
        /// </summary>
        public readonly string V4Subnet;
        /// <summary>
        /// The number of bits for the netmask in CIDR notation. Example: 20
        /// </summary>
        public readonly int V4SubnetMask;

        [OutputConstructor]
        private GetVPCResult(
            string dateCreated,

            string description,

            ImmutableArray<Outputs.GetVPCFilterResult> filters,

            string id,

            string region,

            string v4Subnet,

            int v4SubnetMask)
        {
            DateCreated = dateCreated;
            Description = description;
            Filters = filters;
            Id = id;
            Region = region;
            V4Subnet = v4Subnet;
            V4SubnetMask = v4SubnetMask;
        }
    }
}
