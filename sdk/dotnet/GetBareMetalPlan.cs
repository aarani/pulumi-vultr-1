// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;
using Pulumi.Utilities;

namespace Pulumi.Vultr
{
    public static class GetBareMetalPlan
    {
        /// <summary>
        /// Get information about a Vultr bare metal server plan.
        /// 
        /// {{% examples %}}
        /// ## Example Usage
        /// {{% example %}}
        /// 
        /// Get the information for a plan by `id`:
        /// 
        /// ```csharp
        /// using Pulumi;
        /// using Vultr = Pulumi.Vultr;
        /// 
        /// class MyStack : Stack
        /// {
        ///     public MyStack()
        ///     {
        ///         var myPlan = Output.Create(Vultr.GetBareMetalPlan.InvokeAsync(new Vultr.GetBareMetalPlanArgs
        ///         {
        ///             Filters = 
        ///             {
        ///                 new Vultr.Inputs.GetBareMetalPlanFilterArgs
        ///                 {
        ///                     Name = "id",
        ///                     Values = 
        ///                     {
        ///                         "vbm-4c-32gb",
        ///                     },
        ///                 },
        ///             },
        ///         }));
        ///     }
        /// 
        /// }
        /// ```
        /// {{% /example %}}
        /// {{% /examples %}}
        /// </summary>
        public static Task<GetBareMetalPlanResult> InvokeAsync(GetBareMetalPlanArgs? args = null, InvokeOptions? options = null)
            => Pulumi.Deployment.Instance.InvokeAsync<GetBareMetalPlanResult>("vultr:index/getBareMetalPlan:getBareMetalPlan", args ?? new GetBareMetalPlanArgs(), options.WithVersion());

        /// <summary>
        /// Get information about a Vultr bare metal server plan.
        /// 
        /// {{% examples %}}
        /// ## Example Usage
        /// {{% example %}}
        /// 
        /// Get the information for a plan by `id`:
        /// 
        /// ```csharp
        /// using Pulumi;
        /// using Vultr = Pulumi.Vultr;
        /// 
        /// class MyStack : Stack
        /// {
        ///     public MyStack()
        ///     {
        ///         var myPlan = Output.Create(Vultr.GetBareMetalPlan.InvokeAsync(new Vultr.GetBareMetalPlanArgs
        ///         {
        ///             Filters = 
        ///             {
        ///                 new Vultr.Inputs.GetBareMetalPlanFilterArgs
        ///                 {
        ///                     Name = "id",
        ///                     Values = 
        ///                     {
        ///                         "vbm-4c-32gb",
        ///                     },
        ///                 },
        ///             },
        ///         }));
        ///     }
        /// 
        /// }
        /// ```
        /// {{% /example %}}
        /// {{% /examples %}}
        /// </summary>
        public static Output<GetBareMetalPlanResult> Invoke(GetBareMetalPlanInvokeArgs? args = null, InvokeOptions? options = null)
            => Pulumi.Deployment.Instance.Invoke<GetBareMetalPlanResult>("vultr:index/getBareMetalPlan:getBareMetalPlan", args ?? new GetBareMetalPlanInvokeArgs(), options.WithVersion());
    }


    public sealed class GetBareMetalPlanArgs : Pulumi.InvokeArgs
    {
        [Input("filters")]
        private List<Inputs.GetBareMetalPlanFilterArgs>? _filters;

        /// <summary>
        /// Query parameters for finding plans.
        /// </summary>
        public List<Inputs.GetBareMetalPlanFilterArgs> Filters
        {
            get => _filters ?? (_filters = new List<Inputs.GetBareMetalPlanFilterArgs>());
            set => _filters = value;
        }

        public GetBareMetalPlanArgs()
        {
        }
    }

    public sealed class GetBareMetalPlanInvokeArgs : Pulumi.InvokeArgs
    {
        [Input("filters")]
        private InputList<Inputs.GetBareMetalPlanFilterInputArgs>? _filters;

        /// <summary>
        /// Query parameters for finding plans.
        /// </summary>
        public InputList<Inputs.GetBareMetalPlanFilterInputArgs> Filters
        {
            get => _filters ?? (_filters = new InputList<Inputs.GetBareMetalPlanFilterInputArgs>());
            set => _filters = value;
        }

        public GetBareMetalPlanInvokeArgs()
        {
        }
    }


    [OutputType]
    public sealed class GetBareMetalPlanResult
    {
        /// <summary>
        /// The bandwidth available on the plan.
        /// </summary>
        public readonly int Bandwidth;
        /// <summary>
        /// The number of CPUs available on the plan.
        /// </summary>
        public readonly int CpuCount;
        /// <summary>
        /// The CPU model of the plan.
        /// </summary>
        public readonly string CpuModel;
        /// <summary>
        /// The number of CPU threads.
        /// </summary>
        public readonly int CpuThreads;
        /// <summary>
        /// The description of the disk(s) on the plan.
        /// </summary>
        public readonly int Disk;
        /// <summary>
        /// The number of disks that this plan offers.
        /// </summary>
        public readonly int DiskCount;
        public readonly ImmutableArray<Outputs.GetBareMetalPlanFilterResult> Filters;
        /// <summary>
        /// The provider-assigned unique ID for this managed resource.
        /// </summary>
        public readonly string Id;
        public readonly ImmutableArray<string> Locations;
        /// <summary>
        /// The price per month of the plan in USD.
        /// </summary>
        public readonly int MonthlyCost;
        /// <summary>
        /// The amount of memory available on the plan in MB.
        /// </summary>
        public readonly int Ram;
        /// <summary>
        /// The type of plan it is.
        /// </summary>
        public readonly string Type;

        [OutputConstructor]
        private GetBareMetalPlanResult(
            int bandwidth,

            int cpuCount,

            string cpuModel,

            int cpuThreads,

            int disk,

            int diskCount,

            ImmutableArray<Outputs.GetBareMetalPlanFilterResult> filters,

            string id,

            ImmutableArray<string> locations,

            int monthlyCost,

            int ram,

            string type)
        {
            Bandwidth = bandwidth;
            CpuCount = cpuCount;
            CpuModel = cpuModel;
            CpuThreads = cpuThreads;
            Disk = disk;
            DiskCount = diskCount;
            Filters = filters;
            Id = id;
            Locations = locations;
            MonthlyCost = monthlyCost;
            Ram = ram;
            Type = type;
        }
    }
}
