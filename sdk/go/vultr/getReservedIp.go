// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package vultr

import (
	"context"
	"reflect"

	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// Get information about a Vultr reserved IP address.
//
// ## Example Usage
//
// Get the information for a reserved IP by `label`:
//
// ```go
// package main
//
// import (
// 	"github.com/pulumi/pulumi-vultr/sdk/go/vultr"
// 	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
// )
//
// func main() {
// 	pulumi.Run(func(ctx *pulumi.Context) error {
// 		_, err := vultr.GetReservedIp(ctx, &GetReservedIpArgs{
// 			Filters: []GetReservedIpFilter{
// 				GetReservedIpFilter{
// 					Name: "label",
// 					Values: []string{
// 						"my-reserved-ip-label",
// 					},
// 				},
// 			},
// 		}, nil)
// 		if err != nil {
// 			return err
// 		}
// 		return nil
// 	})
// }
// ```
func GetReservedIp(ctx *pulumi.Context, args *GetReservedIpArgs, opts ...pulumi.InvokeOption) (*GetReservedIpResult, error) {
	var rv GetReservedIpResult
	err := ctx.Invoke("vultr:index/getReservedIp:getReservedIp", args, &rv, opts...)
	if err != nil {
		return nil, err
	}
	return &rv, nil
}

// A collection of arguments for invoking getReservedIp.
type GetReservedIpArgs struct {
	// Query parameters for finding reserved IP addresses.
	Filters []GetReservedIpFilter `pulumi:"filters"`
}

// A collection of values returned by getReservedIp.
type GetReservedIpResult struct {
	Filters []GetReservedIpFilter `pulumi:"filters"`
	// The provider-assigned unique ID for this managed resource.
	Id string `pulumi:"id"`
	// The ID of the VPS the reserved IP is attached to.
	InstanceId string `pulumi:"instanceId"`
	// The IP type of the reserved IP.
	IpType string `pulumi:"ipType"`
	// The label of the reserved IP.
	Label string `pulumi:"label"`
	// The ID of the region that the reserved IP is in.
	Region string `pulumi:"region"`
	// The subnet of the reserved IP.
	Subnet string `pulumi:"subnet"`
	// The subnet size of the reserved IP.
	SubnetSize int `pulumi:"subnetSize"`
}

func GetReservedIpOutput(ctx *pulumi.Context, args GetReservedIpOutputArgs, opts ...pulumi.InvokeOption) GetReservedIpResultOutput {
	return pulumi.ToOutputWithContext(context.Background(), args).
		ApplyT(func(v interface{}) (GetReservedIpResult, error) {
			args := v.(GetReservedIpArgs)
			r, err := GetReservedIp(ctx, &args, opts...)
			var s GetReservedIpResult
			if r != nil {
				s = *r
			}
			return s, err
		}).(GetReservedIpResultOutput)
}

// A collection of arguments for invoking getReservedIp.
type GetReservedIpOutputArgs struct {
	// Query parameters for finding reserved IP addresses.
	Filters GetReservedIpFilterArrayInput `pulumi:"filters"`
}

func (GetReservedIpOutputArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*GetReservedIpArgs)(nil)).Elem()
}

// A collection of values returned by getReservedIp.
type GetReservedIpResultOutput struct{ *pulumi.OutputState }

func (GetReservedIpResultOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*GetReservedIpResult)(nil)).Elem()
}

func (o GetReservedIpResultOutput) ToGetReservedIpResultOutput() GetReservedIpResultOutput {
	return o
}

func (o GetReservedIpResultOutput) ToGetReservedIpResultOutputWithContext(ctx context.Context) GetReservedIpResultOutput {
	return o
}

func (o GetReservedIpResultOutput) Filters() GetReservedIpFilterArrayOutput {
	return o.ApplyT(func(v GetReservedIpResult) []GetReservedIpFilter { return v.Filters }).(GetReservedIpFilterArrayOutput)
}

// The provider-assigned unique ID for this managed resource.
func (o GetReservedIpResultOutput) Id() pulumi.StringOutput {
	return o.ApplyT(func(v GetReservedIpResult) string { return v.Id }).(pulumi.StringOutput)
}

// The ID of the VPS the reserved IP is attached to.
func (o GetReservedIpResultOutput) InstanceId() pulumi.StringOutput {
	return o.ApplyT(func(v GetReservedIpResult) string { return v.InstanceId }).(pulumi.StringOutput)
}

// The IP type of the reserved IP.
func (o GetReservedIpResultOutput) IpType() pulumi.StringOutput {
	return o.ApplyT(func(v GetReservedIpResult) string { return v.IpType }).(pulumi.StringOutput)
}

// The label of the reserved IP.
func (o GetReservedIpResultOutput) Label() pulumi.StringOutput {
	return o.ApplyT(func(v GetReservedIpResult) string { return v.Label }).(pulumi.StringOutput)
}

// The ID of the region that the reserved IP is in.
func (o GetReservedIpResultOutput) Region() pulumi.StringOutput {
	return o.ApplyT(func(v GetReservedIpResult) string { return v.Region }).(pulumi.StringOutput)
}

// The subnet of the reserved IP.
func (o GetReservedIpResultOutput) Subnet() pulumi.StringOutput {
	return o.ApplyT(func(v GetReservedIpResult) string { return v.Subnet }).(pulumi.StringOutput)
}

// The subnet size of the reserved IP.
func (o GetReservedIpResultOutput) SubnetSize() pulumi.IntOutput {
	return o.ApplyT(func(v GetReservedIpResult) int { return v.SubnetSize }).(pulumi.IntOutput)
}

func init() {
	pulumi.RegisterOutputType(GetReservedIpResultOutput{})
}
