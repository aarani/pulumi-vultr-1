// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package vultr

import (
	"context"
	"reflect"

	"github.com/pkg/errors"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// Provides a Vultr VPC resource. This can be used to create, read, and delete VPCs on your Vultr account.
//
// ## Example Usage
//
// Create a new VPC with an automatically generated CIDR block:
//
// ```go
// package main
//
// import (
// 	"github.com/pulumi/pulumi-vultr/sdk/go/vultr"
// 	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
// )
//
// func main() {
// 	pulumi.Run(func(ctx *pulumi.Context) error {
// 		_, err := vultr.NewVPC(ctx, "myVpc", &vultr.VPCArgs{
// 			Description: pulumi.String("my vpc"),
// 			Region:      pulumi.String("ewr"),
// 		})
// 		if err != nil {
// 			return err
// 		}
// 		return nil
// 	})
// }
// ```
//
// Create a new VPC with a specified CIDR block:
//
// ```go
// package main
//
// import (
// 	"github.com/pulumi/pulumi-vultr/sdk/go/vultr"
// 	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
// )
//
// func main() {
// 	pulumi.Run(func(ctx *pulumi.Context) error {
// 		_, err := vultr.NewVPC(ctx, "myVpc", &vultr.VPCArgs{
// 			Description:  pulumi.String("my private vpc"),
// 			Region:       pulumi.String("ewr"),
// 			V4Subnet:     pulumi.String("10.0.0.0"),
// 			V4SubnetMask: pulumi.Int(24),
// 		})
// 		if err != nil {
// 			return err
// 		}
// 		return nil
// 	})
// }
// ```
//
// ## Import
//
// VPCs can be imported using the VPC `ID`, e.g.
//
// ```sh
//  $ pulumi import vultr:index/vPC:VPC my_vpc 0e04f918-575e-41cb-86f6-d729b354a5a1
// ```
type VPC struct {
	pulumi.CustomResourceState

	// The date that the VPC was added to your Vultr account.
	DateCreated pulumi.StringOutput `pulumi:"dateCreated"`
	// The description you want to give your VPC.
	Description pulumi.StringPtrOutput `pulumi:"description"`
	// The region ID that you want the VPC to be created in.
	Region pulumi.StringOutput `pulumi:"region"`
	// The IPv4 subnet to be used when attaching instances to this VPC.
	V4Subnet pulumi.StringOutput `pulumi:"v4Subnet"`
	// The number of bits for the netmask in CIDR notation. Example: 32
	V4SubnetMask pulumi.IntOutput `pulumi:"v4SubnetMask"`
}

// NewVPC registers a new resource with the given unique name, arguments, and options.
func NewVPC(ctx *pulumi.Context,
	name string, args *VPCArgs, opts ...pulumi.ResourceOption) (*VPC, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.Region == nil {
		return nil, errors.New("invalid value for required argument 'Region'")
	}
	var resource VPC
	err := ctx.RegisterResource("vultr:index/vPC:VPC", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetVPC gets an existing VPC resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetVPC(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *VPCState, opts ...pulumi.ResourceOption) (*VPC, error) {
	var resource VPC
	err := ctx.ReadResource("vultr:index/vPC:VPC", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering VPC resources.
type vpcState struct {
	// The date that the VPC was added to your Vultr account.
	DateCreated *string `pulumi:"dateCreated"`
	// The description you want to give your VPC.
	Description *string `pulumi:"description"`
	// The region ID that you want the VPC to be created in.
	Region *string `pulumi:"region"`
	// The IPv4 subnet to be used when attaching instances to this VPC.
	V4Subnet *string `pulumi:"v4Subnet"`
	// The number of bits for the netmask in CIDR notation. Example: 32
	V4SubnetMask *int `pulumi:"v4SubnetMask"`
}

type VPCState struct {
	// The date that the VPC was added to your Vultr account.
	DateCreated pulumi.StringPtrInput
	// The description you want to give your VPC.
	Description pulumi.StringPtrInput
	// The region ID that you want the VPC to be created in.
	Region pulumi.StringPtrInput
	// The IPv4 subnet to be used when attaching instances to this VPC.
	V4Subnet pulumi.StringPtrInput
	// The number of bits for the netmask in CIDR notation. Example: 32
	V4SubnetMask pulumi.IntPtrInput
}

func (VPCState) ElementType() reflect.Type {
	return reflect.TypeOf((*vpcState)(nil)).Elem()
}

type vpcArgs struct {
	// The description you want to give your VPC.
	Description *string `pulumi:"description"`
	// The region ID that you want the VPC to be created in.
	Region string `pulumi:"region"`
	// The IPv4 subnet to be used when attaching instances to this VPC.
	V4Subnet *string `pulumi:"v4Subnet"`
	// The number of bits for the netmask in CIDR notation. Example: 32
	V4SubnetMask *int `pulumi:"v4SubnetMask"`
}

// The set of arguments for constructing a VPC resource.
type VPCArgs struct {
	// The description you want to give your VPC.
	Description pulumi.StringPtrInput
	// The region ID that you want the VPC to be created in.
	Region pulumi.StringInput
	// The IPv4 subnet to be used when attaching instances to this VPC.
	V4Subnet pulumi.StringPtrInput
	// The number of bits for the netmask in CIDR notation. Example: 32
	V4SubnetMask pulumi.IntPtrInput
}

func (VPCArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*vpcArgs)(nil)).Elem()
}

type VPCInput interface {
	pulumi.Input

	ToVPCOutput() VPCOutput
	ToVPCOutputWithContext(ctx context.Context) VPCOutput
}

func (*VPC) ElementType() reflect.Type {
	return reflect.TypeOf((**VPC)(nil)).Elem()
}

func (i *VPC) ToVPCOutput() VPCOutput {
	return i.ToVPCOutputWithContext(context.Background())
}

func (i *VPC) ToVPCOutputWithContext(ctx context.Context) VPCOutput {
	return pulumi.ToOutputWithContext(ctx, i).(VPCOutput)
}

// VPCArrayInput is an input type that accepts VPCArray and VPCArrayOutput values.
// You can construct a concrete instance of `VPCArrayInput` via:
//
//          VPCArray{ VPCArgs{...} }
type VPCArrayInput interface {
	pulumi.Input

	ToVPCArrayOutput() VPCArrayOutput
	ToVPCArrayOutputWithContext(context.Context) VPCArrayOutput
}

type VPCArray []VPCInput

func (VPCArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*VPC)(nil)).Elem()
}

func (i VPCArray) ToVPCArrayOutput() VPCArrayOutput {
	return i.ToVPCArrayOutputWithContext(context.Background())
}

func (i VPCArray) ToVPCArrayOutputWithContext(ctx context.Context) VPCArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(VPCArrayOutput)
}

// VPCMapInput is an input type that accepts VPCMap and VPCMapOutput values.
// You can construct a concrete instance of `VPCMapInput` via:
//
//          VPCMap{ "key": VPCArgs{...} }
type VPCMapInput interface {
	pulumi.Input

	ToVPCMapOutput() VPCMapOutput
	ToVPCMapOutputWithContext(context.Context) VPCMapOutput
}

type VPCMap map[string]VPCInput

func (VPCMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*VPC)(nil)).Elem()
}

func (i VPCMap) ToVPCMapOutput() VPCMapOutput {
	return i.ToVPCMapOutputWithContext(context.Background())
}

func (i VPCMap) ToVPCMapOutputWithContext(ctx context.Context) VPCMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(VPCMapOutput)
}

type VPCOutput struct{ *pulumi.OutputState }

func (VPCOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**VPC)(nil)).Elem()
}

func (o VPCOutput) ToVPCOutput() VPCOutput {
	return o
}

func (o VPCOutput) ToVPCOutputWithContext(ctx context.Context) VPCOutput {
	return o
}

// The date that the VPC was added to your Vultr account.
func (o VPCOutput) DateCreated() pulumi.StringOutput {
	return o.ApplyT(func(v *VPC) pulumi.StringOutput { return v.DateCreated }).(pulumi.StringOutput)
}

// The description you want to give your VPC.
func (o VPCOutput) Description() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *VPC) pulumi.StringPtrOutput { return v.Description }).(pulumi.StringPtrOutput)
}

// The region ID that you want the VPC to be created in.
func (o VPCOutput) Region() pulumi.StringOutput {
	return o.ApplyT(func(v *VPC) pulumi.StringOutput { return v.Region }).(pulumi.StringOutput)
}

// The IPv4 subnet to be used when attaching instances to this VPC.
func (o VPCOutput) V4Subnet() pulumi.StringOutput {
	return o.ApplyT(func(v *VPC) pulumi.StringOutput { return v.V4Subnet }).(pulumi.StringOutput)
}

// The number of bits for the netmask in CIDR notation. Example: 32
func (o VPCOutput) V4SubnetMask() pulumi.IntOutput {
	return o.ApplyT(func(v *VPC) pulumi.IntOutput { return v.V4SubnetMask }).(pulumi.IntOutput)
}

type VPCArrayOutput struct{ *pulumi.OutputState }

func (VPCArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*VPC)(nil)).Elem()
}

func (o VPCArrayOutput) ToVPCArrayOutput() VPCArrayOutput {
	return o
}

func (o VPCArrayOutput) ToVPCArrayOutputWithContext(ctx context.Context) VPCArrayOutput {
	return o
}

func (o VPCArrayOutput) Index(i pulumi.IntInput) VPCOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) *VPC {
		return vs[0].([]*VPC)[vs[1].(int)]
	}).(VPCOutput)
}

type VPCMapOutput struct{ *pulumi.OutputState }

func (VPCMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*VPC)(nil)).Elem()
}

func (o VPCMapOutput) ToVPCMapOutput() VPCMapOutput {
	return o
}

func (o VPCMapOutput) ToVPCMapOutputWithContext(ctx context.Context) VPCMapOutput {
	return o
}

func (o VPCMapOutput) MapIndex(k pulumi.StringInput) VPCOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) *VPC {
		return vs[0].(map[string]*VPC)[vs[1].(string)]
	}).(VPCOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*VPCInput)(nil)).Elem(), &VPC{})
	pulumi.RegisterInputType(reflect.TypeOf((*VPCArrayInput)(nil)).Elem(), VPCArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*VPCMapInput)(nil)).Elem(), VPCMap{})
	pulumi.RegisterOutputType(VPCOutput{})
	pulumi.RegisterOutputType(VPCArrayOutput{})
	pulumi.RegisterOutputType(VPCMapOutput{})
}
