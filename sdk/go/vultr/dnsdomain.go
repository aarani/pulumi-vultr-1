// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package vultr

import (
	"context"
	"reflect"

	"github.com/pkg/errors"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// Provides a Vultr DNS Domain resource. This can be used to create, read, modify, and delete DNS Domains.
//
// ## Example Usage
//
// Create a new DNS Domain
//
// ```go
// package main
//
// import (
// 	"github.com/pulumi/pulumi-vultr/sdk/go/vultr"
// 	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
// )
//
// func main() {
// 	pulumi.Run(func(ctx *pulumi.Context) error {
// 		_, err := vultr.NewDNSDomain(ctx, "myDomain", &vultr.DNSDomainArgs{
// 			Domain: pulumi.String("domain.com"),
// 			Ip:     pulumi.String("66.42.94.227"),
// 		})
// 		if err != nil {
// 			return err
// 		}
// 		return nil
// 	})
// }
// ```
//
// ## Import
//
// DNS Domains can be imported using the Dns Domain `domain`, e.g.
//
// ```sh
//  $ pulumi import vultr:index/dNSDomain:DNSDomain name domain.com
// ```
type DNSDomain struct {
	pulumi.CustomResourceState

	// The date the domain was added to your account.
	DateCreated pulumi.StringOutput `pulumi:"dateCreated"`
	// The Domain's DNSSEC status. Valid options are `enabled` or `disabled`. Note `disabled` is default
	DnsSec pulumi.StringPtrOutput `pulumi:"dnsSec"`
	// Name of domain.
	Domain pulumi.StringOutput `pulumi:"domain"`
	// Instance IP you want associated to domain. If omitted this will create a domain with no records.
	Ip pulumi.StringPtrOutput `pulumi:"ip"`
}

// NewDNSDomain registers a new resource with the given unique name, arguments, and options.
func NewDNSDomain(ctx *pulumi.Context,
	name string, args *DNSDomainArgs, opts ...pulumi.ResourceOption) (*DNSDomain, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.Domain == nil {
		return nil, errors.New("invalid value for required argument 'Domain'")
	}
	var resource DNSDomain
	err := ctx.RegisterResource("vultr:index/dNSDomain:DNSDomain", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetDNSDomain gets an existing DNSDomain resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetDNSDomain(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *DNSDomainState, opts ...pulumi.ResourceOption) (*DNSDomain, error) {
	var resource DNSDomain
	err := ctx.ReadResource("vultr:index/dNSDomain:DNSDomain", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering DNSDomain resources.
type dnsdomainState struct {
	// The date the domain was added to your account.
	DateCreated *string `pulumi:"dateCreated"`
	// The Domain's DNSSEC status. Valid options are `enabled` or `disabled`. Note `disabled` is default
	DnsSec *string `pulumi:"dnsSec"`
	// Name of domain.
	Domain *string `pulumi:"domain"`
	// Instance IP you want associated to domain. If omitted this will create a domain with no records.
	Ip *string `pulumi:"ip"`
}

type DNSDomainState struct {
	// The date the domain was added to your account.
	DateCreated pulumi.StringPtrInput
	// The Domain's DNSSEC status. Valid options are `enabled` or `disabled`. Note `disabled` is default
	DnsSec pulumi.StringPtrInput
	// Name of domain.
	Domain pulumi.StringPtrInput
	// Instance IP you want associated to domain. If omitted this will create a domain with no records.
	Ip pulumi.StringPtrInput
}

func (DNSDomainState) ElementType() reflect.Type {
	return reflect.TypeOf((*dnsdomainState)(nil)).Elem()
}

type dnsdomainArgs struct {
	// The Domain's DNSSEC status. Valid options are `enabled` or `disabled`. Note `disabled` is default
	DnsSec *string `pulumi:"dnsSec"`
	// Name of domain.
	Domain string `pulumi:"domain"`
	// Instance IP you want associated to domain. If omitted this will create a domain with no records.
	Ip *string `pulumi:"ip"`
}

// The set of arguments for constructing a DNSDomain resource.
type DNSDomainArgs struct {
	// The Domain's DNSSEC status. Valid options are `enabled` or `disabled`. Note `disabled` is default
	DnsSec pulumi.StringPtrInput
	// Name of domain.
	Domain pulumi.StringInput
	// Instance IP you want associated to domain. If omitted this will create a domain with no records.
	Ip pulumi.StringPtrInput
}

func (DNSDomainArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*dnsdomainArgs)(nil)).Elem()
}

type DNSDomainInput interface {
	pulumi.Input

	ToDNSDomainOutput() DNSDomainOutput
	ToDNSDomainOutputWithContext(ctx context.Context) DNSDomainOutput
}

func (*DNSDomain) ElementType() reflect.Type {
	return reflect.TypeOf((**DNSDomain)(nil)).Elem()
}

func (i *DNSDomain) ToDNSDomainOutput() DNSDomainOutput {
	return i.ToDNSDomainOutputWithContext(context.Background())
}

func (i *DNSDomain) ToDNSDomainOutputWithContext(ctx context.Context) DNSDomainOutput {
	return pulumi.ToOutputWithContext(ctx, i).(DNSDomainOutput)
}

// DNSDomainArrayInput is an input type that accepts DNSDomainArray and DNSDomainArrayOutput values.
// You can construct a concrete instance of `DNSDomainArrayInput` via:
//
//          DNSDomainArray{ DNSDomainArgs{...} }
type DNSDomainArrayInput interface {
	pulumi.Input

	ToDNSDomainArrayOutput() DNSDomainArrayOutput
	ToDNSDomainArrayOutputWithContext(context.Context) DNSDomainArrayOutput
}

type DNSDomainArray []DNSDomainInput

func (DNSDomainArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*DNSDomain)(nil)).Elem()
}

func (i DNSDomainArray) ToDNSDomainArrayOutput() DNSDomainArrayOutput {
	return i.ToDNSDomainArrayOutputWithContext(context.Background())
}

func (i DNSDomainArray) ToDNSDomainArrayOutputWithContext(ctx context.Context) DNSDomainArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(DNSDomainArrayOutput)
}

// DNSDomainMapInput is an input type that accepts DNSDomainMap and DNSDomainMapOutput values.
// You can construct a concrete instance of `DNSDomainMapInput` via:
//
//          DNSDomainMap{ "key": DNSDomainArgs{...} }
type DNSDomainMapInput interface {
	pulumi.Input

	ToDNSDomainMapOutput() DNSDomainMapOutput
	ToDNSDomainMapOutputWithContext(context.Context) DNSDomainMapOutput
}

type DNSDomainMap map[string]DNSDomainInput

func (DNSDomainMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*DNSDomain)(nil)).Elem()
}

func (i DNSDomainMap) ToDNSDomainMapOutput() DNSDomainMapOutput {
	return i.ToDNSDomainMapOutputWithContext(context.Background())
}

func (i DNSDomainMap) ToDNSDomainMapOutputWithContext(ctx context.Context) DNSDomainMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(DNSDomainMapOutput)
}

type DNSDomainOutput struct{ *pulumi.OutputState }

func (DNSDomainOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**DNSDomain)(nil)).Elem()
}

func (o DNSDomainOutput) ToDNSDomainOutput() DNSDomainOutput {
	return o
}

func (o DNSDomainOutput) ToDNSDomainOutputWithContext(ctx context.Context) DNSDomainOutput {
	return o
}

type DNSDomainArrayOutput struct{ *pulumi.OutputState }

func (DNSDomainArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*DNSDomain)(nil)).Elem()
}

func (o DNSDomainArrayOutput) ToDNSDomainArrayOutput() DNSDomainArrayOutput {
	return o
}

func (o DNSDomainArrayOutput) ToDNSDomainArrayOutputWithContext(ctx context.Context) DNSDomainArrayOutput {
	return o
}

func (o DNSDomainArrayOutput) Index(i pulumi.IntInput) DNSDomainOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) *DNSDomain {
		return vs[0].([]*DNSDomain)[vs[1].(int)]
	}).(DNSDomainOutput)
}

type DNSDomainMapOutput struct{ *pulumi.OutputState }

func (DNSDomainMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*DNSDomain)(nil)).Elem()
}

func (o DNSDomainMapOutput) ToDNSDomainMapOutput() DNSDomainMapOutput {
	return o
}

func (o DNSDomainMapOutput) ToDNSDomainMapOutputWithContext(ctx context.Context) DNSDomainMapOutput {
	return o
}

func (o DNSDomainMapOutput) MapIndex(k pulumi.StringInput) DNSDomainOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) *DNSDomain {
		return vs[0].(map[string]*DNSDomain)[vs[1].(string)]
	}).(DNSDomainOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*DNSDomainInput)(nil)).Elem(), &DNSDomain{})
	pulumi.RegisterInputType(reflect.TypeOf((*DNSDomainArrayInput)(nil)).Elem(), DNSDomainArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*DNSDomainMapInput)(nil)).Elem(), DNSDomainMap{})
	pulumi.RegisterOutputType(DNSDomainOutput{})
	pulumi.RegisterOutputType(DNSDomainArrayOutput{})
	pulumi.RegisterOutputType(DNSDomainMapOutput{})
}
