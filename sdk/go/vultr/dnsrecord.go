// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package vultr

import (
	"context"
	"reflect"

	"github.com/pkg/errors"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// Provides a Vultr DNS Record resource. This can be used to create, read, modify, and delete DNS Records.
//
// ## Example Usage
//
// Create a new DNS Record
//
// ```go
// package main
//
// import (
// 	"github.com/pulumi/pulumi-vultr/sdk/go/vultr"
// 	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
// )
//
// func main() {
// 	pulumi.Run(func(ctx *pulumi.Context) error {
// 		myDomain, err := vultr.NewDNSDomain(ctx, "myDomain", &vultr.DNSDomainArgs{
// 			Domain: pulumi.String("domain.com"),
// 			Ip:     pulumi.String("66.42.94.227"),
// 		})
// 		if err != nil {
// 			return err
// 		}
// 		_, err = vultr.NewDNSRecord(ctx, "myRecord", &vultr.DNSRecordArgs{
// 			Data:   pulumi.String("66.42.94.227"),
// 			Domain: myDomain.ID(),
// 			Type:   pulumi.String("A"),
// 		})
// 		if err != nil {
// 			return err
// 		}
// 		return nil
// 	})
// }
// ```
//
// ## Import
//
// DNS Records can be imported using the Dns Domain `domain` and DNS Record `ID` e.g.
//
// ```sh
//  $ pulumi import vultr:index/dNSRecord:DNSRecord rec domain.com,1a0019bd-7645-4310-81bd-03bc5906940f
// ```
type DNSRecord struct {
	pulumi.CustomResourceState

	// IP Address of the instance the domain is associated with.
	Data pulumi.StringOutput `pulumi:"data"`
	// Name of the DNS Domain this record will belong to.
	Domain pulumi.StringOutput `pulumi:"domain"`
	// Name (subdomain) for this record.
	Name pulumi.StringOutput `pulumi:"name"`
	// Priority of this record (only required for MX and SRV).
	Priority pulumi.IntPtrOutput `pulumi:"priority"`
	// The time to live of this record.
	Ttl pulumi.IntPtrOutput `pulumi:"ttl"`
	// Type of record.
	Type pulumi.StringOutput `pulumi:"type"`
}

// NewDNSRecord registers a new resource with the given unique name, arguments, and options.
func NewDNSRecord(ctx *pulumi.Context,
	name string, args *DNSRecordArgs, opts ...pulumi.ResourceOption) (*DNSRecord, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.Data == nil {
		return nil, errors.New("invalid value for required argument 'Data'")
	}
	if args.Domain == nil {
		return nil, errors.New("invalid value for required argument 'Domain'")
	}
	if args.Type == nil {
		return nil, errors.New("invalid value for required argument 'Type'")
	}
	var resource DNSRecord
	err := ctx.RegisterResource("vultr:index/dNSRecord:DNSRecord", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetDNSRecord gets an existing DNSRecord resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetDNSRecord(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *DNSRecordState, opts ...pulumi.ResourceOption) (*DNSRecord, error) {
	var resource DNSRecord
	err := ctx.ReadResource("vultr:index/dNSRecord:DNSRecord", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering DNSRecord resources.
type dnsrecordState struct {
	// IP Address of the instance the domain is associated with.
	Data *string `pulumi:"data"`
	// Name of the DNS Domain this record will belong to.
	Domain *string `pulumi:"domain"`
	// Name (subdomain) for this record.
	Name *string `pulumi:"name"`
	// Priority of this record (only required for MX and SRV).
	Priority *int `pulumi:"priority"`
	// The time to live of this record.
	Ttl *int `pulumi:"ttl"`
	// Type of record.
	Type *string `pulumi:"type"`
}

type DNSRecordState struct {
	// IP Address of the instance the domain is associated with.
	Data pulumi.StringPtrInput
	// Name of the DNS Domain this record will belong to.
	Domain pulumi.StringPtrInput
	// Name (subdomain) for this record.
	Name pulumi.StringPtrInput
	// Priority of this record (only required for MX and SRV).
	Priority pulumi.IntPtrInput
	// The time to live of this record.
	Ttl pulumi.IntPtrInput
	// Type of record.
	Type pulumi.StringPtrInput
}

func (DNSRecordState) ElementType() reflect.Type {
	return reflect.TypeOf((*dnsrecordState)(nil)).Elem()
}

type dnsrecordArgs struct {
	// IP Address of the instance the domain is associated with.
	Data string `pulumi:"data"`
	// Name of the DNS Domain this record will belong to.
	Domain string `pulumi:"domain"`
	// Name (subdomain) for this record.
	Name *string `pulumi:"name"`
	// Priority of this record (only required for MX and SRV).
	Priority *int `pulumi:"priority"`
	// The time to live of this record.
	Ttl *int `pulumi:"ttl"`
	// Type of record.
	Type string `pulumi:"type"`
}

// The set of arguments for constructing a DNSRecord resource.
type DNSRecordArgs struct {
	// IP Address of the instance the domain is associated with.
	Data pulumi.StringInput
	// Name of the DNS Domain this record will belong to.
	Domain pulumi.StringInput
	// Name (subdomain) for this record.
	Name pulumi.StringPtrInput
	// Priority of this record (only required for MX and SRV).
	Priority pulumi.IntPtrInput
	// The time to live of this record.
	Ttl pulumi.IntPtrInput
	// Type of record.
	Type pulumi.StringInput
}

func (DNSRecordArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*dnsrecordArgs)(nil)).Elem()
}

type DNSRecordInput interface {
	pulumi.Input

	ToDNSRecordOutput() DNSRecordOutput
	ToDNSRecordOutputWithContext(ctx context.Context) DNSRecordOutput
}

func (*DNSRecord) ElementType() reflect.Type {
	return reflect.TypeOf((**DNSRecord)(nil)).Elem()
}

func (i *DNSRecord) ToDNSRecordOutput() DNSRecordOutput {
	return i.ToDNSRecordOutputWithContext(context.Background())
}

func (i *DNSRecord) ToDNSRecordOutputWithContext(ctx context.Context) DNSRecordOutput {
	return pulumi.ToOutputWithContext(ctx, i).(DNSRecordOutput)
}

// DNSRecordArrayInput is an input type that accepts DNSRecordArray and DNSRecordArrayOutput values.
// You can construct a concrete instance of `DNSRecordArrayInput` via:
//
//          DNSRecordArray{ DNSRecordArgs{...} }
type DNSRecordArrayInput interface {
	pulumi.Input

	ToDNSRecordArrayOutput() DNSRecordArrayOutput
	ToDNSRecordArrayOutputWithContext(context.Context) DNSRecordArrayOutput
}

type DNSRecordArray []DNSRecordInput

func (DNSRecordArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*DNSRecord)(nil)).Elem()
}

func (i DNSRecordArray) ToDNSRecordArrayOutput() DNSRecordArrayOutput {
	return i.ToDNSRecordArrayOutputWithContext(context.Background())
}

func (i DNSRecordArray) ToDNSRecordArrayOutputWithContext(ctx context.Context) DNSRecordArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(DNSRecordArrayOutput)
}

// DNSRecordMapInput is an input type that accepts DNSRecordMap and DNSRecordMapOutput values.
// You can construct a concrete instance of `DNSRecordMapInput` via:
//
//          DNSRecordMap{ "key": DNSRecordArgs{...} }
type DNSRecordMapInput interface {
	pulumi.Input

	ToDNSRecordMapOutput() DNSRecordMapOutput
	ToDNSRecordMapOutputWithContext(context.Context) DNSRecordMapOutput
}

type DNSRecordMap map[string]DNSRecordInput

func (DNSRecordMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*DNSRecord)(nil)).Elem()
}

func (i DNSRecordMap) ToDNSRecordMapOutput() DNSRecordMapOutput {
	return i.ToDNSRecordMapOutputWithContext(context.Background())
}

func (i DNSRecordMap) ToDNSRecordMapOutputWithContext(ctx context.Context) DNSRecordMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(DNSRecordMapOutput)
}

type DNSRecordOutput struct{ *pulumi.OutputState }

func (DNSRecordOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**DNSRecord)(nil)).Elem()
}

func (o DNSRecordOutput) ToDNSRecordOutput() DNSRecordOutput {
	return o
}

func (o DNSRecordOutput) ToDNSRecordOutputWithContext(ctx context.Context) DNSRecordOutput {
	return o
}

type DNSRecordArrayOutput struct{ *pulumi.OutputState }

func (DNSRecordArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*DNSRecord)(nil)).Elem()
}

func (o DNSRecordArrayOutput) ToDNSRecordArrayOutput() DNSRecordArrayOutput {
	return o
}

func (o DNSRecordArrayOutput) ToDNSRecordArrayOutputWithContext(ctx context.Context) DNSRecordArrayOutput {
	return o
}

func (o DNSRecordArrayOutput) Index(i pulumi.IntInput) DNSRecordOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) *DNSRecord {
		return vs[0].([]*DNSRecord)[vs[1].(int)]
	}).(DNSRecordOutput)
}

type DNSRecordMapOutput struct{ *pulumi.OutputState }

func (DNSRecordMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*DNSRecord)(nil)).Elem()
}

func (o DNSRecordMapOutput) ToDNSRecordMapOutput() DNSRecordMapOutput {
	return o
}

func (o DNSRecordMapOutput) ToDNSRecordMapOutputWithContext(ctx context.Context) DNSRecordMapOutput {
	return o
}

func (o DNSRecordMapOutput) MapIndex(k pulumi.StringInput) DNSRecordOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) *DNSRecord {
		return vs[0].(map[string]*DNSRecord)[vs[1].(string)]
	}).(DNSRecordOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*DNSRecordInput)(nil)).Elem(), &DNSRecord{})
	pulumi.RegisterInputType(reflect.TypeOf((*DNSRecordArrayInput)(nil)).Elem(), DNSRecordArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*DNSRecordMapInput)(nil)).Elem(), DNSRecordMap{})
	pulumi.RegisterOutputType(DNSRecordOutput{})
	pulumi.RegisterOutputType(DNSRecordArrayOutput{})
	pulumi.RegisterOutputType(DNSRecordMapOutput{})
}
