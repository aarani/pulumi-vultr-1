// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package vultr

import (
	"context"
	"reflect"

	"github.com/pkg/errors"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// Provides a Vultr instance IPv4 resource. This can be used to create, read, and
// modify a IPv4 address. instance is rebooted by default.
//
// ## Example Usage
//
// Create a new IPv4 address for a instance:
//
// ```go
// package main
//
// import (
// 	"github.com/pulumi/pulumi-vultr/sdk/go/vultr"
// 	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
// )
//
// func main() {
// 	pulumi.Run(func(ctx *pulumi.Context) error {
// 		myInstance, err := vultr.NewInstance(ctx, "myInstance", &vultr.InstanceArgs{
// 			EnableIpv6: pulumi.Bool(true),
// 			OsId:       pulumi.Int(167),
// 			Plan:       pulumi.String("vc2-1c-1gb"),
// 			Region:     pulumi.String("ewr"),
// 		})
// 		if err != nil {
// 			return err
// 		}
// 		_, err = vultr.NewInstanceIPv4(ctx, "myInstanceIpv4", &vultr.InstanceIPv4Args{
// 			InstanceId: myInstance.ID(),
// 			Reboot:     pulumi.Bool(false),
// 		})
// 		if err != nil {
// 			return err
// 		}
// 		return nil
// 	})
// }
// ```
type InstanceIPv4 struct {
	pulumi.CustomResourceState

	// The gateway IP address.
	Gateway pulumi.StringOutput `pulumi:"gateway"`
	// The ID of the instance to be assigned the IPv4 address.
	InstanceId pulumi.StringOutput `pulumi:"instanceId"`
	// The IPv4 address in canonical format.
	Ip pulumi.StringOutput `pulumi:"ip"`
	// The IPv4 netmask in dot-decimal notation.
	Netmask pulumi.StringOutput `pulumi:"netmask"`
	// Default true. Determines whether or not the server is rebooted after adding the IPv4 address.
	Reboot pulumi.BoolPtrOutput `pulumi:"reboot"`
	// The reverse DNS information for this IP address.
	Reverse pulumi.StringOutput `pulumi:"reverse"`
}

// NewInstanceIPv4 registers a new resource with the given unique name, arguments, and options.
func NewInstanceIPv4(ctx *pulumi.Context,
	name string, args *InstanceIPv4Args, opts ...pulumi.ResourceOption) (*InstanceIPv4, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.InstanceId == nil {
		return nil, errors.New("invalid value for required argument 'InstanceId'")
	}
	var resource InstanceIPv4
	err := ctx.RegisterResource("vultr:index/instanceIPv4:InstanceIPv4", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetInstanceIPv4 gets an existing InstanceIPv4 resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetInstanceIPv4(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *InstanceIPv4State, opts ...pulumi.ResourceOption) (*InstanceIPv4, error) {
	var resource InstanceIPv4
	err := ctx.ReadResource("vultr:index/instanceIPv4:InstanceIPv4", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering InstanceIPv4 resources.
type instanceIPv4State struct {
	// The gateway IP address.
	Gateway *string `pulumi:"gateway"`
	// The ID of the instance to be assigned the IPv4 address.
	InstanceId *string `pulumi:"instanceId"`
	// The IPv4 address in canonical format.
	Ip *string `pulumi:"ip"`
	// The IPv4 netmask in dot-decimal notation.
	Netmask *string `pulumi:"netmask"`
	// Default true. Determines whether or not the server is rebooted after adding the IPv4 address.
	Reboot *bool `pulumi:"reboot"`
	// The reverse DNS information for this IP address.
	Reverse *string `pulumi:"reverse"`
}

type InstanceIPv4State struct {
	// The gateway IP address.
	Gateway pulumi.StringPtrInput
	// The ID of the instance to be assigned the IPv4 address.
	InstanceId pulumi.StringPtrInput
	// The IPv4 address in canonical format.
	Ip pulumi.StringPtrInput
	// The IPv4 netmask in dot-decimal notation.
	Netmask pulumi.StringPtrInput
	// Default true. Determines whether or not the server is rebooted after adding the IPv4 address.
	Reboot pulumi.BoolPtrInput
	// The reverse DNS information for this IP address.
	Reverse pulumi.StringPtrInput
}

func (InstanceIPv4State) ElementType() reflect.Type {
	return reflect.TypeOf((*instanceIPv4State)(nil)).Elem()
}

type instanceIPv4Args struct {
	// The ID of the instance to be assigned the IPv4 address.
	InstanceId string `pulumi:"instanceId"`
	// Default true. Determines whether or not the server is rebooted after adding the IPv4 address.
	Reboot *bool `pulumi:"reboot"`
}

// The set of arguments for constructing a InstanceIPv4 resource.
type InstanceIPv4Args struct {
	// The ID of the instance to be assigned the IPv4 address.
	InstanceId pulumi.StringInput
	// Default true. Determines whether or not the server is rebooted after adding the IPv4 address.
	Reboot pulumi.BoolPtrInput
}

func (InstanceIPv4Args) ElementType() reflect.Type {
	return reflect.TypeOf((*instanceIPv4Args)(nil)).Elem()
}

type InstanceIPv4Input interface {
	pulumi.Input

	ToInstanceIPv4Output() InstanceIPv4Output
	ToInstanceIPv4OutputWithContext(ctx context.Context) InstanceIPv4Output
}

func (*InstanceIPv4) ElementType() reflect.Type {
	return reflect.TypeOf((**InstanceIPv4)(nil)).Elem()
}

func (i *InstanceIPv4) ToInstanceIPv4Output() InstanceIPv4Output {
	return i.ToInstanceIPv4OutputWithContext(context.Background())
}

func (i *InstanceIPv4) ToInstanceIPv4OutputWithContext(ctx context.Context) InstanceIPv4Output {
	return pulumi.ToOutputWithContext(ctx, i).(InstanceIPv4Output)
}

// InstanceIPv4ArrayInput is an input type that accepts InstanceIPv4Array and InstanceIPv4ArrayOutput values.
// You can construct a concrete instance of `InstanceIPv4ArrayInput` via:
//
//          InstanceIPv4Array{ InstanceIPv4Args{...} }
type InstanceIPv4ArrayInput interface {
	pulumi.Input

	ToInstanceIPv4ArrayOutput() InstanceIPv4ArrayOutput
	ToInstanceIPv4ArrayOutputWithContext(context.Context) InstanceIPv4ArrayOutput
}

type InstanceIPv4Array []InstanceIPv4Input

func (InstanceIPv4Array) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*InstanceIPv4)(nil)).Elem()
}

func (i InstanceIPv4Array) ToInstanceIPv4ArrayOutput() InstanceIPv4ArrayOutput {
	return i.ToInstanceIPv4ArrayOutputWithContext(context.Background())
}

func (i InstanceIPv4Array) ToInstanceIPv4ArrayOutputWithContext(ctx context.Context) InstanceIPv4ArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(InstanceIPv4ArrayOutput)
}

// InstanceIPv4MapInput is an input type that accepts InstanceIPv4Map and InstanceIPv4MapOutput values.
// You can construct a concrete instance of `InstanceIPv4MapInput` via:
//
//          InstanceIPv4Map{ "key": InstanceIPv4Args{...} }
type InstanceIPv4MapInput interface {
	pulumi.Input

	ToInstanceIPv4MapOutput() InstanceIPv4MapOutput
	ToInstanceIPv4MapOutputWithContext(context.Context) InstanceIPv4MapOutput
}

type InstanceIPv4Map map[string]InstanceIPv4Input

func (InstanceIPv4Map) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*InstanceIPv4)(nil)).Elem()
}

func (i InstanceIPv4Map) ToInstanceIPv4MapOutput() InstanceIPv4MapOutput {
	return i.ToInstanceIPv4MapOutputWithContext(context.Background())
}

func (i InstanceIPv4Map) ToInstanceIPv4MapOutputWithContext(ctx context.Context) InstanceIPv4MapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(InstanceIPv4MapOutput)
}

type InstanceIPv4Output struct{ *pulumi.OutputState }

func (InstanceIPv4Output) ElementType() reflect.Type {
	return reflect.TypeOf((**InstanceIPv4)(nil)).Elem()
}

func (o InstanceIPv4Output) ToInstanceIPv4Output() InstanceIPv4Output {
	return o
}

func (o InstanceIPv4Output) ToInstanceIPv4OutputWithContext(ctx context.Context) InstanceIPv4Output {
	return o
}

// The gateway IP address.
func (o InstanceIPv4Output) Gateway() pulumi.StringOutput {
	return o.ApplyT(func(v *InstanceIPv4) pulumi.StringOutput { return v.Gateway }).(pulumi.StringOutput)
}

// The ID of the instance to be assigned the IPv4 address.
func (o InstanceIPv4Output) InstanceId() pulumi.StringOutput {
	return o.ApplyT(func(v *InstanceIPv4) pulumi.StringOutput { return v.InstanceId }).(pulumi.StringOutput)
}

// The IPv4 address in canonical format.
func (o InstanceIPv4Output) Ip() pulumi.StringOutput {
	return o.ApplyT(func(v *InstanceIPv4) pulumi.StringOutput { return v.Ip }).(pulumi.StringOutput)
}

// The IPv4 netmask in dot-decimal notation.
func (o InstanceIPv4Output) Netmask() pulumi.StringOutput {
	return o.ApplyT(func(v *InstanceIPv4) pulumi.StringOutput { return v.Netmask }).(pulumi.StringOutput)
}

// Default true. Determines whether or not the server is rebooted after adding the IPv4 address.
func (o InstanceIPv4Output) Reboot() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *InstanceIPv4) pulumi.BoolPtrOutput { return v.Reboot }).(pulumi.BoolPtrOutput)
}

// The reverse DNS information for this IP address.
func (o InstanceIPv4Output) Reverse() pulumi.StringOutput {
	return o.ApplyT(func(v *InstanceIPv4) pulumi.StringOutput { return v.Reverse }).(pulumi.StringOutput)
}

type InstanceIPv4ArrayOutput struct{ *pulumi.OutputState }

func (InstanceIPv4ArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*InstanceIPv4)(nil)).Elem()
}

func (o InstanceIPv4ArrayOutput) ToInstanceIPv4ArrayOutput() InstanceIPv4ArrayOutput {
	return o
}

func (o InstanceIPv4ArrayOutput) ToInstanceIPv4ArrayOutputWithContext(ctx context.Context) InstanceIPv4ArrayOutput {
	return o
}

func (o InstanceIPv4ArrayOutput) Index(i pulumi.IntInput) InstanceIPv4Output {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) *InstanceIPv4 {
		return vs[0].([]*InstanceIPv4)[vs[1].(int)]
	}).(InstanceIPv4Output)
}

type InstanceIPv4MapOutput struct{ *pulumi.OutputState }

func (InstanceIPv4MapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*InstanceIPv4)(nil)).Elem()
}

func (o InstanceIPv4MapOutput) ToInstanceIPv4MapOutput() InstanceIPv4MapOutput {
	return o
}

func (o InstanceIPv4MapOutput) ToInstanceIPv4MapOutputWithContext(ctx context.Context) InstanceIPv4MapOutput {
	return o
}

func (o InstanceIPv4MapOutput) MapIndex(k pulumi.StringInput) InstanceIPv4Output {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) *InstanceIPv4 {
		return vs[0].(map[string]*InstanceIPv4)[vs[1].(string)]
	}).(InstanceIPv4Output)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*InstanceIPv4Input)(nil)).Elem(), &InstanceIPv4{})
	pulumi.RegisterInputType(reflect.TypeOf((*InstanceIPv4ArrayInput)(nil)).Elem(), InstanceIPv4Array{})
	pulumi.RegisterInputType(reflect.TypeOf((*InstanceIPv4MapInput)(nil)).Elem(), InstanceIPv4Map{})
	pulumi.RegisterOutputType(InstanceIPv4Output{})
	pulumi.RegisterOutputType(InstanceIPv4ArrayOutput{})
	pulumi.RegisterOutputType(InstanceIPv4MapOutput{})
}
