// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package vultr

import (
	"context"
	"reflect"

	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// Get information about a Vultr reserved IP address.
//
// ## Example Usage
//
// Get the information for a reserved IP by `label`:
//
// ```go
// package main
//
// import (
// 	"github.com/pulumi/pulumi-vultr/sdk/go/vultr"
// 	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
// )
//
// func main() {
// 	pulumi.Run(func(ctx *pulumi.Context) error {
// 		_, err := vultr.LookupReservedIP(ctx, &GetReservedIPArgs{
// 			Filters: []GetReservedIPFilter{
// 				GetReservedIPFilter{
// 					Name: "label",
// 					Values: []string{
// 						"my-reserved-ip-label",
// 					},
// 				},
// 			},
// 		}, nil)
// 		if err != nil {
// 			return err
// 		}
// 		return nil
// 	})
// }
// ```
func LookupReservedIP(ctx *pulumi.Context, args *LookupReservedIPArgs, opts ...pulumi.InvokeOption) (*LookupReservedIPResult, error) {
	var rv LookupReservedIPResult
	err := ctx.Invoke("vultr:index/getReservedIP:getReservedIP", args, &rv, opts...)
	if err != nil {
		return nil, err
	}
	return &rv, nil
}

// A collection of arguments for invoking getReservedIP.
type LookupReservedIPArgs struct {
	// Query parameters for finding reserved IP addresses.
	Filters []GetReservedIPFilter `pulumi:"filters"`
}

// A collection of values returned by getReservedIP.
type LookupReservedIPResult struct {
	Filters []GetReservedIPFilter `pulumi:"filters"`
	// The provider-assigned unique ID for this managed resource.
	Id string `pulumi:"id"`
	// The ID of the VPS the reserved IP is attached to.
	InstanceId string `pulumi:"instanceId"`
	// The IP type of the reserved IP.
	IpType string `pulumi:"ipType"`
	// The label of the reserved IP.
	Label string `pulumi:"label"`
	// The ID of the region that the reserved IP is in.
	Region string `pulumi:"region"`
	// The subnet of the reserved IP.
	Subnet string `pulumi:"subnet"`
	// The subnet size of the reserved IP.
	SubnetSize int `pulumi:"subnetSize"`
}

func LookupReservedIPOutput(ctx *pulumi.Context, args LookupReservedIPOutputArgs, opts ...pulumi.InvokeOption) LookupReservedIPResultOutput {
	return pulumi.ToOutputWithContext(context.Background(), args).
		ApplyT(func(v interface{}) (LookupReservedIPResult, error) {
			args := v.(LookupReservedIPArgs)
			r, err := LookupReservedIP(ctx, &args, opts...)
			return *r, err
		}).(LookupReservedIPResultOutput)
}

// A collection of arguments for invoking getReservedIP.
type LookupReservedIPOutputArgs struct {
	// Query parameters for finding reserved IP addresses.
	Filters GetReservedIPFilterArrayInput `pulumi:"filters"`
}

func (LookupReservedIPOutputArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*LookupReservedIPArgs)(nil)).Elem()
}

// A collection of values returned by getReservedIP.
type LookupReservedIPResultOutput struct{ *pulumi.OutputState }

func (LookupReservedIPResultOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*LookupReservedIPResult)(nil)).Elem()
}

func (o LookupReservedIPResultOutput) ToLookupReservedIPResultOutput() LookupReservedIPResultOutput {
	return o
}

func (o LookupReservedIPResultOutput) ToLookupReservedIPResultOutputWithContext(ctx context.Context) LookupReservedIPResultOutput {
	return o
}

func (o LookupReservedIPResultOutput) Filters() GetReservedIPFilterArrayOutput {
	return o.ApplyT(func(v LookupReservedIPResult) []GetReservedIPFilter { return v.Filters }).(GetReservedIPFilterArrayOutput)
}

// The provider-assigned unique ID for this managed resource.
func (o LookupReservedIPResultOutput) Id() pulumi.StringOutput {
	return o.ApplyT(func(v LookupReservedIPResult) string { return v.Id }).(pulumi.StringOutput)
}

// The ID of the VPS the reserved IP is attached to.
func (o LookupReservedIPResultOutput) InstanceId() pulumi.StringOutput {
	return o.ApplyT(func(v LookupReservedIPResult) string { return v.InstanceId }).(pulumi.StringOutput)
}

// The IP type of the reserved IP.
func (o LookupReservedIPResultOutput) IpType() pulumi.StringOutput {
	return o.ApplyT(func(v LookupReservedIPResult) string { return v.IpType }).(pulumi.StringOutput)
}

// The label of the reserved IP.
func (o LookupReservedIPResultOutput) Label() pulumi.StringOutput {
	return o.ApplyT(func(v LookupReservedIPResult) string { return v.Label }).(pulumi.StringOutput)
}

// The ID of the region that the reserved IP is in.
func (o LookupReservedIPResultOutput) Region() pulumi.StringOutput {
	return o.ApplyT(func(v LookupReservedIPResult) string { return v.Region }).(pulumi.StringOutput)
}

// The subnet of the reserved IP.
func (o LookupReservedIPResultOutput) Subnet() pulumi.StringOutput {
	return o.ApplyT(func(v LookupReservedIPResult) string { return v.Subnet }).(pulumi.StringOutput)
}

// The subnet size of the reserved IP.
func (o LookupReservedIPResultOutput) SubnetSize() pulumi.IntOutput {
	return o.ApplyT(func(v LookupReservedIPResult) int { return v.SubnetSize }).(pulumi.IntOutput)
}

func init() {
	pulumi.RegisterOutputType(LookupReservedIPResultOutput{})
}
