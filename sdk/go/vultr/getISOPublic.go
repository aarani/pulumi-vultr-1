// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package vultr

import (
	"context"
	"reflect"

	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// Get information about an ISO file offered in the Vultr ISO library.
//
// ## Example Usage
//
// Get the information for a ISO file by `description`:
//
// ```go
// package main
//
// import (
// 	"github.com/pulumi/pulumi-vultr/sdk/go/vultr"
// 	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
// )
//
// func main() {
// 	pulumi.Run(func(ctx *pulumi.Context) error {
// 		_, err := vultr.GetISOPublic(ctx, &GetISOPublicArgs{
// 			Filters: []GetISOPublicFilter{
// 				GetISOPublicFilter{
// 					Name: "description",
// 					Values: []string{
// 						"iso-description",
// 					},
// 				},
// 			},
// 		}, nil)
// 		if err != nil {
// 			return err
// 		}
// 		return nil
// 	})
// }
// ```
func GetISOPublic(ctx *pulumi.Context, args *GetISOPublicArgs, opts ...pulumi.InvokeOption) (*GetISOPublicResult, error) {
	var rv GetISOPublicResult
	err := ctx.Invoke("vultr:index/getISOPublic:getISOPublic", args, &rv, opts...)
	if err != nil {
		return nil, err
	}
	return &rv, nil
}

// A collection of arguments for invoking getISOPublic.
type GetISOPublicArgs struct {
	// Query parameters for finding ISO files.
	Filters []GetISOPublicFilter `pulumi:"filters"`
}

// A collection of values returned by getISOPublic.
type GetISOPublicResult struct {
	// The description of the ISO file.
	Description string               `pulumi:"description"`
	Filters     []GetISOPublicFilter `pulumi:"filters"`
	// The provider-assigned unique ID for this managed resource.
	Id string `pulumi:"id"`
	// The MD5Sum of the ISO file.
	Md5sum string `pulumi:"md5sum"`
	// The ISO file's name.
	Name string `pulumi:"name"`
}

func GetISOPublicOutput(ctx *pulumi.Context, args GetISOPublicOutputArgs, opts ...pulumi.InvokeOption) GetISOPublicResultOutput {
	return pulumi.ToOutputWithContext(context.Background(), args).
		ApplyT(func(v interface{}) (GetISOPublicResult, error) {
			args := v.(GetISOPublicArgs)
			r, err := GetISOPublic(ctx, &args, opts...)
			return *r, err
		}).(GetISOPublicResultOutput)
}

// A collection of arguments for invoking getISOPublic.
type GetISOPublicOutputArgs struct {
	// Query parameters for finding ISO files.
	Filters GetISOPublicFilterArrayInput `pulumi:"filters"`
}

func (GetISOPublicOutputArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*GetISOPublicArgs)(nil)).Elem()
}

// A collection of values returned by getISOPublic.
type GetISOPublicResultOutput struct{ *pulumi.OutputState }

func (GetISOPublicResultOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*GetISOPublicResult)(nil)).Elem()
}

func (o GetISOPublicResultOutput) ToGetISOPublicResultOutput() GetISOPublicResultOutput {
	return o
}

func (o GetISOPublicResultOutput) ToGetISOPublicResultOutputWithContext(ctx context.Context) GetISOPublicResultOutput {
	return o
}

// The description of the ISO file.
func (o GetISOPublicResultOutput) Description() pulumi.StringOutput {
	return o.ApplyT(func(v GetISOPublicResult) string { return v.Description }).(pulumi.StringOutput)
}

func (o GetISOPublicResultOutput) Filters() GetISOPublicFilterArrayOutput {
	return o.ApplyT(func(v GetISOPublicResult) []GetISOPublicFilter { return v.Filters }).(GetISOPublicFilterArrayOutput)
}

// The provider-assigned unique ID for this managed resource.
func (o GetISOPublicResultOutput) Id() pulumi.StringOutput {
	return o.ApplyT(func(v GetISOPublicResult) string { return v.Id }).(pulumi.StringOutput)
}

// The MD5Sum of the ISO file.
func (o GetISOPublicResultOutput) Md5sum() pulumi.StringOutput {
	return o.ApplyT(func(v GetISOPublicResult) string { return v.Md5sum }).(pulumi.StringOutput)
}

// The ISO file's name.
func (o GetISOPublicResultOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v GetISOPublicResult) string { return v.Name }).(pulumi.StringOutput)
}

func init() {
	pulumi.RegisterOutputType(GetISOPublicResultOutput{})
}
