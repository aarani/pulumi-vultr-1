// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package vultr

import (
	"context"
	"reflect"

	"github.com/pkg/errors"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// Provides a Vultr reserved IP resource. This can be used to create, read, modify, and delete reserved IP addresses on your Vultr account.
//
// ## Example Usage
//
// Create a new reserved IP:
//
// ```go
// package main
//
// import (
// 	"github.com/pulumi/pulumi-vultr/sdk/go/vultr"
// 	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
// )
//
// func main() {
// 	pulumi.Run(func(ctx *pulumi.Context) error {
// 		_, err := vultr.NewReservedIP(ctx, "myReservedIp", &vultr.ReservedIPArgs{
// 			IpType: pulumi.String("v4"),
// 			Label:  pulumi.String("my-reserved-ip"),
// 			Region: pulumi.String("sea"),
// 		})
// 		if err != nil {
// 			return err
// 		}
// 		return nil
// 	})
// }
// ```
//
// Attach a reserved IP to a instance:
//
// ```go
// package main
//
// import (
// 	"github.com/pulumi/pulumi-vultr/sdk/go/vultr"
// 	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
// )
//
// func main() {
// 	pulumi.Run(func(ctx *pulumi.Context) error {
// 		_, err := vultr.NewReservedIP(ctx, "myReservedIp", &vultr.ReservedIPArgs{
// 			InstanceId: pulumi.String("b9cc6fad-70b1-40ee-ab6a-4d622858962f"),
// 			IpType:     pulumi.String("v4"),
// 			Label:      pulumi.String("my-reserved-ip"),
// 			Region:     pulumi.String("sea"),
// 		})
// 		if err != nil {
// 			return err
// 		}
// 		return nil
// 	})
// }
// ```
//
// ## Import
//
// Reserved IPs can be imported using the reserved IP `ID`, e.g.
//
// ```sh
//  $ pulumi import vultr:index/reservedIP:ReservedIP my_reserved_ip b9cc6fad-70b1-40ee-ab6a-4d622858962f
// ```
type ReservedIP struct {
	pulumi.CustomResourceState

	// The VPS ID you want this reserved IP to be attached to.
	InstanceId pulumi.StringOutput `pulumi:"instanceId"`
	// The type of reserved IP that you want. Either "v4" or "v6".
	IpType pulumi.StringOutput `pulumi:"ipType"`
	// The label you want to give your reserved IP.
	Label pulumi.StringPtrOutput `pulumi:"label"`
	// The region ID that you want the reserved IP to be created in.
	Region pulumi.StringOutput `pulumi:"region"`
	// The reserved IP's subnet.
	Subnet pulumi.StringOutput `pulumi:"subnet"`
	// The reserved IP's subnet size.
	SubnetSize pulumi.IntOutput `pulumi:"subnetSize"`
}

// NewReservedIP registers a new resource with the given unique name, arguments, and options.
func NewReservedIP(ctx *pulumi.Context,
	name string, args *ReservedIPArgs, opts ...pulumi.ResourceOption) (*ReservedIP, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.IpType == nil {
		return nil, errors.New("invalid value for required argument 'IpType'")
	}
	if args.Region == nil {
		return nil, errors.New("invalid value for required argument 'Region'")
	}
	var resource ReservedIP
	err := ctx.RegisterResource("vultr:index/reservedIP:ReservedIP", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetReservedIP gets an existing ReservedIP resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetReservedIP(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *ReservedIPState, opts ...pulumi.ResourceOption) (*ReservedIP, error) {
	var resource ReservedIP
	err := ctx.ReadResource("vultr:index/reservedIP:ReservedIP", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering ReservedIP resources.
type reservedIPState struct {
	// The VPS ID you want this reserved IP to be attached to.
	InstanceId *string `pulumi:"instanceId"`
	// The type of reserved IP that you want. Either "v4" or "v6".
	IpType *string `pulumi:"ipType"`
	// The label you want to give your reserved IP.
	Label *string `pulumi:"label"`
	// The region ID that you want the reserved IP to be created in.
	Region *string `pulumi:"region"`
	// The reserved IP's subnet.
	Subnet *string `pulumi:"subnet"`
	// The reserved IP's subnet size.
	SubnetSize *int `pulumi:"subnetSize"`
}

type ReservedIPState struct {
	// The VPS ID you want this reserved IP to be attached to.
	InstanceId pulumi.StringPtrInput
	// The type of reserved IP that you want. Either "v4" or "v6".
	IpType pulumi.StringPtrInput
	// The label you want to give your reserved IP.
	Label pulumi.StringPtrInput
	// The region ID that you want the reserved IP to be created in.
	Region pulumi.StringPtrInput
	// The reserved IP's subnet.
	Subnet pulumi.StringPtrInput
	// The reserved IP's subnet size.
	SubnetSize pulumi.IntPtrInput
}

func (ReservedIPState) ElementType() reflect.Type {
	return reflect.TypeOf((*reservedIPState)(nil)).Elem()
}

type reservedIPArgs struct {
	// The VPS ID you want this reserved IP to be attached to.
	InstanceId *string `pulumi:"instanceId"`
	// The type of reserved IP that you want. Either "v4" or "v6".
	IpType string `pulumi:"ipType"`
	// The label you want to give your reserved IP.
	Label *string `pulumi:"label"`
	// The region ID that you want the reserved IP to be created in.
	Region string `pulumi:"region"`
}

// The set of arguments for constructing a ReservedIP resource.
type ReservedIPArgs struct {
	// The VPS ID you want this reserved IP to be attached to.
	InstanceId pulumi.StringPtrInput
	// The type of reserved IP that you want. Either "v4" or "v6".
	IpType pulumi.StringInput
	// The label you want to give your reserved IP.
	Label pulumi.StringPtrInput
	// The region ID that you want the reserved IP to be created in.
	Region pulumi.StringInput
}

func (ReservedIPArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*reservedIPArgs)(nil)).Elem()
}

type ReservedIPInput interface {
	pulumi.Input

	ToReservedIPOutput() ReservedIPOutput
	ToReservedIPOutputWithContext(ctx context.Context) ReservedIPOutput
}

func (*ReservedIP) ElementType() reflect.Type {
	return reflect.TypeOf((**ReservedIP)(nil)).Elem()
}

func (i *ReservedIP) ToReservedIPOutput() ReservedIPOutput {
	return i.ToReservedIPOutputWithContext(context.Background())
}

func (i *ReservedIP) ToReservedIPOutputWithContext(ctx context.Context) ReservedIPOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ReservedIPOutput)
}

// ReservedIPArrayInput is an input type that accepts ReservedIPArray and ReservedIPArrayOutput values.
// You can construct a concrete instance of `ReservedIPArrayInput` via:
//
//          ReservedIPArray{ ReservedIPArgs{...} }
type ReservedIPArrayInput interface {
	pulumi.Input

	ToReservedIPArrayOutput() ReservedIPArrayOutput
	ToReservedIPArrayOutputWithContext(context.Context) ReservedIPArrayOutput
}

type ReservedIPArray []ReservedIPInput

func (ReservedIPArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*ReservedIP)(nil)).Elem()
}

func (i ReservedIPArray) ToReservedIPArrayOutput() ReservedIPArrayOutput {
	return i.ToReservedIPArrayOutputWithContext(context.Background())
}

func (i ReservedIPArray) ToReservedIPArrayOutputWithContext(ctx context.Context) ReservedIPArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ReservedIPArrayOutput)
}

// ReservedIPMapInput is an input type that accepts ReservedIPMap and ReservedIPMapOutput values.
// You can construct a concrete instance of `ReservedIPMapInput` via:
//
//          ReservedIPMap{ "key": ReservedIPArgs{...} }
type ReservedIPMapInput interface {
	pulumi.Input

	ToReservedIPMapOutput() ReservedIPMapOutput
	ToReservedIPMapOutputWithContext(context.Context) ReservedIPMapOutput
}

type ReservedIPMap map[string]ReservedIPInput

func (ReservedIPMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*ReservedIP)(nil)).Elem()
}

func (i ReservedIPMap) ToReservedIPMapOutput() ReservedIPMapOutput {
	return i.ToReservedIPMapOutputWithContext(context.Background())
}

func (i ReservedIPMap) ToReservedIPMapOutputWithContext(ctx context.Context) ReservedIPMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ReservedIPMapOutput)
}

type ReservedIPOutput struct{ *pulumi.OutputState }

func (ReservedIPOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**ReservedIP)(nil)).Elem()
}

func (o ReservedIPOutput) ToReservedIPOutput() ReservedIPOutput {
	return o
}

func (o ReservedIPOutput) ToReservedIPOutputWithContext(ctx context.Context) ReservedIPOutput {
	return o
}

// The VPS ID you want this reserved IP to be attached to.
func (o ReservedIPOutput) InstanceId() pulumi.StringOutput {
	return o.ApplyT(func(v *ReservedIP) pulumi.StringOutput { return v.InstanceId }).(pulumi.StringOutput)
}

// The type of reserved IP that you want. Either "v4" or "v6".
func (o ReservedIPOutput) IpType() pulumi.StringOutput {
	return o.ApplyT(func(v *ReservedIP) pulumi.StringOutput { return v.IpType }).(pulumi.StringOutput)
}

// The label you want to give your reserved IP.
func (o ReservedIPOutput) Label() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ReservedIP) pulumi.StringPtrOutput { return v.Label }).(pulumi.StringPtrOutput)
}

// The region ID that you want the reserved IP to be created in.
func (o ReservedIPOutput) Region() pulumi.StringOutput {
	return o.ApplyT(func(v *ReservedIP) pulumi.StringOutput { return v.Region }).(pulumi.StringOutput)
}

// The reserved IP's subnet.
func (o ReservedIPOutput) Subnet() pulumi.StringOutput {
	return o.ApplyT(func(v *ReservedIP) pulumi.StringOutput { return v.Subnet }).(pulumi.StringOutput)
}

// The reserved IP's subnet size.
func (o ReservedIPOutput) SubnetSize() pulumi.IntOutput {
	return o.ApplyT(func(v *ReservedIP) pulumi.IntOutput { return v.SubnetSize }).(pulumi.IntOutput)
}

type ReservedIPArrayOutput struct{ *pulumi.OutputState }

func (ReservedIPArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*ReservedIP)(nil)).Elem()
}

func (o ReservedIPArrayOutput) ToReservedIPArrayOutput() ReservedIPArrayOutput {
	return o
}

func (o ReservedIPArrayOutput) ToReservedIPArrayOutputWithContext(ctx context.Context) ReservedIPArrayOutput {
	return o
}

func (o ReservedIPArrayOutput) Index(i pulumi.IntInput) ReservedIPOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) *ReservedIP {
		return vs[0].([]*ReservedIP)[vs[1].(int)]
	}).(ReservedIPOutput)
}

type ReservedIPMapOutput struct{ *pulumi.OutputState }

func (ReservedIPMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*ReservedIP)(nil)).Elem()
}

func (o ReservedIPMapOutput) ToReservedIPMapOutput() ReservedIPMapOutput {
	return o
}

func (o ReservedIPMapOutput) ToReservedIPMapOutputWithContext(ctx context.Context) ReservedIPMapOutput {
	return o
}

func (o ReservedIPMapOutput) MapIndex(k pulumi.StringInput) ReservedIPOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) *ReservedIP {
		return vs[0].(map[string]*ReservedIP)[vs[1].(string)]
	}).(ReservedIPOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*ReservedIPInput)(nil)).Elem(), &ReservedIP{})
	pulumi.RegisterInputType(reflect.TypeOf((*ReservedIPArrayInput)(nil)).Elem(), ReservedIPArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*ReservedIPMapInput)(nil)).Elem(), ReservedIPMap{})
	pulumi.RegisterOutputType(ReservedIPOutput{})
	pulumi.RegisterOutputType(ReservedIPArrayOutput{})
	pulumi.RegisterOutputType(ReservedIPMapOutput{})
}
