// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package vultr

import (
	"context"
	"reflect"

	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// Get information about a Vultr instance IPv4.
//
// ## Example Usage
//
// Get the information for an IPv4 address by `instanceId`:
//
// ```go
// package main
//
// import (
// 	"github.com/pulumi/pulumi-vultr/sdk/go/vultr"
// 	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
// )
//
// func main() {
// 	pulumi.Run(func(ctx *pulumi.Context) error {
// 		_, err := vultr.GetInstanceIpv4(ctx, &GetInstanceIpv4Args{
// 			Filters: []GetInstanceIpv4Filter{
// 				GetInstanceIpv4Filter{
// 					Name: "ip",
// 					Values: []string{
// 						"123.123.123.123",
// 					},
// 				},
// 			},
// 		}, nil)
// 		if err != nil {
// 			return err
// 		}
// 		return nil
// 	})
// }
// ```
func GetInstanceIpv4(ctx *pulumi.Context, args *GetInstanceIpv4Args, opts ...pulumi.InvokeOption) (*GetInstanceIpv4Result, error) {
	var rv GetInstanceIpv4Result
	err := ctx.Invoke("vultr:index/getInstanceIpv4:getInstanceIpv4", args, &rv, opts...)
	if err != nil {
		return nil, err
	}
	return &rv, nil
}

// A collection of arguments for invoking getInstanceIpv4.
type GetInstanceIpv4Args struct {
	// Query parameters for finding IPv4 address.
	Filters []GetInstanceIpv4Filter `pulumi:"filters"`
}

// A collection of values returned by getInstanceIpv4.
type GetInstanceIpv4Result struct {
	Filters []GetInstanceIpv4Filter `pulumi:"filters"`
	// The gateway IP address.
	Gateway string `pulumi:"gateway"`
	// The provider-assigned unique ID for this managed resource.
	Id string `pulumi:"id"`
	// The ID of the instance the IPv4 address.
	InstanceId string `pulumi:"instanceId"`
	// The IPv4 address in canonical format.
	Ip string `pulumi:"ip"`
	// The IPv4 netmask in dot-decimal notation.
	Netmask string `pulumi:"netmask"`
	// The reverse DNS information for this IP address.
	Reverse string `pulumi:"reverse"`
}

func GetInstanceIpv4Output(ctx *pulumi.Context, args GetInstanceIpv4OutputArgs, opts ...pulumi.InvokeOption) GetInstanceIpv4ResultOutput {
	return pulumi.ToOutputWithContext(context.Background(), args).
		ApplyT(func(v interface{}) (GetInstanceIpv4Result, error) {
			args := v.(GetInstanceIpv4Args)
			r, err := GetInstanceIpv4(ctx, &args, opts...)
			var s GetInstanceIpv4Result
			if r != nil {
				s = *r
			}
			return s, err
		}).(GetInstanceIpv4ResultOutput)
}

// A collection of arguments for invoking getInstanceIpv4.
type GetInstanceIpv4OutputArgs struct {
	// Query parameters for finding IPv4 address.
	Filters GetInstanceIpv4FilterArrayInput `pulumi:"filters"`
}

func (GetInstanceIpv4OutputArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*GetInstanceIpv4Args)(nil)).Elem()
}

// A collection of values returned by getInstanceIpv4.
type GetInstanceIpv4ResultOutput struct{ *pulumi.OutputState }

func (GetInstanceIpv4ResultOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*GetInstanceIpv4Result)(nil)).Elem()
}

func (o GetInstanceIpv4ResultOutput) ToGetInstanceIpv4ResultOutput() GetInstanceIpv4ResultOutput {
	return o
}

func (o GetInstanceIpv4ResultOutput) ToGetInstanceIpv4ResultOutputWithContext(ctx context.Context) GetInstanceIpv4ResultOutput {
	return o
}

func (o GetInstanceIpv4ResultOutput) Filters() GetInstanceIpv4FilterArrayOutput {
	return o.ApplyT(func(v GetInstanceIpv4Result) []GetInstanceIpv4Filter { return v.Filters }).(GetInstanceIpv4FilterArrayOutput)
}

// The gateway IP address.
func (o GetInstanceIpv4ResultOutput) Gateway() pulumi.StringOutput {
	return o.ApplyT(func(v GetInstanceIpv4Result) string { return v.Gateway }).(pulumi.StringOutput)
}

// The provider-assigned unique ID for this managed resource.
func (o GetInstanceIpv4ResultOutput) Id() pulumi.StringOutput {
	return o.ApplyT(func(v GetInstanceIpv4Result) string { return v.Id }).(pulumi.StringOutput)
}

// The ID of the instance the IPv4 address.
func (o GetInstanceIpv4ResultOutput) InstanceId() pulumi.StringOutput {
	return o.ApplyT(func(v GetInstanceIpv4Result) string { return v.InstanceId }).(pulumi.StringOutput)
}

// The IPv4 address in canonical format.
func (o GetInstanceIpv4ResultOutput) Ip() pulumi.StringOutput {
	return o.ApplyT(func(v GetInstanceIpv4Result) string { return v.Ip }).(pulumi.StringOutput)
}

// The IPv4 netmask in dot-decimal notation.
func (o GetInstanceIpv4ResultOutput) Netmask() pulumi.StringOutput {
	return o.ApplyT(func(v GetInstanceIpv4Result) string { return v.Netmask }).(pulumi.StringOutput)
}

// The reverse DNS information for this IP address.
func (o GetInstanceIpv4ResultOutput) Reverse() pulumi.StringOutput {
	return o.ApplyT(func(v GetInstanceIpv4Result) string { return v.Reverse }).(pulumi.StringOutput)
}

func init() {
	pulumi.RegisterOutputType(GetInstanceIpv4ResultOutput{})
}
