// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package vultr

import (
	"context"
	"reflect"

	"github.com/pkg/errors"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// Provides a Vultr Snapshots from URL resource. This can be used to create, read, modify, and delete Snapshots from URL.
//
// ## Example Usage
//
// Create a new Snapshots from URL
//
// ```go
// package main
//
// import (
// 	"github.com/pulumi/pulumi-vultr/sdk/go/vultr"
// 	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
// )
//
// func main() {
// 	pulumi.Run(func(ctx *pulumi.Context) error {
// 		_, err := vultr.NewSnapshotFromURL(ctx, "mySnapshot", &vultr.SnapshotFromURLArgs{
// 			Url: pulumi.String("http://dl-cdn.alpinelinux.org/alpine/v3.9/releases/x86_64/alpine-virt-3.9.1-x86_64.iso"),
// 		})
// 		if err != nil {
// 			return err
// 		}
// 		return nil
// 	})
// }
// ```
//
// ## Import
//
// Snapshots from Url can be imported using the Snapshot `ID`, e.g.
//
// ```sh
//  $ pulumi import vultr:index/snapshotFromURL:SnapshotFromURL my_snapshot e60dc0a2-9313-4bab-bffc-57ffe33d99f6
// ```
type SnapshotFromURL struct {
	pulumi.CustomResourceState

	// The app id which the snapshot is associated with.
	AppId pulumi.IntOutput `pulumi:"appId"`
	// The date the snapshot was created.
	DateCreated pulumi.StringOutput `pulumi:"dateCreated"`
	// The description for the given snapshot.
	Description pulumi.StringOutput `pulumi:"description"`
	// The os id which the snapshot is associated with.
	OsId pulumi.IntOutput `pulumi:"osId"`
	// The size of the snapshot in Bytes.
	Size pulumi.IntOutput `pulumi:"size"`
	// The status for the given snapshot.
	Status pulumi.StringOutput `pulumi:"status"`
	// URL of the given resource you want to create a snapshot from.
	Url pulumi.StringOutput `pulumi:"url"`
}

// NewSnapshotFromURL registers a new resource with the given unique name, arguments, and options.
func NewSnapshotFromURL(ctx *pulumi.Context,
	name string, args *SnapshotFromURLArgs, opts ...pulumi.ResourceOption) (*SnapshotFromURL, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.Url == nil {
		return nil, errors.New("invalid value for required argument 'Url'")
	}
	var resource SnapshotFromURL
	err := ctx.RegisterResource("vultr:index/snapshotFromURL:SnapshotFromURL", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetSnapshotFromURL gets an existing SnapshotFromURL resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetSnapshotFromURL(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *SnapshotFromURLState, opts ...pulumi.ResourceOption) (*SnapshotFromURL, error) {
	var resource SnapshotFromURL
	err := ctx.ReadResource("vultr:index/snapshotFromURL:SnapshotFromURL", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering SnapshotFromURL resources.
type snapshotFromURLState struct {
	// The app id which the snapshot is associated with.
	AppId *int `pulumi:"appId"`
	// The date the snapshot was created.
	DateCreated *string `pulumi:"dateCreated"`
	// The description for the given snapshot.
	Description *string `pulumi:"description"`
	// The os id which the snapshot is associated with.
	OsId *int `pulumi:"osId"`
	// The size of the snapshot in Bytes.
	Size *int `pulumi:"size"`
	// The status for the given snapshot.
	Status *string `pulumi:"status"`
	// URL of the given resource you want to create a snapshot from.
	Url *string `pulumi:"url"`
}

type SnapshotFromURLState struct {
	// The app id which the snapshot is associated with.
	AppId pulumi.IntPtrInput
	// The date the snapshot was created.
	DateCreated pulumi.StringPtrInput
	// The description for the given snapshot.
	Description pulumi.StringPtrInput
	// The os id which the snapshot is associated with.
	OsId pulumi.IntPtrInput
	// The size of the snapshot in Bytes.
	Size pulumi.IntPtrInput
	// The status for the given snapshot.
	Status pulumi.StringPtrInput
	// URL of the given resource you want to create a snapshot from.
	Url pulumi.StringPtrInput
}

func (SnapshotFromURLState) ElementType() reflect.Type {
	return reflect.TypeOf((*snapshotFromURLState)(nil)).Elem()
}

type snapshotFromURLArgs struct {
	// URL of the given resource you want to create a snapshot from.
	Url string `pulumi:"url"`
}

// The set of arguments for constructing a SnapshotFromURL resource.
type SnapshotFromURLArgs struct {
	// URL of the given resource you want to create a snapshot from.
	Url pulumi.StringInput
}

func (SnapshotFromURLArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*snapshotFromURLArgs)(nil)).Elem()
}

type SnapshotFromURLInput interface {
	pulumi.Input

	ToSnapshotFromURLOutput() SnapshotFromURLOutput
	ToSnapshotFromURLOutputWithContext(ctx context.Context) SnapshotFromURLOutput
}

func (*SnapshotFromURL) ElementType() reflect.Type {
	return reflect.TypeOf((**SnapshotFromURL)(nil)).Elem()
}

func (i *SnapshotFromURL) ToSnapshotFromURLOutput() SnapshotFromURLOutput {
	return i.ToSnapshotFromURLOutputWithContext(context.Background())
}

func (i *SnapshotFromURL) ToSnapshotFromURLOutputWithContext(ctx context.Context) SnapshotFromURLOutput {
	return pulumi.ToOutputWithContext(ctx, i).(SnapshotFromURLOutput)
}

// SnapshotFromURLArrayInput is an input type that accepts SnapshotFromURLArray and SnapshotFromURLArrayOutput values.
// You can construct a concrete instance of `SnapshotFromURLArrayInput` via:
//
//          SnapshotFromURLArray{ SnapshotFromURLArgs{...} }
type SnapshotFromURLArrayInput interface {
	pulumi.Input

	ToSnapshotFromURLArrayOutput() SnapshotFromURLArrayOutput
	ToSnapshotFromURLArrayOutputWithContext(context.Context) SnapshotFromURLArrayOutput
}

type SnapshotFromURLArray []SnapshotFromURLInput

func (SnapshotFromURLArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*SnapshotFromURL)(nil)).Elem()
}

func (i SnapshotFromURLArray) ToSnapshotFromURLArrayOutput() SnapshotFromURLArrayOutput {
	return i.ToSnapshotFromURLArrayOutputWithContext(context.Background())
}

func (i SnapshotFromURLArray) ToSnapshotFromURLArrayOutputWithContext(ctx context.Context) SnapshotFromURLArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(SnapshotFromURLArrayOutput)
}

// SnapshotFromURLMapInput is an input type that accepts SnapshotFromURLMap and SnapshotFromURLMapOutput values.
// You can construct a concrete instance of `SnapshotFromURLMapInput` via:
//
//          SnapshotFromURLMap{ "key": SnapshotFromURLArgs{...} }
type SnapshotFromURLMapInput interface {
	pulumi.Input

	ToSnapshotFromURLMapOutput() SnapshotFromURLMapOutput
	ToSnapshotFromURLMapOutputWithContext(context.Context) SnapshotFromURLMapOutput
}

type SnapshotFromURLMap map[string]SnapshotFromURLInput

func (SnapshotFromURLMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*SnapshotFromURL)(nil)).Elem()
}

func (i SnapshotFromURLMap) ToSnapshotFromURLMapOutput() SnapshotFromURLMapOutput {
	return i.ToSnapshotFromURLMapOutputWithContext(context.Background())
}

func (i SnapshotFromURLMap) ToSnapshotFromURLMapOutputWithContext(ctx context.Context) SnapshotFromURLMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(SnapshotFromURLMapOutput)
}

type SnapshotFromURLOutput struct{ *pulumi.OutputState }

func (SnapshotFromURLOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**SnapshotFromURL)(nil)).Elem()
}

func (o SnapshotFromURLOutput) ToSnapshotFromURLOutput() SnapshotFromURLOutput {
	return o
}

func (o SnapshotFromURLOutput) ToSnapshotFromURLOutputWithContext(ctx context.Context) SnapshotFromURLOutput {
	return o
}

type SnapshotFromURLArrayOutput struct{ *pulumi.OutputState }

func (SnapshotFromURLArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*SnapshotFromURL)(nil)).Elem()
}

func (o SnapshotFromURLArrayOutput) ToSnapshotFromURLArrayOutput() SnapshotFromURLArrayOutput {
	return o
}

func (o SnapshotFromURLArrayOutput) ToSnapshotFromURLArrayOutputWithContext(ctx context.Context) SnapshotFromURLArrayOutput {
	return o
}

func (o SnapshotFromURLArrayOutput) Index(i pulumi.IntInput) SnapshotFromURLOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) *SnapshotFromURL {
		return vs[0].([]*SnapshotFromURL)[vs[1].(int)]
	}).(SnapshotFromURLOutput)
}

type SnapshotFromURLMapOutput struct{ *pulumi.OutputState }

func (SnapshotFromURLMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*SnapshotFromURL)(nil)).Elem()
}

func (o SnapshotFromURLMapOutput) ToSnapshotFromURLMapOutput() SnapshotFromURLMapOutput {
	return o
}

func (o SnapshotFromURLMapOutput) ToSnapshotFromURLMapOutputWithContext(ctx context.Context) SnapshotFromURLMapOutput {
	return o
}

func (o SnapshotFromURLMapOutput) MapIndex(k pulumi.StringInput) SnapshotFromURLOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) *SnapshotFromURL {
		return vs[0].(map[string]*SnapshotFromURL)[vs[1].(string)]
	}).(SnapshotFromURLOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*SnapshotFromURLInput)(nil)).Elem(), &SnapshotFromURL{})
	pulumi.RegisterInputType(reflect.TypeOf((*SnapshotFromURLArrayInput)(nil)).Elem(), SnapshotFromURLArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*SnapshotFromURLMapInput)(nil)).Elem(), SnapshotFromURLMap{})
	pulumi.RegisterOutputType(SnapshotFromURLOutput{})
	pulumi.RegisterOutputType(SnapshotFromURLArrayOutput{})
	pulumi.RegisterOutputType(SnapshotFromURLMapOutput{})
}
