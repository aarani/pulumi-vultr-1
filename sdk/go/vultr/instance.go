// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package vultr

import (
	"context"
	"reflect"

	"github.com/pkg/errors"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// Provides a Vultr instance resource. This can be used to create, read, modify, and delete instances on your Vultr account.
//
// ## Example Usage
//
// Create a new instance:
//
// ```go
// package main
//
// import (
// 	"github.com/pulumi/pulumi-vultr/sdk/go/vultr"
// 	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
// )
//
// func main() {
// 	pulumi.Run(func(ctx *pulumi.Context) error {
// 		_, err := vultr.NewInstance(ctx, "myInstance", &vultr.InstanceArgs{
// 			OsId:   pulumi.Int(167),
// 			Plan:   pulumi.String("vc2-1c-1gb"),
// 			Region: pulumi.String("sea"),
// 		})
// 		if err != nil {
// 			return err
// 		}
// 		return nil
// 	})
// }
// ```
//
// Create a new instance with options:
//
// ```go
// package main
//
// import (
// 	"github.com/pulumi/pulumi-vultr/sdk/go/vultr"
// 	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
// )
//
// func main() {
// 	pulumi.Run(func(ctx *pulumi.Context) error {
// 		_, err := vultr.NewInstance(ctx, "myInstance", &vultr.InstanceArgs{
// 			ActivationEmail: pulumi.Bool(false),
// 			Backups:         pulumi.String("enabled"),
// 			DdosProtection:  pulumi.Bool(true),
// 			EnableIpv6:      pulumi.Bool(true),
// 			Hostname:        pulumi.String("my-instance-hostname"),
// 			Label:           pulumi.String("my-instance-label"),
// 			OsId:            pulumi.Int(167),
// 			Plan:            pulumi.String("vc2-1c-1gb"),
// 			Region:          pulumi.String("sea"),
// 			Tag:             pulumi.String("my-instance-tag"),
// 		})
// 		if err != nil {
// 			return err
// 		}
// 		return nil
// 	})
// }
// ```
//
// ## Import
//
// Servers can be imported using the server `ID`, e.g.
//
// ```sh
//  $ pulumi import vultr:index/instance:Instance my_server b6a859c5-b299-49dd-8888-b1abbc517d08
// ```
type Instance struct {
	pulumi.CustomResourceState

	// Whether an activation email will be sent when the server is ready.
	ActivationEmail pulumi.BoolPtrOutput `pulumi:"activationEmail"`
	// The server's allowed bandwidth usage in GB.
	AllowedBandwidth pulumi.IntOutput `pulumi:"allowedBandwidth"`
	// The ID of the Vultr application to be installed on the server. [See List Applications](https://www.vultr.com/api/#operation/list-applications)
	AppId pulumi.IntOutput `pulumi:"appId"`
	// Whether automatic backups will be enabled for this server (these have an extra charge associated with them). Values can be enabled or disabled.
	Backups pulumi.StringPtrOutput `pulumi:"backups"`
	// A block that defines the way backups should be scheduled. While this is an optional field if `backups` are `enabled` this field is mandatory. The configuration of a `backupsSchedule` is listed below.
	BackupsSchedule InstanceBackupsSchedulePtrOutput `pulumi:"backupsSchedule"`
	// The date the server was added to your Vultr account.
	DateCreated pulumi.StringOutput `pulumi:"dateCreated"`
	// Whether DDOS protection will be enabled on the server (there is an additional charge for this).
	DdosProtection pulumi.BoolPtrOutput `pulumi:"ddosProtection"`
	// The server's default password.
	DefaultPassword pulumi.StringOutput `pulumi:"defaultPassword"`
	// The description of the disk(s) on the server.
	Disk pulumi.IntOutput `pulumi:"disk"`
	// Whether the server has IPv6 networking activated.
	EnableIpv6 pulumi.BoolPtrOutput `pulumi:"enableIpv6"`
	// Whether the server has private networking support enabled.
	//
	// Deprecated: In the next release of this provider we will be removing `enable_private_network` due to issues that may cause drift and having to maintain private network ip state. Please switch to using private_network_ids to manage your private network fields.
	EnablePrivateNetwork pulumi.BoolPtrOutput `pulumi:"enablePrivateNetwork"`
	// Array of which features are enabled.
	Features pulumi.StringArrayOutput `pulumi:"features"`
	// The ID of the firewall group to assign to the server.
	FirewallGroupId pulumi.StringOutput `pulumi:"firewallGroupId"`
	// The server's IPv4 gateway.
	GatewayV4 pulumi.StringOutput `pulumi:"gatewayV4"`
	// The hostname to assign to the server.
	Hostname pulumi.StringOutput `pulumi:"hostname"`
	// The ID of the Vultr marketplace application to be installed on the server. [See List Applications](https://www.vultr.com/api/#operation/list-applications) Note marketplace applications are denoted by type: `marketplace` and you must use the `imageId` not the id.
	ImageId pulumi.StringOutput `pulumi:"imageId"`
	// The server's internal IP address.
	InternalIp pulumi.StringOutput `pulumi:"internalIp"`
	// The ID of the ISO file to be installed on the server. [See List ISO](https://www.vultr.com/api/#operation/list-isos)
	IsoId pulumi.StringPtrOutput `pulumi:"isoId"`
	// The server's current KVM URL. This URL will change periodically. It is not advised to cache this value.
	Kvm pulumi.StringOutput `pulumi:"kvm"`
	// A label for the server.
	Label pulumi.StringOutput `pulumi:"label"`
	// The server's main IP address.
	MainIp pulumi.StringOutput `pulumi:"mainIp"`
	// The server's IPv4 netmask.
	NetmaskV4 pulumi.StringOutput `pulumi:"netmaskV4"`
	// The string description of the operating system installed on the server.
	Os pulumi.StringOutput `pulumi:"os"`
	// The ID of the operating system to be installed on the server. [See List OS](https://www.vultr.com/api/#operation/list-os)
	OsId pulumi.IntOutput `pulumi:"osId"`
	// The ID of the plan that you want the instance to subscribe to. [See List Plans](https://www.vultr.com/api/#tag/plans)
	Plan pulumi.StringOutput `pulumi:"plan"`
	// Whether the server is powered on or not.
	PowerStatus pulumi.StringOutput `pulumi:"powerStatus"`
	// A list of private network IDs to be attached to the server.
	PrivateNetworkIds pulumi.StringArrayOutput `pulumi:"privateNetworkIds"`
	// The amount of memory available on the server in MB.
	Ram pulumi.IntOutput `pulumi:"ram"`
	// The ID of the region that the instance is to be created in. [See List Regions](https://www.vultr.com/api/#operation/list-regions)
	Region pulumi.StringOutput `pulumi:"region"`
	// ID of the floating IP to use as the main IP of this server.
	ReservedIpId pulumi.StringOutput `pulumi:"reservedIpId"`
	// The ID of the startup script you want added to the server.
	ScriptId pulumi.StringOutput `pulumi:"scriptId"`
	// A more detailed server status (none, locked, installingbooting, isomounting, ok).
	ServerStatus pulumi.StringOutput `pulumi:"serverStatus"`
	// The ID of the Vultr snapshot that the server will restore for the initial installation. [See List Snapshots](https://www.vultr.com/api/#operation/list-snapshots)
	SnapshotId pulumi.StringOutput `pulumi:"snapshotId"`
	// A list of SSH key IDs to apply to the server on install (only valid for Linux/FreeBSD).
	SshKeyIds pulumi.StringArrayOutput `pulumi:"sshKeyIds"`
	// The status of the server's subscription.
	Status pulumi.StringOutput `pulumi:"status"`
	// The tag to assign to the server.
	Tag pulumi.StringOutput `pulumi:"tag"`
	// Generic data store, which some provisioning tools and cloud operating systems use as a configuration file. It is generally consumed only once after an instance has been launched, but individual needs may vary.
	UserData pulumi.StringOutput `pulumi:"userData"`
	// The main IPv6 network address.
	V6MainIp pulumi.StringOutput `pulumi:"v6MainIp"`
	// The IPv6 subnet.
	V6Network pulumi.StringOutput `pulumi:"v6Network"`
	// The IPv6 network size in bits.
	V6NetworkSize pulumi.IntOutput `pulumi:"v6NetworkSize"`
	// The number of virtual CPUs available on the server.
	VcpuCount pulumi.IntOutput `pulumi:"vcpuCount"`
}

// NewInstance registers a new resource with the given unique name, arguments, and options.
func NewInstance(ctx *pulumi.Context,
	name string, args *InstanceArgs, opts ...pulumi.ResourceOption) (*Instance, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.Plan == nil {
		return nil, errors.New("invalid value for required argument 'Plan'")
	}
	if args.Region == nil {
		return nil, errors.New("invalid value for required argument 'Region'")
	}
	var resource Instance
	err := ctx.RegisterResource("vultr:index/instance:Instance", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetInstance gets an existing Instance resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetInstance(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *InstanceState, opts ...pulumi.ResourceOption) (*Instance, error) {
	var resource Instance
	err := ctx.ReadResource("vultr:index/instance:Instance", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering Instance resources.
type instanceState struct {
	// Whether an activation email will be sent when the server is ready.
	ActivationEmail *bool `pulumi:"activationEmail"`
	// The server's allowed bandwidth usage in GB.
	AllowedBandwidth *int `pulumi:"allowedBandwidth"`
	// The ID of the Vultr application to be installed on the server. [See List Applications](https://www.vultr.com/api/#operation/list-applications)
	AppId *int `pulumi:"appId"`
	// Whether automatic backups will be enabled for this server (these have an extra charge associated with them). Values can be enabled or disabled.
	Backups *string `pulumi:"backups"`
	// A block that defines the way backups should be scheduled. While this is an optional field if `backups` are `enabled` this field is mandatory. The configuration of a `backupsSchedule` is listed below.
	BackupsSchedule *InstanceBackupsSchedule `pulumi:"backupsSchedule"`
	// The date the server was added to your Vultr account.
	DateCreated *string `pulumi:"dateCreated"`
	// Whether DDOS protection will be enabled on the server (there is an additional charge for this).
	DdosProtection *bool `pulumi:"ddosProtection"`
	// The server's default password.
	DefaultPassword *string `pulumi:"defaultPassword"`
	// The description of the disk(s) on the server.
	Disk *int `pulumi:"disk"`
	// Whether the server has IPv6 networking activated.
	EnableIpv6 *bool `pulumi:"enableIpv6"`
	// Whether the server has private networking support enabled.
	//
	// Deprecated: In the next release of this provider we will be removing `enable_private_network` due to issues that may cause drift and having to maintain private network ip state. Please switch to using private_network_ids to manage your private network fields.
	EnablePrivateNetwork *bool `pulumi:"enablePrivateNetwork"`
	// Array of which features are enabled.
	Features []string `pulumi:"features"`
	// The ID of the firewall group to assign to the server.
	FirewallGroupId *string `pulumi:"firewallGroupId"`
	// The server's IPv4 gateway.
	GatewayV4 *string `pulumi:"gatewayV4"`
	// The hostname to assign to the server.
	Hostname *string `pulumi:"hostname"`
	// The ID of the Vultr marketplace application to be installed on the server. [See List Applications](https://www.vultr.com/api/#operation/list-applications) Note marketplace applications are denoted by type: `marketplace` and you must use the `imageId` not the id.
	ImageId *string `pulumi:"imageId"`
	// The server's internal IP address.
	InternalIp *string `pulumi:"internalIp"`
	// The ID of the ISO file to be installed on the server. [See List ISO](https://www.vultr.com/api/#operation/list-isos)
	IsoId *string `pulumi:"isoId"`
	// The server's current KVM URL. This URL will change periodically. It is not advised to cache this value.
	Kvm *string `pulumi:"kvm"`
	// A label for the server.
	Label *string `pulumi:"label"`
	// The server's main IP address.
	MainIp *string `pulumi:"mainIp"`
	// The server's IPv4 netmask.
	NetmaskV4 *string `pulumi:"netmaskV4"`
	// The string description of the operating system installed on the server.
	Os *string `pulumi:"os"`
	// The ID of the operating system to be installed on the server. [See List OS](https://www.vultr.com/api/#operation/list-os)
	OsId *int `pulumi:"osId"`
	// The ID of the plan that you want the instance to subscribe to. [See List Plans](https://www.vultr.com/api/#tag/plans)
	Plan *string `pulumi:"plan"`
	// Whether the server is powered on or not.
	PowerStatus *string `pulumi:"powerStatus"`
	// A list of private network IDs to be attached to the server.
	PrivateNetworkIds []string `pulumi:"privateNetworkIds"`
	// The amount of memory available on the server in MB.
	Ram *int `pulumi:"ram"`
	// The ID of the region that the instance is to be created in. [See List Regions](https://www.vultr.com/api/#operation/list-regions)
	Region *string `pulumi:"region"`
	// ID of the floating IP to use as the main IP of this server.
	ReservedIpId *string `pulumi:"reservedIpId"`
	// The ID of the startup script you want added to the server.
	ScriptId *string `pulumi:"scriptId"`
	// A more detailed server status (none, locked, installingbooting, isomounting, ok).
	ServerStatus *string `pulumi:"serverStatus"`
	// The ID of the Vultr snapshot that the server will restore for the initial installation. [See List Snapshots](https://www.vultr.com/api/#operation/list-snapshots)
	SnapshotId *string `pulumi:"snapshotId"`
	// A list of SSH key IDs to apply to the server on install (only valid for Linux/FreeBSD).
	SshKeyIds []string `pulumi:"sshKeyIds"`
	// The status of the server's subscription.
	Status *string `pulumi:"status"`
	// The tag to assign to the server.
	Tag *string `pulumi:"tag"`
	// Generic data store, which some provisioning tools and cloud operating systems use as a configuration file. It is generally consumed only once after an instance has been launched, but individual needs may vary.
	UserData *string `pulumi:"userData"`
	// The main IPv6 network address.
	V6MainIp *string `pulumi:"v6MainIp"`
	// The IPv6 subnet.
	V6Network *string `pulumi:"v6Network"`
	// The IPv6 network size in bits.
	V6NetworkSize *int `pulumi:"v6NetworkSize"`
	// The number of virtual CPUs available on the server.
	VcpuCount *int `pulumi:"vcpuCount"`
}

type InstanceState struct {
	// Whether an activation email will be sent when the server is ready.
	ActivationEmail pulumi.BoolPtrInput
	// The server's allowed bandwidth usage in GB.
	AllowedBandwidth pulumi.IntPtrInput
	// The ID of the Vultr application to be installed on the server. [See List Applications](https://www.vultr.com/api/#operation/list-applications)
	AppId pulumi.IntPtrInput
	// Whether automatic backups will be enabled for this server (these have an extra charge associated with them). Values can be enabled or disabled.
	Backups pulumi.StringPtrInput
	// A block that defines the way backups should be scheduled. While this is an optional field if `backups` are `enabled` this field is mandatory. The configuration of a `backupsSchedule` is listed below.
	BackupsSchedule InstanceBackupsSchedulePtrInput
	// The date the server was added to your Vultr account.
	DateCreated pulumi.StringPtrInput
	// Whether DDOS protection will be enabled on the server (there is an additional charge for this).
	DdosProtection pulumi.BoolPtrInput
	// The server's default password.
	DefaultPassword pulumi.StringPtrInput
	// The description of the disk(s) on the server.
	Disk pulumi.IntPtrInput
	// Whether the server has IPv6 networking activated.
	EnableIpv6 pulumi.BoolPtrInput
	// Whether the server has private networking support enabled.
	//
	// Deprecated: In the next release of this provider we will be removing `enable_private_network` due to issues that may cause drift and having to maintain private network ip state. Please switch to using private_network_ids to manage your private network fields.
	EnablePrivateNetwork pulumi.BoolPtrInput
	// Array of which features are enabled.
	Features pulumi.StringArrayInput
	// The ID of the firewall group to assign to the server.
	FirewallGroupId pulumi.StringPtrInput
	// The server's IPv4 gateway.
	GatewayV4 pulumi.StringPtrInput
	// The hostname to assign to the server.
	Hostname pulumi.StringPtrInput
	// The ID of the Vultr marketplace application to be installed on the server. [See List Applications](https://www.vultr.com/api/#operation/list-applications) Note marketplace applications are denoted by type: `marketplace` and you must use the `imageId` not the id.
	ImageId pulumi.StringPtrInput
	// The server's internal IP address.
	InternalIp pulumi.StringPtrInput
	// The ID of the ISO file to be installed on the server. [See List ISO](https://www.vultr.com/api/#operation/list-isos)
	IsoId pulumi.StringPtrInput
	// The server's current KVM URL. This URL will change periodically. It is not advised to cache this value.
	Kvm pulumi.StringPtrInput
	// A label for the server.
	Label pulumi.StringPtrInput
	// The server's main IP address.
	MainIp pulumi.StringPtrInput
	// The server's IPv4 netmask.
	NetmaskV4 pulumi.StringPtrInput
	// The string description of the operating system installed on the server.
	Os pulumi.StringPtrInput
	// The ID of the operating system to be installed on the server. [See List OS](https://www.vultr.com/api/#operation/list-os)
	OsId pulumi.IntPtrInput
	// The ID of the plan that you want the instance to subscribe to. [See List Plans](https://www.vultr.com/api/#tag/plans)
	Plan pulumi.StringPtrInput
	// Whether the server is powered on or not.
	PowerStatus pulumi.StringPtrInput
	// A list of private network IDs to be attached to the server.
	PrivateNetworkIds pulumi.StringArrayInput
	// The amount of memory available on the server in MB.
	Ram pulumi.IntPtrInput
	// The ID of the region that the instance is to be created in. [See List Regions](https://www.vultr.com/api/#operation/list-regions)
	Region pulumi.StringPtrInput
	// ID of the floating IP to use as the main IP of this server.
	ReservedIpId pulumi.StringPtrInput
	// The ID of the startup script you want added to the server.
	ScriptId pulumi.StringPtrInput
	// A more detailed server status (none, locked, installingbooting, isomounting, ok).
	ServerStatus pulumi.StringPtrInput
	// The ID of the Vultr snapshot that the server will restore for the initial installation. [See List Snapshots](https://www.vultr.com/api/#operation/list-snapshots)
	SnapshotId pulumi.StringPtrInput
	// A list of SSH key IDs to apply to the server on install (only valid for Linux/FreeBSD).
	SshKeyIds pulumi.StringArrayInput
	// The status of the server's subscription.
	Status pulumi.StringPtrInput
	// The tag to assign to the server.
	Tag pulumi.StringPtrInput
	// Generic data store, which some provisioning tools and cloud operating systems use as a configuration file. It is generally consumed only once after an instance has been launched, but individual needs may vary.
	UserData pulumi.StringPtrInput
	// The main IPv6 network address.
	V6MainIp pulumi.StringPtrInput
	// The IPv6 subnet.
	V6Network pulumi.StringPtrInput
	// The IPv6 network size in bits.
	V6NetworkSize pulumi.IntPtrInput
	// The number of virtual CPUs available on the server.
	VcpuCount pulumi.IntPtrInput
}

func (InstanceState) ElementType() reflect.Type {
	return reflect.TypeOf((*instanceState)(nil)).Elem()
}

type instanceArgs struct {
	// Whether an activation email will be sent when the server is ready.
	ActivationEmail *bool `pulumi:"activationEmail"`
	// The ID of the Vultr application to be installed on the server. [See List Applications](https://www.vultr.com/api/#operation/list-applications)
	AppId *int `pulumi:"appId"`
	// Whether automatic backups will be enabled for this server (these have an extra charge associated with them). Values can be enabled or disabled.
	Backups *string `pulumi:"backups"`
	// A block that defines the way backups should be scheduled. While this is an optional field if `backups` are `enabled` this field is mandatory. The configuration of a `backupsSchedule` is listed below.
	BackupsSchedule *InstanceBackupsSchedule `pulumi:"backupsSchedule"`
	// Whether DDOS protection will be enabled on the server (there is an additional charge for this).
	DdosProtection *bool `pulumi:"ddosProtection"`
	// Whether the server has IPv6 networking activated.
	EnableIpv6 *bool `pulumi:"enableIpv6"`
	// Whether the server has private networking support enabled.
	//
	// Deprecated: In the next release of this provider we will be removing `enable_private_network` due to issues that may cause drift and having to maintain private network ip state. Please switch to using private_network_ids to manage your private network fields.
	EnablePrivateNetwork *bool `pulumi:"enablePrivateNetwork"`
	// The ID of the firewall group to assign to the server.
	FirewallGroupId *string `pulumi:"firewallGroupId"`
	// The hostname to assign to the server.
	Hostname *string `pulumi:"hostname"`
	// The ID of the Vultr marketplace application to be installed on the server. [See List Applications](https://www.vultr.com/api/#operation/list-applications) Note marketplace applications are denoted by type: `marketplace` and you must use the `imageId` not the id.
	ImageId *string `pulumi:"imageId"`
	// The ID of the ISO file to be installed on the server. [See List ISO](https://www.vultr.com/api/#operation/list-isos)
	IsoId *string `pulumi:"isoId"`
	// A label for the server.
	Label *string `pulumi:"label"`
	// The ID of the operating system to be installed on the server. [See List OS](https://www.vultr.com/api/#operation/list-os)
	OsId *int `pulumi:"osId"`
	// The ID of the plan that you want the instance to subscribe to. [See List Plans](https://www.vultr.com/api/#tag/plans)
	Plan string `pulumi:"plan"`
	// A list of private network IDs to be attached to the server.
	PrivateNetworkIds []string `pulumi:"privateNetworkIds"`
	// The ID of the region that the instance is to be created in. [See List Regions](https://www.vultr.com/api/#operation/list-regions)
	Region string `pulumi:"region"`
	// ID of the floating IP to use as the main IP of this server.
	ReservedIpId *string `pulumi:"reservedIpId"`
	// The ID of the startup script you want added to the server.
	ScriptId *string `pulumi:"scriptId"`
	// The ID of the Vultr snapshot that the server will restore for the initial installation. [See List Snapshots](https://www.vultr.com/api/#operation/list-snapshots)
	SnapshotId *string `pulumi:"snapshotId"`
	// A list of SSH key IDs to apply to the server on install (only valid for Linux/FreeBSD).
	SshKeyIds []string `pulumi:"sshKeyIds"`
	// The tag to assign to the server.
	Tag *string `pulumi:"tag"`
	// Generic data store, which some provisioning tools and cloud operating systems use as a configuration file. It is generally consumed only once after an instance has been launched, but individual needs may vary.
	UserData *string `pulumi:"userData"`
}

// The set of arguments for constructing a Instance resource.
type InstanceArgs struct {
	// Whether an activation email will be sent when the server is ready.
	ActivationEmail pulumi.BoolPtrInput
	// The ID of the Vultr application to be installed on the server. [See List Applications](https://www.vultr.com/api/#operation/list-applications)
	AppId pulumi.IntPtrInput
	// Whether automatic backups will be enabled for this server (these have an extra charge associated with them). Values can be enabled or disabled.
	Backups pulumi.StringPtrInput
	// A block that defines the way backups should be scheduled. While this is an optional field if `backups` are `enabled` this field is mandatory. The configuration of a `backupsSchedule` is listed below.
	BackupsSchedule InstanceBackupsSchedulePtrInput
	// Whether DDOS protection will be enabled on the server (there is an additional charge for this).
	DdosProtection pulumi.BoolPtrInput
	// Whether the server has IPv6 networking activated.
	EnableIpv6 pulumi.BoolPtrInput
	// Whether the server has private networking support enabled.
	//
	// Deprecated: In the next release of this provider we will be removing `enable_private_network` due to issues that may cause drift and having to maintain private network ip state. Please switch to using private_network_ids to manage your private network fields.
	EnablePrivateNetwork pulumi.BoolPtrInput
	// The ID of the firewall group to assign to the server.
	FirewallGroupId pulumi.StringPtrInput
	// The hostname to assign to the server.
	Hostname pulumi.StringPtrInput
	// The ID of the Vultr marketplace application to be installed on the server. [See List Applications](https://www.vultr.com/api/#operation/list-applications) Note marketplace applications are denoted by type: `marketplace` and you must use the `imageId` not the id.
	ImageId pulumi.StringPtrInput
	// The ID of the ISO file to be installed on the server. [See List ISO](https://www.vultr.com/api/#operation/list-isos)
	IsoId pulumi.StringPtrInput
	// A label for the server.
	Label pulumi.StringPtrInput
	// The ID of the operating system to be installed on the server. [See List OS](https://www.vultr.com/api/#operation/list-os)
	OsId pulumi.IntPtrInput
	// The ID of the plan that you want the instance to subscribe to. [See List Plans](https://www.vultr.com/api/#tag/plans)
	Plan pulumi.StringInput
	// A list of private network IDs to be attached to the server.
	PrivateNetworkIds pulumi.StringArrayInput
	// The ID of the region that the instance is to be created in. [See List Regions](https://www.vultr.com/api/#operation/list-regions)
	Region pulumi.StringInput
	// ID of the floating IP to use as the main IP of this server.
	ReservedIpId pulumi.StringPtrInput
	// The ID of the startup script you want added to the server.
	ScriptId pulumi.StringPtrInput
	// The ID of the Vultr snapshot that the server will restore for the initial installation. [See List Snapshots](https://www.vultr.com/api/#operation/list-snapshots)
	SnapshotId pulumi.StringPtrInput
	// A list of SSH key IDs to apply to the server on install (only valid for Linux/FreeBSD).
	SshKeyIds pulumi.StringArrayInput
	// The tag to assign to the server.
	Tag pulumi.StringPtrInput
	// Generic data store, which some provisioning tools and cloud operating systems use as a configuration file. It is generally consumed only once after an instance has been launched, but individual needs may vary.
	UserData pulumi.StringPtrInput
}

func (InstanceArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*instanceArgs)(nil)).Elem()
}

type InstanceInput interface {
	pulumi.Input

	ToInstanceOutput() InstanceOutput
	ToInstanceOutputWithContext(ctx context.Context) InstanceOutput
}

func (*Instance) ElementType() reflect.Type {
	return reflect.TypeOf((**Instance)(nil)).Elem()
}

func (i *Instance) ToInstanceOutput() InstanceOutput {
	return i.ToInstanceOutputWithContext(context.Background())
}

func (i *Instance) ToInstanceOutputWithContext(ctx context.Context) InstanceOutput {
	return pulumi.ToOutputWithContext(ctx, i).(InstanceOutput)
}

// InstanceArrayInput is an input type that accepts InstanceArray and InstanceArrayOutput values.
// You can construct a concrete instance of `InstanceArrayInput` via:
//
//          InstanceArray{ InstanceArgs{...} }
type InstanceArrayInput interface {
	pulumi.Input

	ToInstanceArrayOutput() InstanceArrayOutput
	ToInstanceArrayOutputWithContext(context.Context) InstanceArrayOutput
}

type InstanceArray []InstanceInput

func (InstanceArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*Instance)(nil)).Elem()
}

func (i InstanceArray) ToInstanceArrayOutput() InstanceArrayOutput {
	return i.ToInstanceArrayOutputWithContext(context.Background())
}

func (i InstanceArray) ToInstanceArrayOutputWithContext(ctx context.Context) InstanceArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(InstanceArrayOutput)
}

// InstanceMapInput is an input type that accepts InstanceMap and InstanceMapOutput values.
// You can construct a concrete instance of `InstanceMapInput` via:
//
//          InstanceMap{ "key": InstanceArgs{...} }
type InstanceMapInput interface {
	pulumi.Input

	ToInstanceMapOutput() InstanceMapOutput
	ToInstanceMapOutputWithContext(context.Context) InstanceMapOutput
}

type InstanceMap map[string]InstanceInput

func (InstanceMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*Instance)(nil)).Elem()
}

func (i InstanceMap) ToInstanceMapOutput() InstanceMapOutput {
	return i.ToInstanceMapOutputWithContext(context.Background())
}

func (i InstanceMap) ToInstanceMapOutputWithContext(ctx context.Context) InstanceMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(InstanceMapOutput)
}

type InstanceOutput struct{ *pulumi.OutputState }

func (InstanceOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**Instance)(nil)).Elem()
}

func (o InstanceOutput) ToInstanceOutput() InstanceOutput {
	return o
}

func (o InstanceOutput) ToInstanceOutputWithContext(ctx context.Context) InstanceOutput {
	return o
}

type InstanceArrayOutput struct{ *pulumi.OutputState }

func (InstanceArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*Instance)(nil)).Elem()
}

func (o InstanceArrayOutput) ToInstanceArrayOutput() InstanceArrayOutput {
	return o
}

func (o InstanceArrayOutput) ToInstanceArrayOutputWithContext(ctx context.Context) InstanceArrayOutput {
	return o
}

func (o InstanceArrayOutput) Index(i pulumi.IntInput) InstanceOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) *Instance {
		return vs[0].([]*Instance)[vs[1].(int)]
	}).(InstanceOutput)
}

type InstanceMapOutput struct{ *pulumi.OutputState }

func (InstanceMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*Instance)(nil)).Elem()
}

func (o InstanceMapOutput) ToInstanceMapOutput() InstanceMapOutput {
	return o
}

func (o InstanceMapOutput) ToInstanceMapOutputWithContext(ctx context.Context) InstanceMapOutput {
	return o
}

func (o InstanceMapOutput) MapIndex(k pulumi.StringInput) InstanceOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) *Instance {
		return vs[0].(map[string]*Instance)[vs[1].(string)]
	}).(InstanceOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*InstanceInput)(nil)).Elem(), &Instance{})
	pulumi.RegisterInputType(reflect.TypeOf((*InstanceArrayInput)(nil)).Elem(), InstanceArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*InstanceMapInput)(nil)).Elem(), InstanceMap{})
	pulumi.RegisterOutputType(InstanceOutput{})
	pulumi.RegisterOutputType(InstanceArrayOutput{})
	pulumi.RegisterOutputType(InstanceMapOutput{})
}
