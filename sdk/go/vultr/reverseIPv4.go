// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package vultr

import (
	"context"
	"reflect"

	"github.com/pkg/errors"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// Provides a Vultr Reverse IPv4 resource. This can be used to create, read, and
// modify reverse DNS records for IPv4 addresses. Upon success, DNS
// changes may take 6-12 hours to become active.
//
// ## Example Usage
//
// Create a new reverse DNS record for an IPv4 address:
//
// ```go
// package main
//
// import (
// 	"github.com/pulumi/pulumi-vultr/sdk/go/vultr"
// 	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
// )
//
// func main() {
// 	pulumi.Run(func(ctx *pulumi.Context) error {
// 		myInstance, err := vultr.NewInstance(ctx, "myInstance", &vultr.InstanceArgs{
// 			EnableIpv6: pulumi.Bool(true),
// 			OsId:       pulumi.Int(167),
// 			Plan:       pulumi.String("vc2-1c-1gb"),
// 			Region:     pulumi.String("ewr"),
// 		})
// 		if err != nil {
// 			return err
// 		}
// 		_, err = vultr.NewReverseIPv4(ctx, "myReverseIpv4", &vultr.ReverseIPv4Args{
// 			InstanceId: myInstance.ID(),
// 			Ip:         myInstance.MainIp,
// 			Reverse:    pulumi.String("host.example.com"),
// 		})
// 		if err != nil {
// 			return err
// 		}
// 		return nil
// 	})
// }
// ```
type ReverseIPv4 struct {
	pulumi.CustomResourceState

	// The gateway IP address.
	Gateway pulumi.StringOutput `pulumi:"gateway"`
	// The ID of the instance you want to set an IPv4
	// reverse DNS record for.
	InstanceId pulumi.StringOutput `pulumi:"instanceId"`
	// The IPv4 address used in the reverse DNS record.
	Ip pulumi.StringOutput `pulumi:"ip"`
	// The IPv4 netmask in dot-decimal notation.
	Netmask pulumi.StringOutput `pulumi:"netmask"`
	// The hostname used in the IPv4 reverse DNS record.
	Reverse pulumi.StringOutput `pulumi:"reverse"`
}

// NewReverseIPv4 registers a new resource with the given unique name, arguments, and options.
func NewReverseIPv4(ctx *pulumi.Context,
	name string, args *ReverseIPv4Args, opts ...pulumi.ResourceOption) (*ReverseIPv4, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.InstanceId == nil {
		return nil, errors.New("invalid value for required argument 'InstanceId'")
	}
	if args.Ip == nil {
		return nil, errors.New("invalid value for required argument 'Ip'")
	}
	if args.Reverse == nil {
		return nil, errors.New("invalid value for required argument 'Reverse'")
	}
	var resource ReverseIPv4
	err := ctx.RegisterResource("vultr:index/reverseIPv4:ReverseIPv4", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetReverseIPv4 gets an existing ReverseIPv4 resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetReverseIPv4(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *ReverseIPv4State, opts ...pulumi.ResourceOption) (*ReverseIPv4, error) {
	var resource ReverseIPv4
	err := ctx.ReadResource("vultr:index/reverseIPv4:ReverseIPv4", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering ReverseIPv4 resources.
type reverseIPv4State struct {
	// The gateway IP address.
	Gateway *string `pulumi:"gateway"`
	// The ID of the instance you want to set an IPv4
	// reverse DNS record for.
	InstanceId *string `pulumi:"instanceId"`
	// The IPv4 address used in the reverse DNS record.
	Ip *string `pulumi:"ip"`
	// The IPv4 netmask in dot-decimal notation.
	Netmask *string `pulumi:"netmask"`
	// The hostname used in the IPv4 reverse DNS record.
	Reverse *string `pulumi:"reverse"`
}

type ReverseIPv4State struct {
	// The gateway IP address.
	Gateway pulumi.StringPtrInput
	// The ID of the instance you want to set an IPv4
	// reverse DNS record for.
	InstanceId pulumi.StringPtrInput
	// The IPv4 address used in the reverse DNS record.
	Ip pulumi.StringPtrInput
	// The IPv4 netmask in dot-decimal notation.
	Netmask pulumi.StringPtrInput
	// The hostname used in the IPv4 reverse DNS record.
	Reverse pulumi.StringPtrInput
}

func (ReverseIPv4State) ElementType() reflect.Type {
	return reflect.TypeOf((*reverseIPv4State)(nil)).Elem()
}

type reverseIPv4Args struct {
	// The ID of the instance you want to set an IPv4
	// reverse DNS record for.
	InstanceId string `pulumi:"instanceId"`
	// The IPv4 address used in the reverse DNS record.
	Ip string `pulumi:"ip"`
	// The hostname used in the IPv4 reverse DNS record.
	Reverse string `pulumi:"reverse"`
}

// The set of arguments for constructing a ReverseIPv4 resource.
type ReverseIPv4Args struct {
	// The ID of the instance you want to set an IPv4
	// reverse DNS record for.
	InstanceId pulumi.StringInput
	// The IPv4 address used in the reverse DNS record.
	Ip pulumi.StringInput
	// The hostname used in the IPv4 reverse DNS record.
	Reverse pulumi.StringInput
}

func (ReverseIPv4Args) ElementType() reflect.Type {
	return reflect.TypeOf((*reverseIPv4Args)(nil)).Elem()
}

type ReverseIPv4Input interface {
	pulumi.Input

	ToReverseIPv4Output() ReverseIPv4Output
	ToReverseIPv4OutputWithContext(ctx context.Context) ReverseIPv4Output
}

func (*ReverseIPv4) ElementType() reflect.Type {
	return reflect.TypeOf((**ReverseIPv4)(nil)).Elem()
}

func (i *ReverseIPv4) ToReverseIPv4Output() ReverseIPv4Output {
	return i.ToReverseIPv4OutputWithContext(context.Background())
}

func (i *ReverseIPv4) ToReverseIPv4OutputWithContext(ctx context.Context) ReverseIPv4Output {
	return pulumi.ToOutputWithContext(ctx, i).(ReverseIPv4Output)
}

// ReverseIPv4ArrayInput is an input type that accepts ReverseIPv4Array and ReverseIPv4ArrayOutput values.
// You can construct a concrete instance of `ReverseIPv4ArrayInput` via:
//
//          ReverseIPv4Array{ ReverseIPv4Args{...} }
type ReverseIPv4ArrayInput interface {
	pulumi.Input

	ToReverseIPv4ArrayOutput() ReverseIPv4ArrayOutput
	ToReverseIPv4ArrayOutputWithContext(context.Context) ReverseIPv4ArrayOutput
}

type ReverseIPv4Array []ReverseIPv4Input

func (ReverseIPv4Array) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*ReverseIPv4)(nil)).Elem()
}

func (i ReverseIPv4Array) ToReverseIPv4ArrayOutput() ReverseIPv4ArrayOutput {
	return i.ToReverseIPv4ArrayOutputWithContext(context.Background())
}

func (i ReverseIPv4Array) ToReverseIPv4ArrayOutputWithContext(ctx context.Context) ReverseIPv4ArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ReverseIPv4ArrayOutput)
}

// ReverseIPv4MapInput is an input type that accepts ReverseIPv4Map and ReverseIPv4MapOutput values.
// You can construct a concrete instance of `ReverseIPv4MapInput` via:
//
//          ReverseIPv4Map{ "key": ReverseIPv4Args{...} }
type ReverseIPv4MapInput interface {
	pulumi.Input

	ToReverseIPv4MapOutput() ReverseIPv4MapOutput
	ToReverseIPv4MapOutputWithContext(context.Context) ReverseIPv4MapOutput
}

type ReverseIPv4Map map[string]ReverseIPv4Input

func (ReverseIPv4Map) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*ReverseIPv4)(nil)).Elem()
}

func (i ReverseIPv4Map) ToReverseIPv4MapOutput() ReverseIPv4MapOutput {
	return i.ToReverseIPv4MapOutputWithContext(context.Background())
}

func (i ReverseIPv4Map) ToReverseIPv4MapOutputWithContext(ctx context.Context) ReverseIPv4MapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ReverseIPv4MapOutput)
}

type ReverseIPv4Output struct{ *pulumi.OutputState }

func (ReverseIPv4Output) ElementType() reflect.Type {
	return reflect.TypeOf((**ReverseIPv4)(nil)).Elem()
}

func (o ReverseIPv4Output) ToReverseIPv4Output() ReverseIPv4Output {
	return o
}

func (o ReverseIPv4Output) ToReverseIPv4OutputWithContext(ctx context.Context) ReverseIPv4Output {
	return o
}

type ReverseIPv4ArrayOutput struct{ *pulumi.OutputState }

func (ReverseIPv4ArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*ReverseIPv4)(nil)).Elem()
}

func (o ReverseIPv4ArrayOutput) ToReverseIPv4ArrayOutput() ReverseIPv4ArrayOutput {
	return o
}

func (o ReverseIPv4ArrayOutput) ToReverseIPv4ArrayOutputWithContext(ctx context.Context) ReverseIPv4ArrayOutput {
	return o
}

func (o ReverseIPv4ArrayOutput) Index(i pulumi.IntInput) ReverseIPv4Output {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) *ReverseIPv4 {
		return vs[0].([]*ReverseIPv4)[vs[1].(int)]
	}).(ReverseIPv4Output)
}

type ReverseIPv4MapOutput struct{ *pulumi.OutputState }

func (ReverseIPv4MapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*ReverseIPv4)(nil)).Elem()
}

func (o ReverseIPv4MapOutput) ToReverseIPv4MapOutput() ReverseIPv4MapOutput {
	return o
}

func (o ReverseIPv4MapOutput) ToReverseIPv4MapOutputWithContext(ctx context.Context) ReverseIPv4MapOutput {
	return o
}

func (o ReverseIPv4MapOutput) MapIndex(k pulumi.StringInput) ReverseIPv4Output {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) *ReverseIPv4 {
		return vs[0].(map[string]*ReverseIPv4)[vs[1].(string)]
	}).(ReverseIPv4Output)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*ReverseIPv4Input)(nil)).Elem(), &ReverseIPv4{})
	pulumi.RegisterInputType(reflect.TypeOf((*ReverseIPv4ArrayInput)(nil)).Elem(), ReverseIPv4Array{})
	pulumi.RegisterInputType(reflect.TypeOf((*ReverseIPv4MapInput)(nil)).Elem(), ReverseIPv4Map{})
	pulumi.RegisterOutputType(ReverseIPv4Output{})
	pulumi.RegisterOutputType(ReverseIPv4ArrayOutput{})
	pulumi.RegisterOutputType(ReverseIPv4MapOutput{})
}
