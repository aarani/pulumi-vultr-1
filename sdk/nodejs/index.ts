// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as utilities from "./utilities";

// Export members:
export * from "./bareMetalServer";
export * from "./blockStorage";
export * from "./dnsDomain";
export * from "./dnsRecord";
export * from "./firewallGroup";
export * from "./firewallRule";
export * from "./getAccount";
export * from "./getApplication";
export * from "./getBackup";
export * from "./getBareMetalPlan";
export * from "./getBareMetalServer";
export * from "./getBlockStorage";
export * from "./getDnsDomain";
export * from "./getFirewallGroup";
export * from "./getInstance";
export * from "./getInstanceIpv4";
export * from "./getInstances";
export * from "./getIsoPrivate";
export * from "./getIsoPublic";
export * from "./getKubernetes";
export * from "./getLoadBalancer";
export * from "./getObjectStorage";
export * from "./getObjectStorageCluster";
export * from "./getOs";
export * from "./getPlan";
export * from "./getPrivateNetwork";
export * from "./getRegion";
export * from "./getReservedIp";
export * from "./getReverseIpv4";
export * from "./getReverseIpv6";
export * from "./getSnapshot";
export * from "./getSshKey";
export * from "./getStartupScript";
export * from "./getUser";
export * from "./getVPC";
export * from "./instance";
export * from "./instanceIPv4";
export * from "./isoPrivate";
export * from "./kubernetes";
export * from "./loadBalancer";
export * from "./objectStorage";
export * from "./privateNetwork";
export * from "./provider";
export * from "./reservedIP";
export * from "./reverseIpv4";
export * from "./reverseIpv6";
export * from "./snapshot";
export * from "./snapshotFromUrl";
export * from "./sshKey";
export * from "./startupScript";
export * from "./user";
export * from "./vpc";

// Export sub-modules:
import * as config from "./config";
import * as types from "./types";

export {
    config,
    types,
};

// Import resources to register:
import { BareMetalServer } from "./bareMetalServer";
import { BlockStorage } from "./blockStorage";
import { DnsDomain } from "./dnsDomain";
import { DnsRecord } from "./dnsRecord";
import { FirewallGroup } from "./firewallGroup";
import { FirewallRule } from "./firewallRule";
import { Instance } from "./instance";
import { InstanceIPv4 } from "./instanceIPv4";
import { IsoPrivate } from "./isoPrivate";
import { Kubernetes } from "./kubernetes";
import { LoadBalancer } from "./loadBalancer";
import { ObjectStorage } from "./objectStorage";
import { PrivateNetwork } from "./privateNetwork";
import { ReservedIP } from "./reservedIP";
import { ReverseIpv4 } from "./reverseIpv4";
import { ReverseIpv6 } from "./reverseIpv6";
import { Snapshot } from "./snapshot";
import { SnapshotFromUrl } from "./snapshotFromUrl";
import { SshKey } from "./sshKey";
import { StartupScript } from "./startupScript";
import { User } from "./user";
import { VPC } from "./vpc";

const _module = {
    version: utilities.getVersion(),
    construct: (name: string, type: string, urn: string): pulumi.Resource => {
        switch (type) {
            case "vultr:index/bareMetalServer:BareMetalServer":
                return new BareMetalServer(name, <any>undefined, { urn })
            case "vultr:index/blockStorage:BlockStorage":
                return new BlockStorage(name, <any>undefined, { urn })
            case "vultr:index/dnsDomain:DnsDomain":
                return new DnsDomain(name, <any>undefined, { urn })
            case "vultr:index/dnsRecord:DnsRecord":
                return new DnsRecord(name, <any>undefined, { urn })
            case "vultr:index/firewallGroup:FirewallGroup":
                return new FirewallGroup(name, <any>undefined, { urn })
            case "vultr:index/firewallRule:FirewallRule":
                return new FirewallRule(name, <any>undefined, { urn })
            case "vultr:index/instance:Instance":
                return new Instance(name, <any>undefined, { urn })
            case "vultr:index/instanceIPv4:InstanceIPv4":
                return new InstanceIPv4(name, <any>undefined, { urn })
            case "vultr:index/isoPrivate:IsoPrivate":
                return new IsoPrivate(name, <any>undefined, { urn })
            case "vultr:index/kubernetes:Kubernetes":
                return new Kubernetes(name, <any>undefined, { urn })
            case "vultr:index/loadBalancer:LoadBalancer":
                return new LoadBalancer(name, <any>undefined, { urn })
            case "vultr:index/objectStorage:ObjectStorage":
                return new ObjectStorage(name, <any>undefined, { urn })
            case "vultr:index/privateNetwork:PrivateNetwork":
                return new PrivateNetwork(name, <any>undefined, { urn })
            case "vultr:index/reservedIP:ReservedIP":
                return new ReservedIP(name, <any>undefined, { urn })
            case "vultr:index/reverseIpv4:ReverseIpv4":
                return new ReverseIpv4(name, <any>undefined, { urn })
            case "vultr:index/reverseIpv6:ReverseIpv6":
                return new ReverseIpv6(name, <any>undefined, { urn })
            case "vultr:index/snapshot:Snapshot":
                return new Snapshot(name, <any>undefined, { urn })
            case "vultr:index/snapshotFromUrl:SnapshotFromUrl":
                return new SnapshotFromUrl(name, <any>undefined, { urn })
            case "vultr:index/sshKey:SshKey":
                return new SshKey(name, <any>undefined, { urn })
            case "vultr:index/startupScript:StartupScript":
                return new StartupScript(name, <any>undefined, { urn })
            case "vultr:index/user:User":
                return new User(name, <any>undefined, { urn })
            case "vultr:index/vPC:VPC":
                return new VPC(name, <any>undefined, { urn })
            default:
                throw new Error(`unknown resource type ${type}`);
        }
    },
};
pulumi.runtime.registerResourceModule("vultr", "index/bareMetalServer", _module)
pulumi.runtime.registerResourceModule("vultr", "index/blockStorage", _module)
pulumi.runtime.registerResourceModule("vultr", "index/dnsDomain", _module)
pulumi.runtime.registerResourceModule("vultr", "index/dnsRecord", _module)
pulumi.runtime.registerResourceModule("vultr", "index/firewallGroup", _module)
pulumi.runtime.registerResourceModule("vultr", "index/firewallRule", _module)
pulumi.runtime.registerResourceModule("vultr", "index/instance", _module)
pulumi.runtime.registerResourceModule("vultr", "index/instanceIPv4", _module)
pulumi.runtime.registerResourceModule("vultr", "index/isoPrivate", _module)
pulumi.runtime.registerResourceModule("vultr", "index/kubernetes", _module)
pulumi.runtime.registerResourceModule("vultr", "index/loadBalancer", _module)
pulumi.runtime.registerResourceModule("vultr", "index/objectStorage", _module)
pulumi.runtime.registerResourceModule("vultr", "index/privateNetwork", _module)
pulumi.runtime.registerResourceModule("vultr", "index/reservedIP", _module)
pulumi.runtime.registerResourceModule("vultr", "index/reverseIpv4", _module)
pulumi.runtime.registerResourceModule("vultr", "index/reverseIpv6", _module)
pulumi.runtime.registerResourceModule("vultr", "index/snapshot", _module)
pulumi.runtime.registerResourceModule("vultr", "index/snapshotFromUrl", _module)
pulumi.runtime.registerResourceModule("vultr", "index/sshKey", _module)
pulumi.runtime.registerResourceModule("vultr", "index/startupScript", _module)
pulumi.runtime.registerResourceModule("vultr", "index/user", _module)
pulumi.runtime.registerResourceModule("vultr", "index/vPC", _module)

import { Provider } from "./provider";

pulumi.runtime.registerResourcePackage("vultr", {
    version: utilities.getVersion(),
    constructProvider: (name: string, type: string, urn: string): pulumi.ProviderResource => {
        if (type !== "pulumi:providers:vultr") {
            throw new Error(`unknown provider type ${type}`);
        }
        return new Provider(name, <any>undefined, { urn });
    },
});
