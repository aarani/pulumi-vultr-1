// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import { input as inputs, output as outputs } from "./types";
import * as utilities from "./utilities";

/**
 * Get information about a Vultr VPC.
 *
 * ## Example Usage
 *
 * Get the information for a VPC by `description`:
 *
 * ```typescript
 * import * as pulumi from "@pulumi/pulumi";
 * import * as vultr from "@pulumi/vultr";
 *
 * const myVpc = pulumi.output(vultr.getVPC({
 *     filters: [{
 *         name: "description",
 *         values: ["my-vpc-description"],
 *     }],
 * }));
 * ```
 */
export function getVPC(args?: GetVPCArgs, opts?: pulumi.InvokeOptions): Promise<GetVPCResult> {
    args = args || {};
    if (!opts) {
        opts = {}
    }

    opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
    return pulumi.runtime.invoke("vultr:index/getVPC:getVPC", {
        "filters": args.filters,
    }, opts);
}

/**
 * A collection of arguments for invoking getVPC.
 */
export interface GetVPCArgs {
    /**
     * Query parameters for finding VPCs.
     */
    filters?: inputs.GetVPCFilter[];
}

/**
 * A collection of values returned by getVPC.
 */
export interface GetVPCResult {
    /**
     * The date the VPC was added to your Vultr account.
     */
    readonly dateCreated: string;
    /**
     * The VPC's description.
     */
    readonly description: string;
    readonly filters?: outputs.GetVPCFilter[];
    /**
     * The provider-assigned unique ID for this managed resource.
     */
    readonly id: string;
    /**
     * The ID of the region that the VPC is in.
     */
    readonly region: string;
    /**
     * The IPv4 network address. For example: 10.1.1.0.
     */
    readonly v4Subnet: string;
    /**
     * The number of bits for the netmask in CIDR notation. Example: 20
     */
    readonly v4SubnetMask: number;
}

export function getVPCOutput(args?: GetVPCOutputArgs, opts?: pulumi.InvokeOptions): pulumi.Output<GetVPCResult> {
    return pulumi.output(args).apply(a => getVPC(a, opts))
}

/**
 * A collection of arguments for invoking getVPC.
 */
export interface GetVPCOutputArgs {
    /**
     * Query parameters for finding VPCs.
     */
    filters?: pulumi.Input<pulumi.Input<inputs.GetVPCFilterArgs>[]>;
}
